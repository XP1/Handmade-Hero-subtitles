1
00:00:00,000 --> 00:00:05,600
He looks like the stream begins now or so says the little timer and I

2
00:00:05,600 --> 00:00:07,400
think we know from experience.

3
00:00:07,400 --> 00:00:09,300
The timer is never wrong.

4
00:00:09,500 --> 00:00:12,100
So, welcome back everyone to handmade here.

5
00:00:12,100 --> 00:00:17,200
I hope you have had a good weekend this week, in our quest to build a

6
00:00:17,200 --> 00:00:18,400
complete game from scratch.

7
00:00:18,400 --> 00:00:22,200
We are going to be getting some user input and getting sound output

8
00:00:22,200 --> 00:00:22,600
working.

9
00:00:22,900 --> 00:00:25,700
If all goes according to plan, now that there is much of a plan.

10
00:00:25,700 --> 00:00:28,400
But if all goes according to what we would like to get done, let's put

11
00:00:28,400 --> 00:00:29,000
it that way.

12
00:00:30,000 --> 00:00:33,900
So if you are following along with today's lesson and you have

13
00:00:33,900 --> 00:00:37,300
pre-ordered the game on handmade hirota, or you can go to your zip

14
00:00:37,300 --> 00:00:40,700
file and unpack the day 5 source code.

15
00:00:40,900 --> 00:00:44,000
That is what we are starting with here on day 6.

16
00:00:44,200 --> 00:00:44,400
Now.

17
00:00:44,400 --> 00:00:47,500
The thing that I want to talk about today is basically how we are

18
00:00:47,500 --> 00:00:49,700
going to get input.

19
00:00:49,800 --> 00:00:52,200
Basically from a Gamepad, if that makes sense.

20
00:00:52,600 --> 00:00:54,200
And also how to get it from the keyboard.

21
00:00:54,200 --> 00:00:56,900
So, if we take a look here, I'm going to search for something called X

22
00:00:56,900 --> 00:00:57,200
input.

23
00:00:57,200 --> 00:00:58,800
So, you can see what I'm talking about.

24
00:00:58,800 --> 00:00:59,900
X input is basically,

25
00:01:00,000 --> 00:01:04,599
The current way that you have to use to get the kind of gamepads that

26
00:01:04,599 --> 00:01:07,700
almost, everyone actually uses with games now, which are like Xbox 360

27
00:01:07,700 --> 00:01:08,200
controllers.

28
00:01:08,500 --> 00:01:12,400
Microsoft for whatever reason, they introduced their own sort of

29
00:01:12,400 --> 00:01:14,200
interface layer for getting controller.

30
00:01:14,200 --> 00:01:17,900
Input was called direct input and then they turned right around a

31
00:01:17,900 --> 00:01:20,600
couple of years later and decided that they were just going to ignore

32
00:01:20,600 --> 00:01:24,000
that entirely and make them to a whole new one called X input.

33
00:01:24,400 --> 00:01:26,300
And and so that is what you use now.

34
00:01:26,300 --> 00:01:29,500
And they're not really, they're not even really compatible ux input

35
00:01:29,500 --> 00:01:29,800
control.

36
00:01:29,900 --> 00:01:34,200
Ours will show up in direct input, but I guess you can't send Rumble

37
00:01:34,200 --> 00:01:38,200
messages out to them potentially and also, you can't get the audio

38
00:01:38,200 --> 00:01:41,700
handle for outputting, audio to the controller's plug, these sorts of

39
00:01:41,700 --> 00:01:42,200
things.

40
00:01:42,800 --> 00:01:46,000
So if you want to support gamepads properly, you pretty much have to

41
00:01:46,000 --> 00:01:49,100
use x and because that's what everyone has you can go Implement direct

42
00:01:49,100 --> 00:01:49,600
input.

43
00:01:49,600 --> 00:01:52,600
If you want to be able to support kind of Legacy controllers that

44
00:01:52,600 --> 00:01:55,500
maybe don't have an X input driver, but on the whole you're you're

45
00:01:55,500 --> 00:01:58,800
pretty much going to have to support xinput at a minimum.

46
00:01:58,800 --> 00:01:59,800
And now what x is

47
00:02:00,000 --> 00:02:01,100
It looks like thankfully.

48
00:02:01,300 --> 00:02:04,200
It is actually one of the simplest apis to use on Windows.

49
00:02:04,200 --> 00:02:05,500
It is very, very simple.

50
00:02:05,700 --> 00:02:09,699
You can actually see, I don't know which one of these has in the msdn

51
00:02:09,699 --> 00:02:13,400
has a good introduction, but I think basically any of these probably

52
00:02:13,400 --> 00:02:13,800
has a good.

53
00:02:13,800 --> 00:02:14,500
Yeah, here you go.

54
00:02:14,700 --> 00:02:18,000
So basically, all you really have to do is code that looks like this.

55
00:02:18,300 --> 00:02:21,800
You Loop over the number of controllers that there are you go ahead

56
00:02:21,800 --> 00:02:24,600
and you get the state of each controller.

57
00:02:25,200 --> 00:02:29,300
And the state of the controller is basically a big old structure that

58
00:02:29,300 --> 00:02:29,800
just has

59
00:02:29,900 --> 00:02:32,500
All the stuff that you might want to know about the GamePad.

60
00:02:32,500 --> 00:02:37,100
And so, it is, it is really absolutely trivial to do, and we will be

61
00:02:37,100 --> 00:02:37,700
doing it today.

62
00:02:37,700 --> 00:02:40,800
Hopefully, we won't hit any snap poop snafus, but that is basically,

63
00:02:40,800 --> 00:02:41,300
it.

64
00:02:41,500 --> 00:02:43,300
Now in the old days.

65
00:02:43,700 --> 00:02:44,800
If I remember correctly.

66
00:02:44,800 --> 00:02:48,400
You couldn't actually include an X input header file.

67
00:02:48,400 --> 00:02:49,700
That's, that's what I want to say.

68
00:02:49,700 --> 00:02:50,900
I want to say that was true.

69
00:02:51,800 --> 00:02:55,300
But I guess I'm going to assume that maybe that is not true anymore

70
00:02:55,300 --> 00:02:58,700
and that we'll be able to, to sort of directly include it, but I'm not

71
00:02:58,700 --> 00:02:59,200
actually sure.

72
00:02:59,200 --> 00:02:59,800
So I'm going to go ahead.

73
00:03:00,000 --> 00:03:03,800
Fire up the Max and we're going to see basically what what our what

74
00:03:03,800 --> 00:03:07,300
our situation is here in the modern world of programming.

75
00:03:07,500 --> 00:03:08,700
So I'm going to go into handmade.

76
00:03:09,400 --> 00:03:13,900
I'm going to launch the trustee emacs that that is, you know, so he's

77
00:03:13,900 --> 00:03:17,500
our trusty editor on every platform a little bit slow a little bit

78
00:03:17,500 --> 00:03:20,400
aging, but it gets the job done, most of the time.

79
00:03:20,500 --> 00:03:22,400
And I'm just going to see straight up.

80
00:03:22,400 --> 00:03:25,500
If I can include, I believe it was X input dot h, because I don't even

81
00:03:25,500 --> 00:03:27,900
know if that exists on platforms and it does.

82
00:03:27,900 --> 00:03:29,700
So basically, X input dot h,

83
00:03:30,000 --> 00:03:35,200
Holds the definitions of all of the stuff that we actually want to use

84
00:03:35,600 --> 00:03:37,800
to get our to get our input.

85
00:03:37,800 --> 00:03:39,700
So what we're going to do is we're going to go down here.

86
00:03:39,700 --> 00:03:42,800
Now, if you remember we have a game loop, it's really kind of a very

87
00:03:42,800 --> 00:03:43,700
beginning of the game loop.

88
00:03:43,700 --> 00:03:45,500
I mean it barely does anything, but we have.

89
00:03:45,500 --> 00:03:48,100
When nonetheless, we go through here and we process our Windows

90
00:03:48,100 --> 00:03:50,800
messages, then we do our rendering and then we go ahead and lift that

91
00:03:50,800 --> 00:03:51,600
rendering to the screen.

92
00:03:51,600 --> 00:03:55,700
So what we're going to do is right here after we get our messages

93
00:03:55,900 --> 00:03:59,100
because these are messages that are going to come in to do keyboard as

94
00:03:59,100 --> 00:03:59,300
well.

95
00:03:59,300 --> 00:03:59,800
A keyboard will

96
00:04:00,000 --> 00:04:04,000
Through here, the X input is a polling based API, which basically

97
00:04:04,000 --> 00:04:07,100
means that it only gives us back the state of the keyboard Sarah, the

98
00:04:07,100 --> 00:04:11,600
state of the, the, the controller when we actually asked for it.

99
00:04:12,200 --> 00:04:16,200
So we have to ask for it at some point, and that some point is going

100
00:04:16,200 --> 00:04:18,200
to be here right after we do this.

101
00:04:18,200 --> 00:04:21,200
Now, something that we should note and I'm going to put in a little to

102
00:04:21,200 --> 00:04:23,700
do about this because we may decide that we want to do this later.

103
00:04:24,500 --> 00:04:29,800
Should we pull this more frequently, so what you have to

104
00:04:29,900 --> 00:04:32,600
And about input devices is there's two methods of getting input from

105
00:04:32,600 --> 00:04:33,400
input devices.

106
00:04:33,400 --> 00:04:34,100
Often times.

107
00:04:34,400 --> 00:04:38,200
There's interrupt and pulling sort of a vague way to think about them

108
00:04:38,200 --> 00:04:43,100
basically, but an interrupt based input scheme is one where whenever

109
00:04:43,100 --> 00:04:45,800
the controller itself, whenever the thing that you're actually getting

110
00:04:45,800 --> 00:04:47,800
input from the device, the external device.

111
00:04:48,100 --> 00:04:52,700
Whenever that device actually needs to tell you that something

112
00:04:52,700 --> 00:04:54,900
happened, like something changed a button, got pressed.

113
00:04:54,900 --> 00:04:57,000
The state of the stick, wiggled, something like that.

114
00:04:57,300 --> 00:04:59,800
It will actually send you the data.

115
00:05:00,000 --> 00:05:00,200
Right.

116
00:05:00,200 --> 00:05:04,400
So basically, it's controlling in some sense when you need to wake up

117
00:05:04,400 --> 00:05:05,000
and process it.

118
00:05:05,000 --> 00:05:07,100
Now that sort of thing doesn't really happen very much anymore.

119
00:05:07,100 --> 00:05:09,300
But in the old days, I'd actually used to be literally true.

120
00:05:09,700 --> 00:05:12,300
There used to be actual interrupts that would happen on the CPU.

121
00:05:12,300 --> 00:05:14,800
That would actually say, hey, this device has something something to

122
00:05:14,800 --> 00:05:15,100
say.

123
00:05:15,800 --> 00:05:17,500
Well, that doesn't really happen very much anymore.

124
00:05:17,900 --> 00:05:20,900
For the most part, what happens is things are either pulled or they're

125
00:05:20,900 --> 00:05:21,600
kind of a network.

126
00:05:21,600 --> 00:05:24,300
He's sort of thing where they kind of send packets to you and those

127
00:05:24,300 --> 00:05:26,200
packets kind of get buffered up, or those sorts of things.

128
00:05:26,200 --> 00:05:28,600
So, in some sense, it's sort of like an interrupt, but it instead of

129
00:05:28,600 --> 00:05:29,500
actually interrupting you.

130
00:05:29,500 --> 00:05:29,800
You're reading,

131
00:05:29,900 --> 00:05:30,800
Really just reading a stream.

132
00:05:30,800 --> 00:05:35,900
Either way since this API involves us actually pulling the MPX input

133
00:05:35,900 --> 00:05:37,400
controller and asking for it State.

134
00:05:37,400 --> 00:05:40,200
We may get into a circumstance where we want to pull it more

135
00:05:40,200 --> 00:05:42,200
frequently than every frame now.

136
00:05:42,200 --> 00:05:43,400
I don't know that that's necessarily true.

137
00:05:43,400 --> 00:05:46,000
60 frames a second worth of polling.

138
00:05:46,000 --> 00:05:47,900
May be plenty or it may not be.

139
00:05:47,900 --> 00:05:50,700
And the only real way to know is by sort of playing with it and

140
00:05:50,700 --> 00:05:55,000
testing, there is some stuff we can do inside xinput to actually kind

141
00:05:55,000 --> 00:05:58,100
of get a feel for how frequently we're pulling it, relatively to how

142
00:05:58,100 --> 00:05:59,900
frequently it would like to be pulled and things like that.

143
00:06:00,000 --> 00:06:02,700
That, but we'll get to that later because right now, we're certainly

144
00:06:02,700 --> 00:06:03,800
not gonna care about that tour.

145
00:06:03,800 --> 00:06:09,700
Actually tuning doing the like real, real, serious final stuff for the

146
00:06:09,700 --> 00:06:12,000
windows layer, which we won't do up front.

147
00:06:12,000 --> 00:06:12,600
Those will be things.

148
00:06:12,600 --> 00:06:15,100
We do kind of more towards the end of handmade hero.

149
00:06:15,100 --> 00:06:19,800
So, inside the documentation here, you can see I've got the different

150
00:06:19,800 --> 00:06:20,100
functions.

151
00:06:20,100 --> 00:06:24,300
You can see that X input is a pretty small API, and that's a pretty

152
00:06:24,300 --> 00:06:24,800
good thing.

153
00:06:24,800 --> 00:06:26,900
Basically, that is that is what you want.

154
00:06:27,400 --> 00:06:29,800
So looking at it basically XM

155
00:06:30,000 --> 00:06:32,700
Put get state is primarily what we need?

156
00:06:32,800 --> 00:06:33,800
Get xinput.

157
00:06:34,000 --> 00:06:36,800
Get state is the thing that actually Returns the state to us.

158
00:06:36,900 --> 00:06:40,800
So, all we really have to do is we just have to call this, but we have

159
00:06:40,800 --> 00:06:43,600
to call it with this thing called DW user index, which if you look at

160
00:06:43,600 --> 00:06:46,100
the documentation here, it says the index of the users controller.

161
00:06:46,100 --> 00:06:49,300
So, as you know, Xbox controller is only allow for controllers.

162
00:06:49,600 --> 00:06:53,400
They've got those little sort of quadrants, but they fill in, so

163
00:06:53,400 --> 00:06:55,800
there's only four that are allowed to be there.

164
00:06:55,800 --> 00:06:59,900
But if I remember correctly, there actually is somewhere in here.

165
00:07:00,000 --> 00:07:05,200
Are there is a pound of find Define that says, how many there are?

166
00:07:05,200 --> 00:07:06,700
I want to say that.

167
00:07:06,700 --> 00:07:11,400
That is true, but I don't see it listed here.

168
00:07:11,400 --> 00:07:16,900
It just says a value from 0 to 3, which is kind of unfortunate other.

169
00:07:16,900 --> 00:07:18,200
It is X User Max count.

170
00:07:18,200 --> 00:07:21,200
So that documentation was just a little stale, you can see that this

171
00:07:21,200 --> 00:07:22,500
is basically the loop that you want.

172
00:07:22,500 --> 00:07:26,200
Here you go over each of the controllers and in case they ever

173
00:07:26,200 --> 00:07:28,300
increment, the number of controllers that are necessary.

174
00:07:28,600 --> 00:07:29,800
We know that we would get them all.

175
00:07:29,900 --> 00:07:30,600
By doing this.

176
00:07:30,600 --> 00:07:34,200
So we can just basically use that power to find right there that lets

177
00:07:34,200 --> 00:07:34,300
us.

178
00:07:34,300 --> 00:07:34,600
No.

179
00:07:34,600 --> 00:07:36,300
No, I don't really love I necessarily.

180
00:07:36,300 --> 00:07:39,300
So I'm just going to go ahead and say that this is the controller

181
00:07:39,300 --> 00:07:39,800
index.

182
00:07:40,000 --> 00:07:43,300
Just so we know we're talking about here, and then I'm going to go

183
00:07:43,300 --> 00:07:45,400
ahead and expand this out.

184
00:07:45,400 --> 00:07:47,300
So, there we go.

185
00:07:48,300 --> 00:07:51,000
Now, we are looping over all the controllers that we might possibly

186
00:07:51,000 --> 00:07:51,500
have.

187
00:07:51,600 --> 00:07:54,500
And now, we are going to pass that controller index, and we are going

188
00:07:54,500 --> 00:07:59,200
to ask it to give it back the state of our controller.

189
00:07:59,200 --> 00:08:04,100
So this is the state right here and we pass an address of that thing

190
00:08:04,100 --> 00:08:06,800
and it will fill out that address for us.

191
00:08:06,800 --> 00:08:07,900
So they're, there we go.

192
00:08:07,900 --> 00:08:11,600
That's basically, that's basically xinput.

193
00:08:11,600 --> 00:08:12,000
Now.

194
00:08:12,000 --> 00:08:14,900
It's going to return to us a piece of information.

195
00:08:14,900 --> 00:08:16,800
That's whether or not the controller existed.

196
00:08:16,800 --> 00:08:17,500
I believe.

197
00:08:17,800 --> 00:08:18,000
If

198
00:08:18,100 --> 00:08:19,200
Not very much an error.

199
00:08:19,600 --> 00:08:22,100
So let's take a look at controllers, not connected.

200
00:08:22,100 --> 00:08:27,000
So basically, if it equals error success, you got to love things like

201
00:08:27,000 --> 00:08:28,000
error success.

202
00:08:28,300 --> 00:08:33,500
If it equals error success, then that means this controller is plugged

203
00:08:33,500 --> 00:08:33,900
in.

204
00:08:34,900 --> 00:08:38,000
And if it doesn't equal that if it equals any other error message,

205
00:08:38,500 --> 00:08:44,200
then that means that the controller is not available now, maybe that

206
00:08:44,200 --> 00:08:47,000
could be an error, maybe that could be that it's just not plugged in,

207
00:08:47,200 --> 00:08:48,000
but basically, what happens,

208
00:08:48,100 --> 00:08:49,900
Is we can't actually do anything with controller here?

209
00:08:50,100 --> 00:08:52,100
So that is actually information that we need.

210
00:08:52,200 --> 00:08:55,000
For example, we may want to show in the user interface that a

211
00:08:55,000 --> 00:08:56,300
controller has been unplugged.

212
00:08:56,300 --> 00:08:58,200
We may want to take action on that.

213
00:08:58,200 --> 00:08:59,900
So this is not necessarily just an error.

214
00:09:00,000 --> 00:09:03,000
This is actually a case that we want to handle in the future right

215
00:09:03,000 --> 00:09:03,200
now.

216
00:09:03,200 --> 00:09:05,700
We don't need to because we don't have any logic but in the future, we

217
00:09:05,700 --> 00:09:07,600
may want to we want to handle that.

218
00:09:07,600 --> 00:09:08,000
Okay.

219
00:09:08,700 --> 00:09:11,000
So all we're going to do here is we're going to actually look at this

220
00:09:11,000 --> 00:09:12,500
controller state, right?

221
00:09:12,500 --> 00:09:15,500
We're going to take a look at the sort of things that we can get in

222
00:09:15,500 --> 00:09:15,900
it.

223
00:09:16,200 --> 00:09:18,000
And if we go in here, I guess.

224
00:09:18,200 --> 00:09:19,700
Let's see if I've got a good.

225
00:09:19,700 --> 00:09:20,100
Where's a good?

226
00:09:20,100 --> 00:09:20,200
There?

227
00:09:20,200 --> 00:09:20,500
It is.

228
00:09:20,500 --> 00:09:22,400
X, x input, get state.

229
00:09:23,400 --> 00:09:24,700
So you can see what it's got here.

230
00:09:24,900 --> 00:09:27,200
It basically has a packet number.

231
00:09:27,500 --> 00:09:30,100
And again, remember when I was saying just just a few minutes ago.

232
00:09:30,400 --> 00:09:35,400
I said that basically, there is a concept of the device, sending you

233
00:09:35,400 --> 00:09:38,300
pieces of information, perhaps or being pulled at a certain frequency

234
00:09:38,300 --> 00:09:39,200
and that sort of stuff.

235
00:09:39,400 --> 00:09:43,900
Well, this packet number is basically sort of increments every time we

236
00:09:43,900 --> 00:09:46,300
know about the state of the joystick changing.

237
00:09:46,500 --> 00:09:48,900
Now, I don't really know since, I don't know the internals of how

238
00:09:48,900 --> 00:09:49,800
expert input works.

239
00:09:49,800 --> 00:09:52,300
I don't know whether it's the driver, that's thinking about that.

240
00:09:52,300 --> 00:09:53,000
So that the driver

241
00:09:53,200 --> 00:09:56,000
Internally as pulling it more frequently and incrementing that or

242
00:09:56,000 --> 00:09:59,400
whether the controller itself actually manages that, I suspect.

243
00:09:59,400 --> 00:10:00,300
It might be the controller.

244
00:10:00,300 --> 00:10:02,200
I'm not really sure doesn't matter.

245
00:10:02,200 --> 00:10:06,500
Either way point being when we pull the state, we get back a number

246
00:10:06,900 --> 00:10:13,000
that basically says, what where we are in the series of State changes,

247
00:10:13,300 --> 00:10:14,900
for this particular controller.

248
00:10:14,900 --> 00:10:18,000
So if we missed a bunch if, if, you know, if we pull it and it says

249
00:10:18,000 --> 00:10:21,700
50, we pull it again and it says 30, we know that there's a bunch of

250
00:10:21,700 --> 00:10:22,400
states.

251
00:10:23,100 --> 00:10:25,300
The controller went through, baby buttons, that got pushed or the

252
00:10:25,300 --> 00:10:28,600
stick got twiddled, that we never actually saw and that would be an

253
00:10:28,600 --> 00:10:31,000
indication that we might be pulling it too.

254
00:10:31,000 --> 00:10:31,600
Infrequently.

255
00:10:31,600 --> 00:10:34,300
Now, it doesn't necessarily mean that because it may be that it just

256
00:10:34,300 --> 00:10:35,800
gets sample that is really high rate.

257
00:10:35,800 --> 00:10:38,800
And we don't actually care about that because the user can't actually

258
00:10:38,800 --> 00:10:42,100
press and unpressed the button at a rate that that that's that faster

259
00:10:42,100 --> 00:10:42,800
things like this.

260
00:10:42,900 --> 00:10:46,100
So we don't actually know but at least it'll give us a little bit of

261
00:10:46,100 --> 00:10:48,800
an information, you know, sort of an informational boost, right?

262
00:10:49,400 --> 00:10:52,400
So basically all we're going to do here is we're going to say, okay.

263
00:10:53,100 --> 00:10:56,500
Roller, you know when we when we get back we're going to get that

264
00:10:56,500 --> 00:10:56,900
thing.

265
00:10:57,100 --> 00:10:59,000
So in the future, maybe we'll take a look at that.

266
00:10:59,000 --> 00:11:00,900
I'm going to I'm going to say that DW packet number.

267
00:11:00,900 --> 00:11:04,900
I'm going to actually write that in here as a thing to maybe look at

268
00:11:05,400 --> 00:11:10,600
see if packet number increments to rapidly and then we're going to

269
00:11:10,600 --> 00:11:12,400
look at basically this Gamepad piece.

270
00:11:12,700 --> 00:11:15,200
So I'm going to snap a pointer off of this thing.

271
00:11:15,200 --> 00:11:20,100
So we don't have to keep talking about controllers, state DOT Gamepad.

272
00:11:20,300 --> 00:11:22,900
I'm going to actually grab xinput gamepad.

273
00:11:23,100 --> 00:11:26,900
Add star pad equals the address of that, and that's just just

274
00:11:26,900 --> 00:11:27,900
syntactic convenient.

275
00:11:27,900 --> 00:11:29,400
So we can just talk about it like this.

276
00:11:29,700 --> 00:11:33,200
So the X input Gamepad is the only structure we've got to find

277
00:11:33,200 --> 00:11:33,800
currently.

278
00:11:34,500 --> 00:11:35,300
As you can see.

279
00:11:35,600 --> 00:11:38,400
It's got a bunch of fields that correspond to the things on an Xbox

280
00:11:38,400 --> 00:11:39,300
Gamepad, shocking.

281
00:11:39,300 --> 00:11:39,700
I know.

282
00:11:39,900 --> 00:11:41,000
But that is all that happens.

283
00:11:41,200 --> 00:11:44,900
So w buttons is basically a bit field, you know, those bit Fields

284
00:11:44,900 --> 00:11:45,200
again.

285
00:11:45,200 --> 00:11:48,900
I think it's funny because people in the intro to CS stream or asking

286
00:11:48,900 --> 00:11:51,900
how often you do bit manipulation and I'm like, we do it all the time.

287
00:11:51,900 --> 00:11:52,900
And man, we have

288
00:11:53,100 --> 00:11:55,400
Done it a lot and all we're doing is implementing the windows layer,

289
00:11:55,400 --> 00:11:55,600
right?

290
00:11:55,600 --> 00:11:57,900
We've already done a ton so that W buttons filled.

291
00:11:57,900 --> 00:11:59,900
It's basically ordered an order to

292
00:12:00,000 --> 00:12:01,300
Version of these field.

293
00:12:01,400 --> 00:12:01,900
Feels right here.

294
00:12:01,900 --> 00:12:02,000
Now.

295
00:12:02,000 --> 00:12:03,600
It's a word, which means 16-bit.

296
00:12:03,600 --> 00:12:05,900
That's windows for 16-bit Value.

297
00:12:06,200 --> 00:12:06,700
B.

298
00:12:06,700 --> 00:12:10,900
8-bit value 8-bit value, short 16-bit signed, right?

299
00:12:11,200 --> 00:12:13,700
So we've got the buttons and the buttons include the d-pad.

300
00:12:13,700 --> 00:12:16,200
Those are considered buttons actually, since they can either, you

301
00:12:16,200 --> 00:12:18,100
know, I'm actually know whether buttons because they're mutually

302
00:12:18,100 --> 00:12:21,200
exclusive, you can't really press the d-pad like left and right

303
00:12:21,200 --> 00:12:22,200
buttons at the same time.

304
00:12:22,200 --> 00:12:23,000
But there you go.

305
00:12:23,000 --> 00:12:23,800
That's how they work.

306
00:12:24,600 --> 00:12:27,400
We've got the start back, the thumb buttons.

307
00:12:27,400 --> 00:12:29,800
Like when you press them down the shoulder buttons,

308
00:12:30,000 --> 00:12:35,100
And you got the, a b x and y and then you've also got on these things,

309
00:12:35,100 --> 00:12:36,900
the triggers are analog.

310
00:12:36,900 --> 00:12:38,700
So, you know, how far the user press them down.

311
00:12:38,700 --> 00:12:41,600
So those are actually B that range from 0, to T 5, depending how press

312
00:12:41,600 --> 00:12:42,000
they are.

313
00:12:42,400 --> 00:12:46,200
And then you've also got to xy's for the to thumbsticks the left and

314
00:12:46,200 --> 00:12:46,800
right thumbstick.

315
00:12:46,800 --> 00:12:49,600
So, you know, it's real self explanatory.

316
00:12:49,900 --> 00:12:54,200
There's almost nothing that you that you really need to learn here.

317
00:12:54,200 --> 00:12:55,800
I mean, it should be real self explanatory.

318
00:12:55,800 --> 00:12:57,600
I'm gonna take a little almond milk it and then we're going to take a

319
00:12:57,600 --> 00:12:58,100
look at these.

320
00:13:04,200 --> 00:13:04,800
Okay.

321
00:13:05,700 --> 00:13:10,200
So basically what we're going to do here is we just want these things,

322
00:13:10,200 --> 00:13:13,200
you know, out and the question of what sort of stuff.

323
00:13:13,200 --> 00:13:16,100
I actually want to get for this game.

324
00:13:16,500 --> 00:13:18,600
You know, this game is kind of an old school game.

325
00:13:18,900 --> 00:13:21,600
So I suspect that mostly what we're going to be looking at is those

326
00:13:21,600 --> 00:13:22,500
four buttons?

327
00:13:23,200 --> 00:13:25,100
As I really don't know that we're going to want to do much of them,

328
00:13:25,100 --> 00:13:28,800
the four buttons and maybe the two shoulders.

329
00:13:30,000 --> 00:13:32,900
Yeah, like the two shoulders, these buttons.

330
00:13:33,100 --> 00:13:34,100
Maybe the start and end.

331
00:13:34,100 --> 00:13:35,400
I don't know the d-pad.

332
00:13:35,600 --> 00:13:37,600
And I'm thinking, most of the stuff you wanted here.

333
00:13:37,600 --> 00:13:40,400
Triggers is probably not going to be very useful for an old-school

334
00:13:40,400 --> 00:13:40,800
game.

335
00:13:41,300 --> 00:13:44,000
I don't, I don't suspect because, you know, if you're playing an old

336
00:13:44,300 --> 00:13:47,300
person as game or something like that, you probably didn't have a lot

337
00:13:47,300 --> 00:13:49,200
of like first person shooting and that sort of stuff.

338
00:13:49,200 --> 00:13:51,000
So I don't know that those will be very useful in these.

339
00:13:51,400 --> 00:13:55,400
Well, I don't know depends on whether we want to the reason to support

340
00:13:55,400 --> 00:13:58,300
these guys, even though we're probably, you know, not going to want

341
00:13:58,300 --> 00:13:59,900
them as much for an old school game.

342
00:13:59,900 --> 00:14:00,400
Is that?

343
00:14:00,600 --> 00:14:03,200
Well, I think we all know the Xbox 360 game.

344
00:14:03,200 --> 00:14:04,800
Pads d-pad was not that great.

345
00:14:04,800 --> 00:14:05,400
So if you're talking about,

346
00:14:05,500 --> 00:14:08,000
The Xbox one you could probably play on the d-pad and be very happy,

347
00:14:08,000 --> 00:14:13,000
but we may need to support the thumbsticks just because that d-pad on

348
00:14:13,000 --> 00:14:14,200
the 360 was so bad.

349
00:14:14,200 --> 00:14:16,800
So it looks like most of the stuff we're actually going to want.

350
00:14:17,300 --> 00:14:19,900
We don't actually need to do anything with it yet because we don't

351
00:14:19,900 --> 00:14:20,700
have much to find.

352
00:14:20,700 --> 00:14:23,000
But basically what we're going to do is we're just going to go in here

353
00:14:23,000 --> 00:14:25,600
and sort of Mark out the stuff that we actually care about.

354
00:14:25,800 --> 00:14:30,100
So we care about these things, we care about basically whether this is

355
00:14:30,100 --> 00:14:33,900
down, so I'm just going to kind of line these up here and then we'll

356
00:14:34,100 --> 00:14:35,300
we'll take a look at them.

357
00:14:35,900 --> 00:14:36,600
As we go.

358
00:14:36,800 --> 00:14:39,700
So let's just take a, let's just take all the things that we need.

359
00:14:39,700 --> 00:14:40,800
So we want d-pad up.

360
00:14:40,800 --> 00:14:43,000
We want down, we want left.

361
00:14:43,000 --> 00:14:44,000
We want right?

362
00:14:44,200 --> 00:14:45,500
We kind of want to see these things.

363
00:14:45,500 --> 00:14:45,900
We want.

364
00:14:45,900 --> 00:14:48,700
Start and back, that's good.

365
00:14:49,000 --> 00:14:52,900
We're going to want left thumb and right thumb left thumb and right

366
00:14:52,900 --> 00:14:53,500
thumb.

367
00:14:55,400 --> 00:14:59,400
And we are going to want a b X and Y.

368
00:14:59,400 --> 00:14:59,700
I think.

369
00:14:59,700 --> 00:14:59,800
Oh no.

370
00:15:00,000 --> 00:15:01,200
But we're going to want shoulder.

371
00:15:01,400 --> 00:15:04,200
We don't actually want thumb and I think we want thumb is always hard

372
00:15:04,200 --> 00:15:07,200
to press for me a b x y.

373
00:15:07,200 --> 00:15:07,800
There we go.

374
00:15:08,300 --> 00:15:08,900
Okay.

375
00:15:09,000 --> 00:15:13,800
So we've got up down left, right?

376
00:15:14,200 --> 00:15:19,800
Start back shoulder, left shoulder, right?

377
00:15:19,800 --> 00:15:24,200
Shoulder a b, X and Y.

378
00:15:24,200 --> 00:15:26,800
So, yes, we'll call these a button.

379
00:15:27,000 --> 00:15:28,500
Just to be clear about what that is.

380
00:15:29,300 --> 00:15:29,800
There we go.

381
00:15:30,600 --> 00:15:33,600
So that would basically decrypt into boolean's, right?

382
00:15:33,700 --> 00:15:35,200
All the things we might want.

383
00:15:37,800 --> 00:15:41,400
I don't think we want those triggers, but we are going to want that

384
00:15:41,400 --> 00:15:42,000
left thumb.

385
00:15:42,000 --> 00:15:43,800
I think we're going to want that left, thumbstick.

386
00:15:44,200 --> 00:15:46,600
So we're also going to want, hear something.

387
00:15:46,600 --> 00:15:55,300
That's basically a in 16 of the, I guess, the stick left, which I say,

388
00:15:55,300 --> 00:15:56,500
stick horizontal.

389
00:15:56,700 --> 00:15:58,200
I guess would be it or stick ax.

390
00:15:58,200 --> 00:15:59,700
Maybe let's call it and stick.

391
00:15:59,700 --> 00:16:02,200
Why are the two things that we are going to want?

392
00:16:02,300 --> 00:16:05,100
So we're going to want to grab those out of the PAD as well as thumb.

393
00:16:07,500 --> 00:16:11,500
And ask them why.

394
00:16:11,500 --> 00:16:14,400
Now the question of whether we want the right thumbstick or not.

395
00:16:14,400 --> 00:16:15,700
I think we're going to need those buttons.

396
00:16:15,700 --> 00:16:17,700
So no one's really gonna be able to use it so we can just leave it

397
00:16:17,700 --> 00:16:18,100
there.

398
00:16:18,400 --> 00:16:21,200
So that is basically as far as I know.

399
00:16:21,200 --> 00:16:24,800
I'm trying to remember if there's anything else that we actually need.

400
00:16:25,100 --> 00:16:25,700
What did I do?

401
00:16:25,700 --> 00:16:27,600
Oops, that d-pads not supposed to be there.

402
00:16:27,700 --> 00:16:29,900
Trying to think if there's anything else we need.

403
00:16:29,900 --> 00:16:32,800
I didn't bother to delete the d-pad part of this, which is kind of a

404
00:16:32,800 --> 00:16:33,500
mistake.

405
00:16:34,000 --> 00:16:34,600
There we go.

406
00:16:35,200 --> 00:16:36,900
I'll try the others, anything we actually need.

407
00:16:37,100 --> 00:16:37,400
Need.

408
00:16:37,400 --> 00:16:41,400
But I don't think there really is, that's probably all we need to get

409
00:16:41,400 --> 00:16:44,000
out of these and we're going to get him for each of the four

410
00:16:44,000 --> 00:16:46,000
controllers and I will have to decide whether we actually need

411
00:16:46,000 --> 00:16:48,100
multiple controllers in the future, but that's basically what we're

412
00:16:48,100 --> 00:16:48,600
doing there.

413
00:16:49,200 --> 00:16:52,300
And the thing that you have to notice now is it xinput?

414
00:16:52,300 --> 00:16:53,900
Get state is again.

415
00:16:53,900 --> 00:16:55,300
Something that we have to link with.

416
00:16:55,600 --> 00:16:58,800
Now there's a little bit of a complication here.

417
00:16:59,900 --> 00:17:04,300
And I was trying to decide whether I wanted to handle this today or

418
00:17:04,300 --> 00:17:05,400
handle this in the future.

419
00:17:05,900 --> 00:17:09,200
And I think, based on the time that we've got here.

420
00:17:09,500 --> 00:17:11,800
I think I probably want to handle it today.

421
00:17:12,000 --> 00:17:15,700
That's my thought, because we've got a lot of time and it's not that

422
00:17:15,700 --> 00:17:18,300
much work to get that xinput get state.

423
00:17:18,300 --> 00:17:21,400
So you'll note that we've got what we had many times before here,

424
00:17:21,500 --> 00:17:23,400
unresolved, external symbol X input.

425
00:17:23,400 --> 00:17:26,300
KET State referendum function when main right.

426
00:17:26,300 --> 00:17:28,700
And so basically that's exactly what we were talking about before.

427
00:17:28,700 --> 00:17:29,600
And as you know, I

428
00:17:29,700 --> 00:17:32,700
Taught you what to do in this circumstance, you basically just need to

429
00:17:32,700 --> 00:17:36,100
look at the function wherever that function is.

430
00:17:36,400 --> 00:17:37,500
And inside that function.

431
00:17:37,500 --> 00:17:41,100
It's going to have a thing down at the bottom of the msdn

432
00:17:41,100 --> 00:17:44,100
documentation, that will tell you what you need to link with.

433
00:17:44,100 --> 00:17:47,000
So you can see it here and it's got it right.

434
00:17:47,400 --> 00:17:47,800
Now.

435
00:17:47,800 --> 00:17:52,200
The problem that you will see is, you know, it's got it here.

436
00:17:52,200 --> 00:17:53,600
It's got some stuff listed, right?

437
00:17:53,600 --> 00:17:54,200
What's the deal?

438
00:17:54,200 --> 00:17:54,700
Ello?

439
00:17:54,700 --> 00:17:57,800
Its 1.4 or something blah blah blah, right?

440
00:17:58,400 --> 00:17:59,600
The problem that we

441
00:17:59,700 --> 00:17:59,900
We have.

442
00:18:00,800 --> 00:18:06,100
Is that this, this platform requirements line is a little bit sketchy,

443
00:18:06,500 --> 00:18:06,900
right?

444
00:18:06,900 --> 00:18:08,000
It's like, okay.

445
00:18:08,000 --> 00:18:12,600
It requires Windows 8 potentially which we know that most people don't

446
00:18:12,600 --> 00:18:14,300
have because nobody wanted it.

447
00:18:16,700 --> 00:18:18,200
Right, so that's not happening.

448
00:18:19,500 --> 00:18:20,800
DirectX xdk.

449
00:18:20,800 --> 00:18:23,600
Well, we don't really know what that means, what version of it do.

450
00:18:23,600 --> 00:18:26,700
They mean, and, you know, does the user have that installed?

451
00:18:26,700 --> 00:18:27,300
I don't know.

452
00:18:27,800 --> 00:18:30,800
We haven't actually used anything from the DirectX SDK, but when we

453
00:18:30,800 --> 00:18:33,200
do, we'll probably use one from a very early version of the DirectX

454
00:18:33,200 --> 00:18:34,200
SDK basically.

455
00:18:34,700 --> 00:18:37,600
So we can't really guarantee that that's going to be on there and

456
00:18:37,600 --> 00:18:38,400
Windows Vista.

457
00:18:38,400 --> 00:18:40,700
Well, what if the person was running Windows XP?

458
00:18:40,700 --> 00:18:41,300
I don't know.

459
00:18:41,600 --> 00:18:42,100
I don't know why.

460
00:18:42,100 --> 00:18:44,600
Windows 7 isn't listed here, presumably, it was in Vista.

461
00:18:44,600 --> 00:18:45,900
It would work on seven, but I don't know.

462
00:18:45,900 --> 00:18:48,000
So you can see that it makes me a little nervous.

463
00:18:48,000 --> 00:18:49,100
So what I would rather not

464
00:18:49,400 --> 00:18:54,500
Do is I'd rather not linked directly to xinput lib, because if we link

465
00:18:54,500 --> 00:18:58,500
directly to xinput lib, then what's going to happen is if it can't

466
00:18:58,500 --> 00:19:03,900
find one of these dlls on the system, then our game just won't load

467
00:19:04,100 --> 00:19:05,600
just flat-out won't load.

468
00:19:05,800 --> 00:19:09,300
And that's kind of annoying because you don't need a Gamepad to play

469
00:19:09,300 --> 00:19:09,700
this game.

470
00:19:09,700 --> 00:19:12,400
We're going to allow you to play it with the keyboard at a very

471
00:19:12,400 --> 00:19:12,900
minimum.

472
00:19:13,200 --> 00:19:16,700
And so it would kind of be bad if you couldn't launch the game due to

473
00:19:16,700 --> 00:19:18,700
direct input into the xinput.

474
00:19:19,300 --> 00:19:21,800
When you, otherwise could have totally easily played it with a

475
00:19:21,800 --> 00:19:25,100
keyboard in the circumstance where there wasn't an X input Library.

476
00:19:25,100 --> 00:19:26,500
So what do we do?

477
00:19:26,700 --> 00:19:28,500
How do we resolve this external symbol problem?

478
00:19:28,500 --> 00:19:33,400
Well, what I want to introduce you to was the concept of basically

479
00:19:33,400 --> 00:19:35,600
loading Windows functions.

480
00:19:35,600 --> 00:19:40,300
Yourself essentially, basically getting the code into your executable,

481
00:19:40,600 --> 00:19:45,000
for a Windows binding and looking up the function pointer so that you

482
00:19:45,000 --> 00:19:48,700
can actually call directly into it without using an import library.

483
00:19:48,900 --> 00:19:49,200
And this

484
00:19:49,300 --> 00:19:52,500
Actually, a really simple process and especially in a circumstance

485
00:19:52,500 --> 00:19:55,500
where we have such a small number of functions that we actually need

486
00:19:55,500 --> 00:19:56,000
to deal with.

487
00:19:56,000 --> 00:19:56,700
In this case.

488
00:19:56,900 --> 00:20:01,100
Probably possibly only two that we might need to deal with total.

489
00:20:01,400 --> 00:20:02,000
I'm looking here.

490
00:20:02,000 --> 00:20:02,200
Let's see.

491
00:20:02,200 --> 00:20:03,600
What is X input, enable.

492
00:20:03,600 --> 00:20:04,600
Do we need to call this?

493
00:20:05,400 --> 00:20:10,400
Let's see response to get input state, state will be registering not

494
00:20:10,400 --> 00:20:11,600
sent to the device.

495
00:20:12,000 --> 00:20:14,000
I don't know if we need that one, but pretty much.

496
00:20:14,000 --> 00:20:18,500
We're going to need, get get State and set state is probably mostly

497
00:20:18,500 --> 00:20:19,200
all we're going to need.

498
00:20:19,200 --> 00:20:22,200
Need to set state allows us to send vibration out and we may want to

499
00:20:22,200 --> 00:20:24,400
vibrate the controller and response, the things that kind of adds a

500
00:20:24,400 --> 00:20:26,000
little bit of fun to a game.

501
00:20:26,000 --> 00:20:27,600
So we may want set State as well.

502
00:20:27,600 --> 00:20:31,500
But that's really all we're going to need is is X input set State and

503
00:20:31,500 --> 00:20:32,400
xinput, get state.

504
00:20:32,400 --> 00:20:36,100
So what I want to do is basically I want to kind of come in here and I

505
00:20:36,100 --> 00:20:40,500
don't know if I don't actually know how good the browsing is.

506
00:20:40,600 --> 00:20:42,800
Oops, gotta open up Dev m.

507
00:20:44,000 --> 00:20:46,000
Get back to our program in the debugger.

508
00:20:46,300 --> 00:20:47,800
I don't actually know how good this is.

509
00:20:47,800 --> 00:20:51,600
Can this do a Open document and jump us to it.

510
00:20:52,300 --> 00:20:53,300
Let's take a look.

511
00:20:53,500 --> 00:20:54,800
Hello, Windows.

512
00:20:54,800 --> 00:20:55,100
There.

513
00:20:55,100 --> 00:20:55,700
It is.

514
00:20:55,700 --> 00:20:56,500
Good job.

515
00:20:56,700 --> 00:20:57,200
Okay.

516
00:20:57,600 --> 00:20:59,800
So basically we're looking at this and

517
00:21:00,000 --> 00:21:03,400
Looks like it wants xinput 1.4, a DOT DL and that's fine.

518
00:21:03,400 --> 00:21:06,700
You can see it defines those here for us if we want to know them.

519
00:21:06,700 --> 00:21:09,500
And then you got all the defines in this, in this Windows include

520
00:21:09,500 --> 00:21:10,300
header file, the base.

521
00:21:10,300 --> 00:21:11,600
They're all the things we were looking at, right?

522
00:21:11,600 --> 00:21:12,300
It's got this one.

523
00:21:12,300 --> 00:21:13,100
It's got that.

524
00:21:13,400 --> 00:21:14,900
And then this is the part we actually care about here.

525
00:21:14,900 --> 00:21:18,300
It has the defines for these two things, right?

526
00:21:19,600 --> 00:21:21,600
These are the two functions we actually care about.

527
00:21:25,200 --> 00:21:26,400
And so, what I'm going to do.

528
00:21:27,900 --> 00:21:32,000
Is I'm going to say that we're just going to flat out, get these

529
00:21:32,200 --> 00:21:32,900
ourselves.

530
00:21:32,900 --> 00:21:36,600
We're going to load them ourselves from that dll without actually

531
00:21:36,600 --> 00:21:39,100
asking Windows executable loader to do any of it.

532
00:21:39,100 --> 00:21:41,100
So what I'm gonna do is I'm going to cut and paste the definitions in

533
00:21:41,100 --> 00:21:41,500
here.

534
00:21:41,900 --> 00:21:42,400
Right?

535
00:21:42,900 --> 00:21:46,500
And I'm going to strip out those little in and out, annotations,

536
00:21:46,500 --> 00:21:46,600
right?

537
00:21:46,600 --> 00:21:48,400
Because those are just for the static code analyzer.

538
00:21:48,400 --> 00:21:49,500
And we don't actually need those.

539
00:21:49,700 --> 00:21:52,500
I'm going to get rid of all this stuff so that we just have the

540
00:21:52,500 --> 00:21:54,600
function signature and that's it.

541
00:21:54,600 --> 00:21:54,900
Right?

542
00:21:54,900 --> 00:21:57,300
You can kind of see it just got the function signature, nothing else

543
00:21:57,300 --> 00:21:57,600
in there.

544
00:21:58,100 --> 00:22:01,000
Going to get the function signature for this one as well, right?

545
00:22:01,000 --> 00:22:05,400
Like that, and go in here and make sure I've got the vibration one

546
00:22:05,400 --> 00:22:06,100
there as well.

547
00:22:06,100 --> 00:22:06,600
There you go.

548
00:22:06,600 --> 00:22:08,300
So now I've got the two function signatures.

549
00:22:08,700 --> 00:22:11,400
Now, what I'm going to do as you know, if I just put the function

550
00:22:11,400 --> 00:22:13,700
signatures in like that, then basically what that's just telling

551
00:22:13,900 --> 00:22:17,700
Windows is hey, by the way, there is an external function somewhere

552
00:22:17,700 --> 00:22:18,400
called this.

553
00:22:18,700 --> 00:22:20,200
In case you didn't know.

554
00:22:20,300 --> 00:22:23,300
And now if I call it you can bind to it in the Linker stage, right?

555
00:22:23,300 --> 00:22:25,800
So that doesn't help us because that was already in X and put dot h,

556
00:22:25,800 --> 00:22:27,700
so that does absolutely nothing for us, but

557
00:22:28,100 --> 00:22:31,100
What I can do is instead of actually treating it like this.

558
00:22:31,100 --> 00:22:33,700
I can change this into EPS, didn't mean to hit that.

559
00:22:33,900 --> 00:22:35,700
I can change this into a typedef.

560
00:22:35,700 --> 00:22:42,300
I can basically say I am going to do a typedef, that tells the

561
00:22:42,300 --> 00:22:46,900
compiler, there is a function of this type, and I want to actually

562
00:22:46,900 --> 00:22:49,800
start declaring variables that are Pointers to it, basically, right?

563
00:22:49,900 --> 00:22:53,200
So, this is actually saying, I just want to type called xinput, get

564
00:22:53,200 --> 00:22:54,000
state, right?

565
00:22:54,000 --> 00:22:54,800
This is the name.

566
00:22:55,100 --> 00:22:55,900
I want to type.

567
00:22:55,900 --> 00:22:57,600
That basically is a function.

568
00:22:57,900 --> 00:22:59,600
That's the type of this thing.

569
00:22:59,800 --> 00:23:03,200
So, you know how you say typedef, Gant Foo.

570
00:23:03,200 --> 00:23:06,200
And now, Foo is basically a synonym for in.

571
00:23:06,200 --> 00:23:07,700
So if I do Foo X, I've got an end.

572
00:23:07,900 --> 00:23:12,400
Well, if I do this, now if I have X input State as my type by say x

573
00:23:12,400 --> 00:23:13,900
input State Foo.

574
00:23:14,000 --> 00:23:17,100
Well, that doesn't really help me because you can't Define actual

575
00:23:17,100 --> 00:23:20,000
objects that are functions in C.

576
00:23:20,000 --> 00:23:21,300
So that's not going to fly.

577
00:23:21,300 --> 00:23:25,600
But what does fly is if I wanted a pointer to one of those functions,

578
00:23:25,700 --> 00:23:27,100
I can do this.

579
00:23:27,100 --> 00:23:27,800
I can basically

580
00:23:27,900 --> 00:23:31,800
There a pointer to a function that has this signature and that's

581
00:23:31,800 --> 00:23:34,300
totally legal and that's exactly what we want.

582
00:23:38,200 --> 00:23:38,800
So,

583
00:23:40,400 --> 00:23:45,100
What I'm actually going to do, is I'm going to go ahead and say that

584
00:23:45,100 --> 00:23:48,300
this is a global variable, since there's only going to be one of them.

585
00:23:48,600 --> 00:23:52,400
We are going to have X input, get State, and X input, set State, X

586
00:23:52,400 --> 00:23:57,900
input yet State and xinput set State like that.

587
00:23:58,200 --> 00:23:59,900
And the problem now is we're going to conflicting.

588
00:24:00,600 --> 00:24:01,700
With this Windows header file.

589
00:24:01,700 --> 00:24:05,300
If we call them the same thing as you can see here, right?

590
00:24:05,300 --> 00:24:07,600
They've defined these or not macros or anything.

591
00:24:07,600 --> 00:24:08,800
We can't really undefined them.

592
00:24:09,100 --> 00:24:13,600
I could not, I could not pound include this file, but then I would

593
00:24:13,600 --> 00:24:15,300
lose all of these to find that they did for me.

594
00:24:15,300 --> 00:24:16,500
I have to cut and paste them in.

595
00:24:16,800 --> 00:24:18,500
That might be something that I might want to do.

596
00:24:18,500 --> 00:24:20,500
But for now, I don't think I want to do that.

597
00:24:20,600 --> 00:24:26,300
So we're just going to go ahead and say well, alright, let's call this

598
00:24:26,500 --> 00:24:29,300
may be dynamic or something like that.

599
00:24:29,300 --> 00:24:29,600
I don't know.

600
00:24:29,600 --> 00:24:29,900
I'm not

601
00:24:30,000 --> 00:24:30,800
Sure, what the right was?

602
00:24:30,800 --> 00:24:32,800
Let's see why we'll just fix it with d y.

603
00:24:32,800 --> 00:24:34,700
So, we know this is our dynamically loaded one.

604
00:24:35,400 --> 00:24:38,200
And and that is what it will be from now on, in fact, you know, what

605
00:24:38,200 --> 00:24:40,600
we could do, we could do something even clever.

606
00:24:41,000 --> 00:24:43,500
This may be a little bit too clever for our own good.

607
00:24:43,600 --> 00:24:47,200
I don't know if that's actually true or not, sometimes, but let's find

608
00:24:47,200 --> 00:24:50,100
out what we could do is, we could say, okay, let's take an underscore

609
00:24:50,100 --> 00:24:50,500
after them.

610
00:24:50,500 --> 00:24:51,300
Just so we know.

611
00:24:51,500 --> 00:24:54,200
And then we'll actually just go ahead and change what the meaning is

612
00:24:54,200 --> 00:24:54,600
right here.

613
00:24:54,600 --> 00:24:56,900
We could do that might actually work.

614
00:24:57,100 --> 00:24:57,700
I don't know.

615
00:24:58,000 --> 00:24:58,600
Let's see.

616
00:24:58,600 --> 00:24:59,800
Let's get wild on a Monday.

617
00:25:00,200 --> 00:25:02,800
This basically says all right from now on anytime.

618
00:25:02,800 --> 00:25:04,300
You see this, change it into this.

619
00:25:04,300 --> 00:25:08,500
That way, we can still use the real name, but it will always actually

620
00:25:08,500 --> 00:25:10,000
remap to our fake pointer.

621
00:25:10,300 --> 00:25:11,400
Yeah, makes sense.

622
00:25:11,500 --> 00:25:12,700
Hopefully that's clear enough.

623
00:25:12,900 --> 00:25:15,200
I'm just making that a little bit more easy because I don't want

624
00:25:15,200 --> 00:25:18,500
somebody typing xinput, get state in here and calling the windows

625
00:25:18,500 --> 00:25:20,600
function because we're not linking with that course, they would get a

626
00:25:20,600 --> 00:25:22,200
link time error, but I don't know.

627
00:25:22,300 --> 00:25:24,300
I'd like to try and prevent people from accidentally doing that.

628
00:25:24,300 --> 00:25:26,500
So maybe we just do this and that's good enough.

629
00:25:26,500 --> 00:25:28,100
Okay, so let's recompile that

630
00:25:28,700 --> 00:25:29,500
Off we go.

631
00:25:29,700 --> 00:25:32,300
And so now what will happen is you'll notice that we still have, we

632
00:25:32,300 --> 00:25:35,600
have a call to xinput get State and it's down here, right?

633
00:25:35,700 --> 00:25:37,500
That is now defined to actually be this.

634
00:25:37,500 --> 00:25:40,900
So it's going to call it's going to actually call the function pointed

635
00:25:40,900 --> 00:25:43,600
to by our pointer, but our pointer is uninitialized, right?

636
00:25:43,600 --> 00:25:44,300
It's zero.

637
00:25:44,900 --> 00:25:47,700
It's not initialized zero because it's one of those static Global

638
00:25:47,700 --> 00:25:48,100
variables.

639
00:25:48,100 --> 00:25:48,700
It's zero.

640
00:25:49,300 --> 00:25:51,700
So basically what will happen is if we run this program, we will just

641
00:25:51,700 --> 00:25:53,100
flat-out crash.

642
00:25:53,500 --> 00:25:53,800
At least.

643
00:25:53,800 --> 00:25:54,600
I assume we will.

644
00:25:54,900 --> 00:25:58,400
Let's verify that yes, we will just flat-out crash in the kind of

645
00:25:58,500 --> 00:26:01,800
After will have is basically a in execution violation.

646
00:26:01,800 --> 00:26:02,700
So you remember,

647
00:26:06,700 --> 00:26:10,300
we've seen what happens when we try to read and write from invalid

648
00:26:10,300 --> 00:26:10,700
memory.

649
00:26:11,500 --> 00:26:12,900
We get an access violation.

650
00:26:13,200 --> 00:26:15,200
Well, you also get the same kind of access violation.

651
00:26:15,200 --> 00:26:18,700
If you try to execute memory that isn't valid and that is Zach.

652
00:26:18,700 --> 00:26:19,400
What's going on here?

653
00:26:19,400 --> 00:26:22,100
Basically, what's going on here is we declared a pointer to a

654
00:26:22,100 --> 00:26:22,500
function.

655
00:26:22,500 --> 00:26:25,200
We did not point it at anything and then we went ahead and tried to

656
00:26:25,200 --> 00:26:26,000
call that function.

657
00:26:26,000 --> 00:26:33,000
Well, unsurprisingly that jumped 20 000 000 as you as you might expect

658
00:26:33,000 --> 00:26:36,300
and there isn't anything there, so it immediately faulted.

659
00:26:36,500 --> 00:26:37,600
And stopped our application.

660
00:26:37,600 --> 00:26:38,600
So that's fine.

661
00:26:38,600 --> 00:26:42,500
But we do need to do is we do need to basically figure out some way of

662
00:26:42,500 --> 00:26:44,800
actually pointing this to something useful.

663
00:26:44,900 --> 00:26:46,400
So, how are we going to do that?

664
00:26:46,400 --> 00:26:49,900
Well, the way we're going to do that is twofold.

665
00:26:50,100 --> 00:26:52,800
First of all, and, you know, I mean

666
00:26:53,900 --> 00:26:55,400
We kind of have two choices here.

667
00:26:55,600 --> 00:26:58,600
I'm going to show you how to do one of them and I'll briefly mention

668
00:26:58,600 --> 00:26:59,000
the other.

669
00:26:59,200 --> 00:26:59,800
But the first thing

670
00:27:00,100 --> 00:27:04,700
Do is I want to go ahead and stop this thing from crashing in the

671
00:27:04,700 --> 00:27:06,500
case, where we don't have these pointers.

672
00:27:07,200 --> 00:27:08,300
So, I'm going to take it one.

673
00:27:08,400 --> 00:27:12,600
I'm going to take the Ridiculousness up, one more level and basically,

674
00:27:12,600 --> 00:27:13,800
Define a macro.

675
00:27:13,800 --> 00:27:15,600
This is how I normally do things.

676
00:27:15,800 --> 00:27:17,000
This is how I normally do them.

677
00:27:17,000 --> 00:27:19,900
I know it's particularly odd, but basically I'm going to define a

678
00:27:19,900 --> 00:27:23,800
macro that defines a function of this form.

679
00:27:23,800 --> 00:27:28,100
So basically, it looks like this, right?

680
00:27:28,100 --> 00:27:29,800
It is a macro that just outputs

681
00:27:30,000 --> 00:27:31,900
It's that and Hoops.

682
00:27:32,700 --> 00:27:34,500
I don't know why I keep hitting the insert button today.

683
00:27:34,900 --> 00:27:38,500
So basically if you run this macro and you pass it, a parameter, it

684
00:27:38,500 --> 00:27:42,200
will basically Define for you a function with that name.

685
00:27:42,500 --> 00:27:46,000
That is all it's going to do and then I can replace and well, you

686
00:27:46,000 --> 00:27:48,500
know, I can do the other one as well while we're at it, right?

687
00:27:49,800 --> 00:27:50,800
Why input?

688
00:27:51,300 --> 00:27:56,200
Oops not line but X input set state name.

689
00:27:56,300 --> 00:27:56,800
There we go.

690
00:27:56,800 --> 00:27:57,800
That's the other one right there.

691
00:27:57,800 --> 00:27:58,300
Right?

692
00:27:58,500 --> 00:27:59,000
Looks good.

693
00:27:59,100 --> 00:28:00,700
Oops, Got the d word.

694
00:28:00,700 --> 00:28:01,700
Didn't we do that?

695
00:28:01,900 --> 00:28:02,500
There we go.

696
00:28:02,500 --> 00:28:06,100
Got everything in there and looks right.

697
00:28:06,100 --> 00:28:06,600
Okay.

698
00:28:07,000 --> 00:28:09,400
So basically what we're going to do is we're going to Define these two

699
00:28:09,400 --> 00:28:11,600
macros, the basically Define the functions for us.

700
00:28:11,800 --> 00:28:15,600
We are then going to Define our typedef in terms of the macro.

701
00:28:15,700 --> 00:28:18,900
So we're basically say, well, that's just this, right?

702
00:28:19,000 --> 00:28:19,300
That.

703
00:28:20,500 --> 00:28:24,700
You can see that will just this line will now produce this line so we

704
00:28:24,700 --> 00:28:25,600
can get rid of it.

705
00:28:25,600 --> 00:28:26,300
Right.

706
00:28:26,300 --> 00:28:29,000
Same thing again for the set State 1.

707
00:28:29,000 --> 00:28:30,100
We want to produce this line.

708
00:28:30,100 --> 00:28:35,900
So we'll just do X input sets, a tips G, their necks and put set

709
00:28:35,900 --> 00:28:38,200
stink, that will produce this line for us.

710
00:28:38,900 --> 00:28:42,400
And then the global variables can stay as they are those totally work

711
00:28:42,600 --> 00:28:45,000
and now you may wonder and then we've got our remapping down there.

712
00:28:45,000 --> 00:28:47,100
Now, you may wonder, why did I bother doing that?

713
00:28:47,100 --> 00:28:48,600
Why did I bother break it up into lines?

714
00:28:48,600 --> 00:28:49,400
Well, it's because

715
00:28:49,600 --> 00:28:54,800
I want to make functions of this form as stubs basically, right?

716
00:28:54,800 --> 00:28:59,600
So we've defined the types, but I want to actually do an X input get

717
00:28:59,600 --> 00:29:03,900
State stub, which is a function with the same signature.

718
00:29:05,000 --> 00:29:09,700
But the does absolutely nothing just return 0, that's it and the same

719
00:29:09,900 --> 00:29:11,700
for set State, there it goes.

720
00:29:12,000 --> 00:29:12,200
Now.

721
00:29:12,200 --> 00:29:19,200
I'm going to say x input, get States tub and X input set State sub.

722
00:29:20,600 --> 00:29:21,900
To stop.

723
00:29:21,900 --> 00:29:22,400
There we go.

724
00:29:23,500 --> 00:29:25,300
Let's compile that make sure everything's cool.

725
00:29:25,300 --> 00:29:25,900
And it is.

726
00:29:26,300 --> 00:29:27,800
So I hope you can see what I did there.

727
00:29:31,800 --> 00:29:34,700
Basically, this is, this is very efficient way of defining the

728
00:29:34,700 --> 00:29:37,000
function prototype once for the thing you want.

729
00:29:37,900 --> 00:29:40,700
Defining a type of that so that you can use it from now on as a

730
00:29:40,700 --> 00:29:44,400
pointer and we want to be able to do that, defining a stub with it as

731
00:29:44,400 --> 00:29:44,800
well.

732
00:29:44,900 --> 00:29:48,700
And now if we need to change this print this, this function signature

733
00:29:48,700 --> 00:29:51,000
at any time, it will change it everywhere.

734
00:29:51,100 --> 00:29:51,300
Right?

735
00:29:51,300 --> 00:29:53,100
So it's kind of nice and compressed in that way.

736
00:29:53,300 --> 00:29:56,200
Now the stubs and I might go ahead and do them like this, right?

737
00:29:56,200 --> 00:29:58,800
In fact, I might even go a little bit further and say, just group

738
00:29:58,800 --> 00:29:59,700
these all together.

739
00:30:00,000 --> 00:30:01,300
By set state or get state.

740
00:30:01,300 --> 00:30:03,800
So there's that one and there's this one, right?

741
00:30:04,100 --> 00:30:05,000
Yeah, makes sense.

742
00:30:05,600 --> 00:30:07,200
So basically, these are our definitions.

743
00:30:07,200 --> 00:30:12,600
Now this is is our support for xinput.

744
00:30:12,600 --> 00:30:13,500
Get state.

745
00:30:14,700 --> 00:30:18,800
And this is our support for xinput set state.

746
00:30:19,700 --> 00:30:20,300
Right.

747
00:30:21,400 --> 00:30:25,900
And all I've done is, I've made it so that now, our function pointers

748
00:30:25,900 --> 00:30:29,000
point to a default function right off the bat.

749
00:30:29,000 --> 00:30:32,500
So, in theory, now when we run, we will not crash, we'll just do what

750
00:30:32,500 --> 00:30:33,400
we used to do.

751
00:30:33,500 --> 00:30:36,600
And what will happen is, and we'll see here if I run to it.

752
00:30:36,600 --> 00:30:39,600
Basically, what will happen is this function pointer is just pointing

753
00:30:39,600 --> 00:30:40,400
at the sub function.

754
00:30:40,400 --> 00:30:43,400
So when we jump into it, we just jump to our sub function, right?

755
00:30:43,500 --> 00:30:44,400
No harm done.

756
00:30:44,500 --> 00:30:47,200
So basically that's a good way to initialize your function pointer.

757
00:30:47,200 --> 00:30:48,100
So just point to a stub.

758
00:30:48,100 --> 00:30:51,000
So that if you don't initialize them ever again, or fail to

759
00:30:51,200 --> 00:30:52,800
Able to load the thing, you're going to load.

760
00:30:52,800 --> 00:30:54,200
Well, it's no big deal.

761
00:30:54,500 --> 00:30:54,700
So.

762
00:30:54,700 --> 00:30:57,500
Yeah, so let's go ahead and call that done for now.

763
00:30:57,700 --> 00:31:01,100
And now we got to see how to actually load the windows versions of

764
00:31:01,100 --> 00:31:02,100
those right?

765
00:31:02,300 --> 00:31:03,500
Pretty straightforward.

766
00:31:03,500 --> 00:31:07,300
So just reorganize that a little bit here.

767
00:31:07,500 --> 00:31:11,400
So I had to make a function up here just because I want to be able to

768
00:31:11,600 --> 00:31:12,600
keep this close at hand.

769
00:31:12,600 --> 00:31:16,300
I want to be close to these definitions so I can just see it easier to

770
00:31:16,300 --> 00:31:17,000
be honest.

771
00:31:17,000 --> 00:31:19,700
We're going to call internal here and I've got these the I got

772
00:31:19,700 --> 00:31:20,800
internal right, good?

773
00:31:20,900 --> 00:31:21,000
Why?

774
00:31:21,100 --> 00:31:21,600
Why isn't these?

775
00:31:21,600 --> 00:31:23,000
These should all be called internal?

776
00:31:23,000 --> 00:31:24,300
I don't know why they're not.

777
00:31:24,400 --> 00:31:26,600
So I'm going to go ahead and do that just to make sure.

778
00:31:26,900 --> 00:31:29,900
Yeah, you should all be internal and they are.

779
00:31:29,900 --> 00:31:30,300
Okay.

780
00:31:30,600 --> 00:31:34,700
Okay, in fact wait, but isn't this one can't this one be internal to?

781
00:31:35,700 --> 00:31:36,400
Is that elapsed?

782
00:31:36,400 --> 00:31:38,600
The internal make complaints there?

783
00:31:38,600 --> 00:31:38,800
Now?

784
00:31:38,800 --> 00:31:40,100
It's not because it's a

785
00:31:42,800 --> 00:31:43,300
yeah, okay.

786
00:31:43,400 --> 00:31:43,700
Okay.

787
00:31:43,700 --> 00:31:44,100
Good.

788
00:31:44,400 --> 00:31:44,700
Okay.

789
00:31:44,700 --> 00:31:45,300
Sorry about that.

790
00:31:45,300 --> 00:31:45,900
Just a quick.

791
00:31:46,000 --> 00:31:46,800
When I see something in the code.

792
00:31:46,800 --> 00:31:49,000
Sometimes I'm obsessively going to have to go touch it.

793
00:31:49,000 --> 00:31:50,200
That's just the way it goes sometimes.

794
00:31:50,400 --> 00:31:52,700
All right, so I'm going to go ahead and Define the new function here

795
00:31:53,200 --> 00:31:55,200
called load X input.

796
00:31:55,400 --> 00:31:56,800
And I guess we'll prefix it with win32.

797
00:31:56,800 --> 00:31:57,900
Since that's what we've been doing.

798
00:31:58,100 --> 00:32:02,500
Load X input is just going to be a thing which tries to get X input.

799
00:32:02,500 --> 00:32:04,300
If it can, if it can't, it can't.

800
00:32:04,300 --> 00:32:05,000
No big deal.

801
00:32:05,000 --> 00:32:05,700
Not a problem.

802
00:32:05,800 --> 00:32:06,000
All right.

803
00:32:06,000 --> 00:32:10,600
So what we're going to do is we're going to essentially do the steps

804
00:32:10,600 --> 00:32:12,100
that the Windows loader does.

805
00:32:12,600 --> 00:32:13,700
It loads our program.

806
00:32:16,000 --> 00:32:16,500
so,

807
00:32:17,800 --> 00:32:22,200
We are going to use a function called load Library, which loads

808
00:32:22,600 --> 00:32:28,500
basically the dll the backing part of the thing that Windows uses,

809
00:32:28,600 --> 00:32:31,500
basically to give us functions, which I may be and we're going to have

810
00:32:31,500 --> 00:32:32,100
time in this dream.

811
00:32:32,100 --> 00:32:34,500
I think we're going pretty good or I might actually draw some diagrams

812
00:32:34,500 --> 00:32:34,800
for this one.

813
00:32:34,800 --> 00:32:35,800
So you can kind of see what it is.

814
00:32:36,100 --> 00:32:39,500
We're going to use that to load the dll that we actually wanted.

815
00:32:39,500 --> 00:32:41,800
So we're going to call load library with a file name.

816
00:32:41,800 --> 00:32:43,900
The file name is going to go in here, right?

817
00:32:44,100 --> 00:32:47,400
And that's going to give us back a module, which is basically a

818
00:32:47,500 --> 00:32:48,900
Handle to some code, right?

819
00:32:48,900 --> 00:32:53,100
A handle to a loaded piece of code, kind of like our H instance was in

820
00:32:53,100 --> 00:32:55,100
Wind main, if you remember that, it's that sort of thing.

821
00:32:55,800 --> 00:32:58,300
So what we're going to do is get the xinput library.

822
00:32:58,300 --> 00:32:59,800
We're going to load it and assume.

823
00:33:00,000 --> 00:33:02,200
We get back a valid Library.

824
00:33:02,300 --> 00:33:04,100
We're then going to load the functions out of it.

825
00:33:04,100 --> 00:33:05,700
So xinput, get State.

826
00:33:06,100 --> 00:33:10,100
Our function here, get state is going to be equal to something that we

827
00:33:10,100 --> 00:33:11,300
load of that library.

828
00:33:11,300 --> 00:33:13,700
And our, why do I keep, I always want to type y.

829
00:33:13,700 --> 00:33:16,800
If I type back set, state is also going to be one.

830
00:33:16,800 --> 00:33:20,300
Now, the function that we need for that is called get proc address and

831
00:33:20,300 --> 00:33:21,600
we'll see how that works in a second.

832
00:33:21,600 --> 00:33:22,400
So load Library.

833
00:33:22,400 --> 00:33:23,700
We need a file name to load.

834
00:33:23,700 --> 00:33:27,700
And remember, I was mentioning it before inside that xinput .h, they

835
00:33:27,700 --> 00:33:29,700
actually were nice enough to Define for us.

836
00:33:30,000 --> 00:33:33,600
For this version of the header file that we're using which one it is.

837
00:33:33,600 --> 00:33:37,700
But to be honest with you, I would rather use the earlier version

838
00:33:37,700 --> 00:33:39,600
because that'll give us a little more compatibility.

839
00:33:39,600 --> 00:33:39,900
Now.

840
00:33:39,900 --> 00:33:45,600
I happen to know that xinput 1.3 tends to be available on a lot of

841
00:33:45,600 --> 00:33:46,000
machines.

842
00:33:46,000 --> 00:33:51,100
So I'm going to go ahead and just verify that that guy is there.

843
00:33:51,100 --> 00:33:52,600
So, let's take a look.

844
00:33:52,900 --> 00:33:58,000
Let's go ahead and change over here to Windows and let's do a derp /s.

845
00:33:58,000 --> 00:33:59,800
I don't even know if this command works anymore.

846
00:34:00,000 --> 00:34:00,300
Best.

847
00:34:00,300 --> 00:34:00,900
But let's take.

848
00:34:00,900 --> 00:34:01,200
Whoops.

849
00:34:01,200 --> 00:34:02,000
That's not good.

850
00:34:02,100 --> 00:34:02,700
Dot DL.

851
00:34:02,700 --> 00:34:03,000
L.

852
00:34:03,100 --> 00:34:07,100
I just want to see if it has one of these still there.

853
00:34:10,600 --> 00:34:11,600
Sure does.

854
00:34:11,699 --> 00:34:12,199
Yep.

855
00:34:13,300 --> 00:34:14,100
Does it have a four?

856
00:34:15,600 --> 00:34:16,199
I don't know.

857
00:34:16,800 --> 00:34:17,900
Let's find out.

858
00:34:18,000 --> 00:34:18,800
Let's take a look.

859
00:34:18,800 --> 00:34:20,300
What dlls dll?

860
00:34:20,300 --> 00:34:21,300
Bingo, ladies and gentlemen.

861
00:34:21,300 --> 00:34:23,199
What dlls do we have?

862
00:34:23,900 --> 00:34:24,900
Definitely got xinput.

863
00:34:24,900 --> 00:34:28,699
1.3., We got two copies of them because you can always do with a few

864
00:34:28,699 --> 00:34:29,300
more copies.

865
00:34:29,300 --> 00:34:31,400
I think one of them is a 64-bit and ones with 32-bit.

866
00:34:31,400 --> 00:34:32,100
Maybe I don't know.

867
00:34:32,100 --> 00:34:34,000
You can see these in while 32 and this isn't system.

868
00:34:34,000 --> 00:34:37,100
32, which I think means this is the 64-bit one and this is the 32-bit

869
00:34:37,100 --> 00:34:37,400
one.

870
00:34:37,500 --> 00:34:40,199
Paradoxically perhaps or yeah.

871
00:34:40,199 --> 00:34:40,500
Okay.

872
00:34:40,500 --> 00:34:43,300
So if we were to try and load X input, 1 point 4, we would not even

873
00:34:43,300 --> 00:34:44,500
run on this machine probably.

874
00:34:45,000 --> 00:34:45,199
So,

875
00:34:45,400 --> 00:34:49,100
Actually, this just kind of gets back to what I was saying about why

876
00:34:49,100 --> 00:34:51,199
you kind of want to take this sort of thing into your own hands.

877
00:34:51,199 --> 00:34:51,900
Potentially.

878
00:34:52,100 --> 00:34:54,900
Let's we, if we were to actually let it load for us.

879
00:34:54,900 --> 00:34:56,300
It probably wouldn't would have failed.

880
00:34:56,400 --> 00:35:00,000
So I'm going to try and load X input, 1 Point 3 instead of 1 point 4,

881
00:35:00,000 --> 00:35:02,300
because that's going to be on more machines and that'll mean, you

882
00:35:02,300 --> 00:35:06,200
don't have to install a bunch of stuff to actually have our game work.

883
00:35:06,200 --> 00:35:07,700
So assuming we get that back.

884
00:35:08,100 --> 00:35:10,900
I don't know if you have to check for invalid handle value.

885
00:35:10,900 --> 00:35:11,900
What is it is null.

886
00:35:11,900 --> 00:35:12,500
So that's fine.

887
00:35:12,700 --> 00:35:15,100
So basically we're going to load it that dll up its going to map.

888
00:35:15,300 --> 00:35:17,300
It into our process virtual address space.

889
00:35:17,300 --> 00:35:22,800
We are then going to pass that handle to a function called get proc

890
00:35:22,800 --> 00:35:24,800
address and what get proc address does f.

891
00:35:24,800 --> 00:35:27,400
What it says it gets the address of a procedure or function.

892
00:35:27,700 --> 00:35:31,500
So if we look at that basically, all we have to do is pass the module

893
00:35:31,500 --> 00:35:34,000
and then pass the name of the thing that we're trying to load.

894
00:35:34,000 --> 00:35:38,800
So we are trying to load xinput, get State, and xinput set State.

895
00:35:38,800 --> 00:35:42,200
Now, you will notice since it does not know, get proc address does not

896
00:35:42,200 --> 00:35:42,600
know.

897
00:35:43,600 --> 00:35:45,300
What the function signature is, this loading?

898
00:35:45,300 --> 00:35:46,200
It can load anything.

899
00:35:46,400 --> 00:35:47,300
Any kind of function.

900
00:35:47,500 --> 00:35:48,400
It's just going to return.

901
00:35:48,400 --> 00:35:49,700
What is basically a void star.

902
00:35:49,900 --> 00:35:53,400
So, we are going to have to cast The Return of this to the type that

903
00:35:53,400 --> 00:35:54,500
we actually want.

904
00:35:54,500 --> 00:35:58,500
Otherwise, see, will immediately complain and we know the kind that we

905
00:35:58,500 --> 00:35:58,800
want.

906
00:35:58,800 --> 00:35:59,800
So that's pretty easy.

907
00:36:00,200 --> 00:36:05,600
We just do it like this, get input set State star and that is that.

908
00:36:05,600 --> 00:36:08,000
So, we're gonna go ahead and compile that and we're going to go ahead

909
00:36:08,000 --> 00:36:10,700
and see if that worked by stepping into it.

910
00:36:10,700 --> 00:36:15,000
And taking a look at sort of what actually occurs, whether we get

911
00:36:15,000 --> 00:36:17,500
valid function, pointers back from those groups.

912
00:36:18,500 --> 00:36:19,700
Of course that will only work.

913
00:36:20,000 --> 00:36:23,300
If we call the function, if we never call the function, we're not

914
00:36:23,300 --> 00:36:24,600
going to get much help I suppose.

915
00:36:24,600 --> 00:36:26,700
So that's kind of initialization stuff.

916
00:36:26,700 --> 00:36:27,900
So I'm going to put that right here.

917
00:36:27,900 --> 00:36:29,800
First thing we do, we're going to try and load it.

918
00:36:30,100 --> 00:36:32,000
If we can, we can, if we can't, we can't.

919
00:36:32,100 --> 00:36:34,100
So, let's go ahead and see, can we load it?

920
00:36:34,600 --> 00:36:35,400
Loaded just fine.

921
00:36:35,400 --> 00:36:38,600
Looks like, so we go in here, we call get proc address.

922
00:36:38,800 --> 00:36:40,300
Did we get an address for that?

923
00:36:41,300 --> 00:36:42,000
Let's see.

924
00:36:42,300 --> 00:36:46,600
X input, get State, what happened there?

925
00:36:47,200 --> 00:36:47,700
Oh, right.

926
00:36:47,700 --> 00:36:48,400
It's an underscore.

927
00:36:48,600 --> 00:36:51,600
Sorry, and xinput set State.

928
00:36:51,600 --> 00:36:54,800
We use that macro trick makes things a little more complicated than a

929
00:36:54,800 --> 00:36:55,000
bugger.

930
00:36:55,000 --> 00:36:55,600
It's true.

931
00:36:55,800 --> 00:36:59,200
So, it looks like we got both of them and you can kind of see.

932
00:36:59,200 --> 00:36:59,900
Now, if you look in the

933
00:37:00,000 --> 00:37:00,500
Watch window.

934
00:37:00,500 --> 00:37:01,400
It's kind of interesting.

935
00:37:01,900 --> 00:37:04,500
The watch window is actually smart enough to tell us that these are

936
00:37:04,500 --> 00:37:08,200
now pointers into the xinput 1.3, dll portion of our memory space,

937
00:37:08,200 --> 00:37:08,500
right?

938
00:37:08,500 --> 00:37:09,400
Which is kind of cool.

939
00:37:09,800 --> 00:37:10,700
So we've got them now.

940
00:37:10,700 --> 00:37:13,200
Let's see if we could run with them, we can.

941
00:37:13,300 --> 00:37:16,900
And so in theory, now, we are actually getting back from Windows, the

942
00:37:16,900 --> 00:37:20,400
actual state of the controller, which means, if we wanted to, for

943
00:37:20,400 --> 00:37:25,000
example, we could make it so that something was predicated on that we

944
00:37:25,000 --> 00:37:25,600
could make it.

945
00:37:25,600 --> 00:37:29,800
So, for example, that, you know, we do this little thing here, like we

946
00:37:29,900 --> 00:37:34,100
Add y offset, maybe we will only add y offset.

947
00:37:34,200 --> 00:37:37,200
If one of these is downright, since this is just our little thing that

948
00:37:37,200 --> 00:37:37,700
we play with.

949
00:37:37,700 --> 00:37:39,500
Anyway, maybe we'll go in here and say.

950
00:37:39,500 --> 00:37:44,500
Well, you know, if the a button is down, right, let's add to that.

951
00:37:44,700 --> 00:37:44,900
Right?

952
00:37:44,900 --> 00:37:45,700
And there we go.

953
00:37:46,100 --> 00:37:50,000
Now for running we should see no actual why motion and that's true.

954
00:37:50,500 --> 00:37:54,100
And if we had a Gamepad here, what you know what, I don't see any

955
00:37:54,100 --> 00:37:56,900
reason not to run into the other room and get a Gamepad and test this

956
00:37:56,900 --> 00:37:57,200
out.

957
00:37:57,200 --> 00:37:59,700
I don't really think there's almost any chance that

958
00:38:00,000 --> 00:38:02,600
There's anything wrong or such a simple API, but you know what?

959
00:38:02,900 --> 00:38:04,200
Give me one second.

960
00:38:04,500 --> 00:38:06,600
I'm gonna go grab one plugged in my TV.

961
00:38:50,700 --> 00:38:51,700
Seems worth it.

962
00:38:51,800 --> 00:38:53,500
I don't know, only took a couple seconds.

963
00:38:53,600 --> 00:38:57,200
You can see I've even got the one that that was sort of the video and

964
00:38:57,200 --> 00:38:58,100
I actually don't think that's true.

965
00:38:58,100 --> 00:38:59,800
The one I recorded in the trailer is actually at work.

966
00:39:00,000 --> 00:39:01,100
Got two of these pink ones.

967
00:39:01,500 --> 00:39:02,600
I bought them one time.

968
00:39:03,300 --> 00:39:05,100
I bought two pink ones and like a green.

969
00:39:05,100 --> 00:39:05,700
When they were all.

970
00:39:05,700 --> 00:39:09,100
They had left at at the Target downtown.

971
00:39:09,100 --> 00:39:13,000
We were trying to play a game called Gang Beasts and we wanted extra

972
00:39:13,000 --> 00:39:13,600
controllers.

973
00:39:13,600 --> 00:39:16,300
So let's take a look and see, I don't know if this is going to work

974
00:39:16,300 --> 00:39:16,600
here.

975
00:39:17,100 --> 00:39:19,600
It doesn't look too promising because it's not actually lighting up

976
00:39:19,600 --> 00:39:24,000
for me, which does not fill me with much with much.

977
00:39:24,000 --> 00:39:26,600
Hope for the fact that it's actually working properly.

978
00:39:27,500 --> 00:39:28,400
But what are you going to do?

979
00:39:28,400 --> 00:39:28,900
Let me try.

980
00:39:28,900 --> 00:39:31,500
Plug it into the actual PC down here.

981
00:39:32,800 --> 00:39:33,500
There we go.

982
00:39:33,600 --> 00:39:35,300
That that had a little light flash on it.

983
00:39:35,300 --> 00:39:37,200
I don't know that might indicate something good.

984
00:39:37,200 --> 00:39:39,400
Not actually sure well.

985
00:39:40,700 --> 00:39:42,200
Yeah, well, I don't know.

986
00:39:42,700 --> 00:39:43,400
I tried.

987
00:39:43,700 --> 00:39:45,300
We'll see if we can get this Gamepad working.

988
00:39:45,300 --> 00:39:47,700
This is this doesn't seem like it's going to be much to do with.

989
00:39:47,700 --> 00:39:50,000
Oh, no that actually does.

990
00:39:50,100 --> 00:39:50,600
There we go.

991
00:39:51,300 --> 00:39:52,900
Okay, totally good.

992
00:39:52,900 --> 00:39:54,100
I guess you just have to, I don't know.

993
00:39:54,300 --> 00:39:56,500
I don't know why the light you can see the light just came on.

994
00:39:56,500 --> 00:39:58,400
I don't know why the light wasn't actually on originally.

995
00:39:58,400 --> 00:40:01,100
I thought that it would just be on when I plugged it in, but maybe you

996
00:40:01,100 --> 00:40:05,900
actually, it might be that you have to actually load X input for it to

997
00:40:05,900 --> 00:40:07,300
actually go on or something sometimes.

998
00:40:07,300 --> 00:40:08,000
An older versions.

999
00:40:08,000 --> 00:40:08,300
I don't know.

1000
00:40:08,300 --> 00:40:10,000
Normally when you just plug it in just works.

1001
00:40:10,400 --> 00:40:13,500
I guess because this machine perhaps doesn't actually have the little

1002
00:40:14,200 --> 00:40:18,900
X input helper, the little X Box controller app, or whatever.

1003
00:40:18,900 --> 00:40:19,700
Maybe it doesn't.

1004
00:40:19,800 --> 00:40:20,500
But that's pretty good.

1005
00:40:20,500 --> 00:40:21,700
That was it for controller support.

1006
00:40:21,700 --> 00:40:24,500
I mean, you saw that, that was like, hardly any code, right?

1007
00:40:24,800 --> 00:40:25,900
And we did it the hard way.

1008
00:40:25,900 --> 00:40:28,100
We did it, loading it ourselves, but you can see, I don't know if you

1009
00:40:28,100 --> 00:40:28,600
can see there.

1010
00:40:28,600 --> 00:40:31,300
When I push the button, it totally works.

1011
00:40:31,300 --> 00:40:33,000
So we're basically done.

1012
00:40:33,100 --> 00:40:34,700
I mean, that's the controller input.

1013
00:40:35,000 --> 00:40:36,400
There is nothing else to it.

1014
00:40:36,700 --> 00:40:38,600
We can go ahead and send Rumble back to it.

1015
00:40:38,600 --> 00:40:40,100
So I guess we might as well.

1016
00:40:40,100 --> 00:40:40,300
I

1017
00:40:40,400 --> 00:40:42,300
I don't know what else to say about it.

1018
00:40:42,300 --> 00:40:45,500
Other than hey, that when you actually make a good API ladies and

1019
00:40:45,500 --> 00:40:47,500
gentlemen, which xinput actually isn't that bad.

1020
00:40:47,500 --> 00:40:49,900
It's got a few things that are kind of annoying, but on the whole,

1021
00:40:49,900 --> 00:40:50,600
it's pretty easy.

1022
00:40:50,800 --> 00:40:52,400
Look at how easy this will be able to program.

1023
00:40:52,500 --> 00:40:53,900
You know, it's a good thing.

1024
00:40:54,300 --> 00:40:57,700
So, I guess what I could do here is just call get x and x input set

1025
00:40:57,700 --> 00:41:00,700
State just to verify that it sort of worked.

1026
00:41:01,100 --> 00:41:03,500
I could go ahead and just send that to the 0th controller.

1027
00:41:04,600 --> 00:41:08,000
Yeah, and we'll just, we'll just send some some rumble level out to it

1028
00:41:08,000 --> 00:41:09,000
just to verify that.

1029
00:41:09,000 --> 00:41:10,100
It's actually working.

1030
00:41:10,500 --> 00:41:13,500
Then we'll save that a for some other time later when we actually have

1031
00:41:13,500 --> 00:41:19,500
some really coherent thing that we want to do with it.

1032
00:41:19,500 --> 00:41:22,300
So I'm going to go ahead and look up X input set State here.

1033
00:41:22,300 --> 00:41:25,100
Just so I can see what the parameters are of that structure.

1034
00:41:25,100 --> 00:41:29,200
You got to fill out that it passes to it, xinput set state.

1035
00:41:29,400 --> 00:41:31,500
So it's called an X input vibration.

1036
00:41:31,700 --> 00:41:38,200
Let's take a look here, xinput vibration and it is just left motor

1037
00:41:38,200 --> 00:41:40,200
speed and right motor speed.

1038
00:41:40,400 --> 00:41:41,300
That is it.

1039
00:41:41,600 --> 00:41:42,000
All right.

1040
00:41:42,000 --> 00:41:43,500
Well, that should be easy enough.

1041
00:41:43,900 --> 00:41:46,300
So let's take a look vibration.

1042
00:41:46,300 --> 00:41:50,200
.W left motor speed equals something.

1043
00:41:50,200 --> 00:41:50,500
What is?

1044
00:41:50,500 --> 00:41:51,500
It's a word.

1045
00:41:51,600 --> 00:41:52,000
All right.

1046
00:41:52,000 --> 00:41:56,500
Well if it's a word, I mean, clearly if it's a word, we're going to

1047
00:41:56,500 --> 00:41:59,000
want something close to the highest value because we want some

1048
00:41:59,000 --> 00:41:59,800
serious.

1049
00:42:00,000 --> 00:42:00,800
On here, right?

1050
00:42:01,200 --> 00:42:02,700
That seems to me like, a good thing.

1051
00:42:02,700 --> 00:42:07,400
Maybe not quite the highest not 65536, but we're up there and let's

1052
00:42:07,400 --> 00:42:09,700
take a look and see what happens here.

1053
00:42:10,000 --> 00:42:11,100
When I run that.

1054
00:42:11,300 --> 00:42:13,400
Look at that vibrating nicely.

1055
00:42:13,400 --> 00:42:15,700
I don't know if you can even see it, vibrating but it is definitely

1056
00:42:15,700 --> 00:42:16,400
vibrating.

1057
00:42:17,000 --> 00:42:17,600
All right.

1058
00:42:17,600 --> 00:42:18,600
Well, there we go.

1059
00:42:19,400 --> 00:42:22,200
That was the adventure of xinput.

1060
00:42:22,200 --> 00:42:23,800
Not a whole lot.

1061
00:42:25,500 --> 00:42:28,100
To do and good for a day's work.

1062
00:42:28,100 --> 00:42:31,700
So while we have time, we might as well add keyboard input to just so

1063
00:42:31,700 --> 00:42:33,000
we can see how to get that.

1064
00:42:33,000 --> 00:42:36,100
So that when the time comes and we want to wire this up to our actual

1065
00:42:36,100 --> 00:42:39,500
game code, we will be ready because I'd like to have keyboard input as

1066
00:42:39,500 --> 00:42:41,300
well not just joystick input.

1067
00:42:41,400 --> 00:42:44,100
So I'm going to kind of go up here and show you how to do that.

1068
00:42:44,100 --> 00:42:45,100
It's real simple.

1069
00:42:45,400 --> 00:42:48,900
Basically for the kind of basic keyboard input that we're looking for.

1070
00:42:49,200 --> 00:42:52,000
There's a kind there's a more advanced kind will do when we when we do

1071
00:42:52,000 --> 00:42:54,700
like the shipping version of the win32 platform layer, which is way

1072
00:42:54,700 --> 00:42:55,200
down the line.

1073
00:42:56,100 --> 00:42:58,400
Basically, there's a thing called raw input, that we would use, to be

1074
00:42:58,400 --> 00:43:01,400
able to handle multiple keyboards that are mapped to different

1075
00:43:01,400 --> 00:43:03,500
players, which almost nobody supports.

1076
00:43:03,500 --> 00:43:05,000
But if you can actually, you can do it.

1077
00:43:07,400 --> 00:43:08,600
And we might as well do it.

1078
00:43:09,600 --> 00:43:16,700
But in for the mean in the meantime, there's basically ciske downs and

1079
00:43:16,700 --> 00:43:17,800
ciske UPS.

1080
00:43:18,700 --> 00:43:19,400
Let's see.

1081
00:43:19,400 --> 00:43:26,700
Sis key up and there's keydown and keyup.

1082
00:43:27,500 --> 00:43:30,800
I think that's basically it and I'm not sure.

1083
00:43:30,800 --> 00:43:33,100
I don't remember these adults.

1084
00:43:33,100 --> 00:43:33,900
So we're going to look at them.

1085
00:43:33,900 --> 00:43:36,200
I don't even get input this way anymore.

1086
00:43:36,400 --> 00:43:37,000
Like I said, I use

1087
00:43:37,200 --> 00:43:42,100
Use the kind that's it's it's significantly a lot more complicated.

1088
00:43:42,100 --> 00:43:44,300
I would say but you get a little bit more from it.

1089
00:43:44,300 --> 00:43:46,500
So it's something we'll kind of cover more in the future, but you

1090
00:43:46,500 --> 00:43:48,400
definitely don't want to start with it because it's a bunch of

1091
00:43:48,400 --> 00:43:51,100
complexity that you don't need for anything other than if you actually

1092
00:43:51,100 --> 00:43:52,300
want to handle multiple keyboards.

1093
00:43:52,900 --> 00:43:54,700
So, let's take a look here.

1094
00:43:54,700 --> 00:44:00,400
So, in ciske down the W / am is the virtual key code.

1095
00:44:00,500 --> 00:44:02,700
And the virtual key code is basically the thing we want.

1096
00:44:02,700 --> 00:44:05,500
So what win is going to do is what is going to call us back with these

1097
00:44:05,500 --> 00:44:07,000
messages, whenever anything happens on the

1098
00:44:07,100 --> 00:44:07,400
Keyboard.

1099
00:44:07,400 --> 00:44:08,700
Now you don't need to register anything.

1100
00:44:08,700 --> 00:44:10,200
It just happens.

1101
00:44:10,600 --> 00:44:12,300
Windows will always send these to you.

1102
00:44:12,300 --> 00:44:14,900
And normally what was happening before is they were going into here.

1103
00:44:14,900 --> 00:44:17,100
They were they were just getting eaten up by the deaf window.

1104
00:44:17,100 --> 00:44:17,500
Proximal.

1105
00:44:17,500 --> 00:44:20,500
All we're going to do is start actually looking for that's it.

1106
00:44:20,900 --> 00:44:23,500
So basically the W / am is the virtual key code.

1107
00:44:23,800 --> 00:44:25,900
The W / am is the thing that comes in here.

1108
00:44:26,200 --> 00:44:27,700
It's just a Anonymous parameter.

1109
00:44:27,700 --> 00:44:30,100
That's depends on what message you have.

1110
00:44:30,300 --> 00:44:33,800
So the virtual key code is, is this?

1111
00:44:33,900 --> 00:44:36,000
So let's let's go ahead and Mark that off.

1112
00:44:36,200 --> 00:44:37,000
Is that true?

1113
00:44:37,100 --> 00:44:39,300
As well in ciske up.

1114
00:44:39,600 --> 00:44:40,200
Let's see.

1115
00:44:41,400 --> 00:44:42,600
Ciske up.

1116
00:44:43,200 --> 00:44:44,100
Yep, it is.

1117
00:44:44,200 --> 00:44:45,800
Let's look at Key down.

1118
00:44:48,200 --> 00:44:49,800
And key down message.

1119
00:44:50,800 --> 00:44:52,200
Let's take a look at that.

1120
00:44:52,600 --> 00:44:54,900
The virtual code of the non-system key.

1121
00:44:54,900 --> 00:44:55,200
Yeah.

1122
00:44:55,200 --> 00:44:59,400
So basically it always is going to come in with the V code K code

1123
00:44:59,400 --> 00:44:59,800
there.

1124
00:45:00,000 --> 00:45:01,600
So, that is exactly what we wanted.

1125
00:45:01,600 --> 00:45:02,700
We want our VK code.

1126
00:45:02,700 --> 00:45:06,400
Now, tell you what a VK code is in a minute, but for now suffice to

1127
00:45:06,400 --> 00:45:08,500
say, it's just a thing, which tell you which key it was.

1128
00:45:08,800 --> 00:45:11,900
But there's also this other thing, which is the L, / am and the L /,

1129
00:45:11,900 --> 00:45:16,700
am basically tells you some additional things about the, the, you

1130
00:45:16,700 --> 00:45:18,200
know, what went down basically.

1131
00:45:18,700 --> 00:45:22,400
And so there's the previous Key State which is B 30, right?

1132
00:45:22,400 --> 00:45:25,700
So if you shift one up by 30, you get B 30.

1133
00:45:26,200 --> 00:45:29,800
If we take a look at L per annum and it with that.

1134
00:45:30,000 --> 00:45:35,100
That tells us whether the key was down before, the message was sent or

1135
00:45:35,100 --> 00:45:36,900
up before the message was sent.

1136
00:45:37,000 --> 00:45:39,700
And so I don't know why you would receive receive key down messages,

1137
00:45:39,700 --> 00:45:42,200
if the key was already down, but it may be because of key repeat, if

1138
00:45:42,200 --> 00:45:43,000
that makes sense.

1139
00:45:43,100 --> 00:45:44,700
Like, you know, you hold down a key.

1140
00:45:45,600 --> 00:45:47,900
Hold on a key like this and it keeps going.

1141
00:45:48,200 --> 00:45:51,100
I think that might be the case and will double check that.

1142
00:45:51,500 --> 00:45:55,800
But for now, let's go ahead and just say okay no matter what happens.

1143
00:45:55,800 --> 00:45:57,900
We're going to get basically a VK code out of it.

1144
00:45:58,200 --> 00:45:59,800
We're going to see what the VP.

1145
00:46:00,000 --> 00:46:04,200
What the wpm is that that tells us what key actually went down and

1146
00:46:04,200 --> 00:46:06,800
we're just going to look for the keys that we actually want.

1147
00:46:07,000 --> 00:46:07,800
That's all we're going to do.

1148
00:46:07,800 --> 00:46:11,700
We're going to take a look for those individual keys and the keys that

1149
00:46:11,700 --> 00:46:13,000
I actually want.

1150
00:46:13,300 --> 00:46:16,900
Basically our VK.

1151
00:46:16,900 --> 00:46:19,000
I think these are the way that they are listed.

1152
00:46:19,100 --> 00:46:22,100
I'm going to see if there's actually a VK code listing somewhere.

1153
00:46:22,600 --> 00:46:27,900
Let's see VK code listing because I don't remember what they all

1154
00:46:27,900 --> 00:46:29,800
actually are because they have

1155
00:46:29,900 --> 00:46:31,800
Different names, sometimes you can see.

1156
00:46:31,800 --> 00:46:32,100
All right.

1157
00:46:32,100 --> 00:46:33,400
So here you go and msdn.

1158
00:46:33,500 --> 00:46:37,500
There's a listing of all of the VK codes and the VK codes are

1159
00:46:37,500 --> 00:46:42,600
basically all of the codes that don't have direct antsy mappings.

1160
00:46:42,700 --> 00:46:45,100
So, basically, you remember the ants e.keycode stuff.

1161
00:46:45,100 --> 00:46:47,200
We talked about, in the intro to C3.

1162
00:46:47,900 --> 00:46:52,400
Well, basically, all of the ANSI Keys actually map to their actual

1163
00:46:52,500 --> 00:46:54,000
like antsy equivalence, right?

1164
00:46:54,000 --> 00:46:58,400
So if you actually in see, if we want to, let's say test for the W

1165
00:46:58,800 --> 00:46:59,800
button, you could

1166
00:47:00,000 --> 00:47:02,000
They just do that and it would work.

1167
00:47:02,000 --> 00:47:03,200
At least I believe it is.

1168
00:47:03,200 --> 00:47:04,200
Always the capital.

1169
00:47:04,200 --> 00:47:06,200
Yeah, it maps to the capital if I'm correct.

1170
00:47:06,200 --> 00:47:07,900
If I remember correctly.

1171
00:47:08,000 --> 00:47:11,500
Yeah, that is the W key and you know will double check this to make

1172
00:47:11,500 --> 00:47:13,700
sure it wasn't the lowercase and I'm totally wrong.

1173
00:47:13,700 --> 00:47:15,100
Well, you know we can just do it right now.

1174
00:47:15,100 --> 00:47:19,000
I'll put debug string a w, very exciting.

1175
00:47:21,100 --> 00:47:24,800
Alright now let's go ahead and run this and get this window over the

1176
00:47:24,800 --> 00:47:25,500
side there.

1177
00:47:25,500 --> 00:47:26,300
Whereas our output.

1178
00:47:26,300 --> 00:47:28,200
There's our output W.

1179
00:47:28,200 --> 00:47:28,700
There it is.

1180
00:47:28,700 --> 00:47:32,400
You can kind of see it, wa out there always good.

1181
00:47:32,500 --> 00:47:35,100
So that's all we really needed for any of those.

1182
00:47:35,100 --> 00:47:39,200
So if we want W ASDF, basically what we're looking at is just

1183
00:47:39,200 --> 00:47:40,400
something like this really?

1184
00:47:40,400 --> 00:47:43,200
Really trivial code here, nothing particularly interesting.

1185
00:47:43,200 --> 00:47:50,700
So if we want the full complement, let's say w,a,s,d and of course

1186
00:47:50,800 --> 00:47:55,400
The ubiquitous q&e, you always need those special options.

1187
00:47:55,800 --> 00:47:59,700
That is basically that nothing particularly interesting there.

1188
00:48:00,000 --> 00:48:04,100
Then we just need to know stuff like say the arrow keys, maybe the

1189
00:48:04,100 --> 00:48:08,300
spacebar and then probably like Escape.

1190
00:48:08,400 --> 00:48:12,000
That's that's kind of the stuff that we would expect to get back in a

1191
00:48:12,000 --> 00:48:13,200
game situation.

1192
00:48:13,300 --> 00:48:15,100
I think that probably be pretty good for now.

1193
00:48:15,200 --> 00:48:18,400
So we've got q and E and then we go in here.

1194
00:48:18,400 --> 00:48:20,000
We're going to need VK up.

1195
00:48:21,100 --> 00:48:22,700
VK left?

1196
00:48:22,800 --> 00:48:27,500
VK down VK, right?

1197
00:48:28,100 --> 00:48:29,500
VK Escape.

1198
00:48:29,500 --> 00:48:29,800
Is it is?

1199
00:48:30,000 --> 00:48:31,700
Escape or just ask.

1200
00:48:31,700 --> 00:48:34,000
I wonder, I don't actually know.

1201
00:48:34,200 --> 00:48:35,200
Let's take a look here.

1202
00:48:35,200 --> 00:48:37,600
You can see these left up right down.

1203
00:48:37,600 --> 00:48:41,600
There's home in end and all these other, good things VK Escape.

1204
00:48:41,600 --> 00:48:43,700
So it is escape fully typed out.

1205
00:48:44,100 --> 00:48:45,400
And then what else did I say?

1206
00:48:46,500 --> 00:48:51,600
Spacebar is a typical one is the spacebar mapped to just space or does

1207
00:48:51,600 --> 00:48:55,500
it have an actual space in it?

1208
00:48:55,500 --> 00:48:56,400
VK space?

1209
00:48:56,400 --> 00:48:57,100
There we go.

1210
00:48:57,600 --> 00:48:58,900
So that's it.

1211
00:49:00,100 --> 00:49:04,100
That's basically all there is and those are all the key codes that we

1212
00:49:04,100 --> 00:49:05,500
might want to handle.

1213
00:49:05,600 --> 00:49:06,300
Now.

1214
00:49:06,300 --> 00:49:09,000
What we're going to do with those is going to be determined once we

1215
00:49:09,000 --> 00:49:12,500
actually get our game stuff working and we have a place to wire input

1216
00:49:12,500 --> 00:49:13,900
up to but I just want to show you.

1217
00:49:16,000 --> 00:49:17,300
So there is no confusion.

1218
00:49:17,700 --> 00:49:21,600
Basically what was going down going on and so we can also get some

1219
00:49:21,600 --> 00:49:22,500
more information here.

1220
00:49:22,500 --> 00:49:28,000
Like I said, this is going to be basically a was down which is

1221
00:49:28,000 --> 00:49:29,500
basically saying, oh, okay.

1222
00:49:30,100 --> 00:49:32,200
Was the key down beforehand.

1223
00:49:32,300 --> 00:49:37,800
So that's that's like if this is not equal to 0 then the key was down.

1224
00:49:38,500 --> 00:49:42,400
I'm basically just turning that into a guaranteed Boolean, this this

1225
00:49:42,400 --> 00:49:43,500
Bears, a little explanation.

1226
00:49:43,600 --> 00:49:43,900
Again.

1227
00:49:43,900 --> 00:49:47,200
We this has been a pretty good stream in terms of having plenty of

1228
00:49:47,200 --> 00:49:48,000
time to talk about stuff.

1229
00:49:48,000 --> 00:49:49,100
So I'm just going to say what I'm doing here.

1230
00:49:49,100 --> 00:49:52,100
So basically this L program is a bit field, that's got a bunch of bits

1231
00:49:52,100 --> 00:49:52,600
set.

1232
00:49:52,600 --> 00:49:55,900
It said that the 30th bit tells us whether or not the key used to be

1233
00:49:55,900 --> 00:49:59,700
down or used to be up before this message before the before, whatever.

1234
00:50:00,000 --> 00:50:01,300
Event triggered this message.

1235
00:50:02,300 --> 00:50:05,400
Well, if I just add those together, then what I'm going to get is, I'm

1236
00:50:05,400 --> 00:50:06,800
not going to get 0 or 1.

1237
00:50:07,100 --> 00:50:11,500
I'm going to get 0 or B 30 being set, which is way not one.

1238
00:50:12,200 --> 00:50:15,500
And since I wanted to sanitize it into a 0 in one potentially, since I

1239
00:50:15,500 --> 00:50:16,500
was going to put it in a pool.

1240
00:50:16,500 --> 00:50:16,900
I don't know.

1241
00:50:16,900 --> 00:50:19,000
I don't really have to put it in the pool for any particular reason.

1242
00:50:19,000 --> 00:50:21,200
We'll talk about that kind of a little later on.

1243
00:50:21,200 --> 00:50:22,700
Maybe maybe we can talk about that tonight.

1244
00:50:22,700 --> 00:50:23,500
If we got extra time.

1245
00:50:24,100 --> 00:50:26,700
I just said not equal to 0 that comparison.

1246
00:50:26,700 --> 00:50:29,000
If you remember from the in produce interest East room, we're talking

1247
00:50:29,000 --> 00:50:29,400
about it.

1248
00:50:29,900 --> 00:50:33,400
And I think I was actually even a little unsure about it at the time,

1249
00:50:33,400 --> 00:50:35,600
which is kind of odd considering the fact that I would have known that

1250
00:50:35,600 --> 00:50:36,100
this happened.

1251
00:50:36,100 --> 00:50:39,800
But what you gonna do sometimes in your on stream, your little crazy.

1252
00:50:40,200 --> 00:50:43,700
Basically what happens is if you ask see to do a comparison for you,

1253
00:50:43,700 --> 00:50:45,100
it will produce 0 or 1.

1254
00:50:45,100 --> 00:50:49,000
So if we do not equal to 0 that will actually produce a 0 or 1

1255
00:50:49,000 --> 00:50:53,300
depending on whether it was 0 or the B 30, so that's basically just

1256
00:50:53,300 --> 00:50:59,800
turning, it's basically turning you know, this we got back either this

1257
00:51:00,100 --> 00:51:01,700
40, right?

1258
00:51:01,700 --> 00:51:08,500
We got either that or this but we wanted was this or that right?

1259
00:51:08,500 --> 00:51:11,600
We wanted we wanted this one to turn into one and this one to turn

1260
00:51:11,600 --> 00:51:15,700
into zero and so the not equal to 0 just basically forces that to

1261
00:51:15,700 --> 00:51:16,600
happen, right?

1262
00:51:16,600 --> 00:51:17,400
That's about it.

1263
00:51:17,700 --> 00:51:20,500
All right, so that's a was down and then I also want an is down

1264
00:51:20,500 --> 00:51:20,800
meaning.

1265
00:51:20,800 --> 00:51:23,600
What actually was this message trying to tell us?

1266
00:51:23,900 --> 00:51:28,000
And so let's take a look at back to the WM key down message.

1267
00:51:28,100 --> 00:51:29,900
And what does that actually stay?

1268
00:51:30,200 --> 00:51:32,500
Okay, the transition state.

1269
00:51:32,700 --> 00:51:36,600
What is the transition state defined to be always 0 for a key down

1270
00:51:36,600 --> 00:51:37,200
message.

1271
00:51:37,400 --> 00:51:39,100
So what is the key up message?

1272
00:51:39,400 --> 00:51:42,900
Is it always that as well always one.

1273
00:51:43,100 --> 00:51:44,400
Alright, so the transition state.

1274
00:51:44,400 --> 00:51:49,300
So basically the other bit will tell us what actually is now.

1275
00:51:49,400 --> 00:51:54,600
So basically if that bit is set, am I correct for a key up message?

1276
00:51:54,700 --> 00:51:55,700
It's always one.

1277
00:51:55,900 --> 00:51:59,800
So we want it to be equal to zero if it's down now.

1278
00:52:00,000 --> 00:52:01,000
Now, is that correct?

1279
00:52:01,200 --> 00:52:02,200
Because Kiev?

1280
00:52:03,300 --> 00:52:04,400
So let's take a look.

1281
00:52:04,800 --> 00:52:05,500
Basically.

1282
00:52:05,600 --> 00:52:08,800
I'll go ahead and test this with say the Escape key.

1283
00:52:09,000 --> 00:52:13,000
So when we put that I'll do an output debug string and I'll just do a

1284
00:52:13,000 --> 00:52:14,700
test on is down.

1285
00:52:15,400 --> 00:52:25,400
Alright, let's see, do it this way and was down, right?

1286
00:52:25,800 --> 00:52:31,800
So we'll do output, debug string, escape and then we'll say is down.

1287
00:52:33,800 --> 00:52:34,600
Was down.

1288
00:52:37,200 --> 00:52:37,600
Excuse me.

1289
00:52:37,600 --> 00:52:38,200
I'm still sick.

1290
00:52:38,200 --> 00:52:38,700
Ladies and gentleman.

1291
00:52:38,700 --> 00:52:39,300
This true.

1292
00:52:39,400 --> 00:52:40,900
I did not recover much over the weekend.

1293
00:52:40,900 --> 00:52:45,600
Unfortunately, then when I run this I should be able to kind of go in

1294
00:52:45,600 --> 00:52:46,100
here.

1295
00:52:46,500 --> 00:52:50,300
Take a, look at that output stream and do my Escape key.

1296
00:52:50,900 --> 00:52:54,000
Well, that did not work particularly well to say the least.

1297
00:52:54,600 --> 00:52:55,500
Why is my Escape key?

1298
00:52:55,500 --> 00:52:56,100
Not working.

1299
00:52:56,400 --> 00:52:58,700
Oh, that looks like it didn't compile.

1300
00:52:59,600 --> 00:53:00,300
What happened there?

1301
00:53:00,900 --> 00:53:03,400
Why it how did that happen?

1302
00:53:03,400 --> 00:53:07,300
I thought I compiled it and yet it was still printing out W, which we

1303
00:53:07,300 --> 00:53:08,200
deleted.

1304
00:53:08,300 --> 00:53:09,800
So I guess I didn't compile.

1305
00:53:10,400 --> 00:53:11,100
I don't know what happened there.

1306
00:53:11,100 --> 00:53:12,700
That clearly looks like I compiled.

1307
00:53:13,000 --> 00:53:15,300
Maybe, I maybe I did something else wrong.

1308
00:53:16,100 --> 00:53:16,700
There it goes.

1309
00:53:16,900 --> 00:53:20,000
Yeah, I don't know, ladies and gentleman programming so he's a little

1310
00:53:20,000 --> 00:53:20,500
wonky.

1311
00:53:22,800 --> 00:53:27,000
Okay, so I hold it down is down and it was down.

1312
00:53:27,000 --> 00:53:27,400
That's correct.

1313
00:53:27,400 --> 00:53:28,300
So I am getting key.

1314
00:53:28,300 --> 00:53:29,100
Repeat messages.

1315
00:53:29,100 --> 00:53:30,300
So I get them repeatedly.

1316
00:53:30,400 --> 00:53:34,500
Then when I let go, I get just was down and that's correct.

1317
00:53:35,300 --> 00:53:35,700
Yeah.

1318
00:53:36,900 --> 00:53:37,500
Perfect.

1319
00:53:38,000 --> 00:53:40,000
So looks like that's all good.

1320
00:53:40,300 --> 00:53:41,700
Basically, we have everything we need here.

1321
00:53:41,700 --> 00:53:43,500
We don't need those key repeat messages.

1322
00:53:43,600 --> 00:53:46,300
So, one thing that we could do if we wanted to is, we could just kind

1323
00:53:46,300 --> 00:53:47,000
of get rid of them.

1324
00:53:47,500 --> 00:53:50,300
We could basically say that if was down equals 2 is down.

1325
00:53:50,300 --> 00:53:52,100
This is not an interesting message for us.

1326
00:53:52,300 --> 00:53:53,200
If that makes sense.

1327
00:53:53,500 --> 00:53:55,700
We could just flat out, say that.

1328
00:53:55,900 --> 00:53:59,700
And then when we run in here, we will basically be

1329
00:54:00,000 --> 00:54:02,300
Those key repeats, right?

1330
00:54:02,300 --> 00:54:02,800
Let's see.

1331
00:54:02,800 --> 00:54:03,500
There we go.

1332
00:54:03,600 --> 00:54:05,000
He's down was down.

1333
00:54:05,000 --> 00:54:05,800
No poop.

1334
00:54:06,200 --> 00:54:06,700
So I do that.

1335
00:54:06,700 --> 00:54:07,500
The wrong way again.

1336
00:54:08,600 --> 00:54:09,600
Yeah, awesome.

1337
00:54:11,200 --> 00:54:12,000
I do that all the time.

1338
00:54:12,000 --> 00:54:13,300
People all the time.

1339
00:54:13,300 --> 00:54:15,700
What I wanted to do was say if if they're not equal.

1340
00:54:15,700 --> 00:54:16,100
I want it.

1341
00:54:16,100 --> 00:54:21,100
If it wasn't down and now it is or if it is and if it was and then now

1342
00:54:21,100 --> 00:54:21,600
it isn't.

1343
00:54:21,600 --> 00:54:22,800
So I want them to be not equal.

1344
00:54:22,900 --> 00:54:24,400
I basically filtered for the case.

1345
00:54:24,400 --> 00:54:26,600
We don't want that's brilliant.

1346
00:54:26,600 --> 00:54:28,400
That'll help a ton way to go.

1347
00:54:28,900 --> 00:54:30,100
Good job.

1348
00:54:30,400 --> 00:54:31,300
So there we go.

1349
00:54:31,800 --> 00:54:32,800
That's what we wanted.

1350
00:54:32,900 --> 00:54:34,100
Yeah, exactly.

1351
00:54:34,200 --> 00:54:34,800
Perfect.

1352
00:54:35,300 --> 00:54:38,100
So that's really all we want and that is pretty much the

1353
00:54:38,400 --> 00:54:39,600
Ready of key input as well.

1354
00:54:39,700 --> 00:54:40,500
That's it.

1355
00:54:40,700 --> 00:54:41,500
So we've got input.

1356
00:54:41,500 --> 00:54:41,800
Now.

1357
00:54:42,300 --> 00:54:45,200
We just need a game to funnel it to and like I said, we don't want

1358
00:54:45,200 --> 00:54:45,300
this.

1359
00:54:45,300 --> 00:54:47,800
I mean, this is not good code, that's going to do anything useful for

1360
00:54:47,800 --> 00:54:48,000
us.

1361
00:54:48,000 --> 00:54:49,700
I just want to put in there so you can show how to get it.

1362
00:54:49,700 --> 00:54:51,900
Everything once we actually have something to fill out.

1363
00:54:51,900 --> 00:54:54,600
What we'll be doing, is in here.

1364
00:54:54,700 --> 00:54:58,000
We'll just go ahead and say, okay, let's pass.

1365
00:54:58,600 --> 00:55:01,000
Let's let's fill out the stuff that we're going to pass through the

1366
00:55:01,000 --> 00:55:02,900
game by using these things.

1367
00:55:02,900 --> 00:55:03,900
So that's all we're going to do.

1368
00:55:03,900 --> 00:55:05,100
Well, here we are at the five minute warning.

1369
00:55:05,100 --> 00:55:07,200
We have already accomplished, everything that I want to accomplish on

1370
00:55:07,200 --> 00:55:07,700
that stream.

1371
00:55:08,300 --> 00:55:10,600
Let me think if there's other things that I might want to do real

1372
00:55:10,600 --> 00:55:11,100
quick.

1373
00:55:11,200 --> 00:55:14,900
One thing I want to do is I got email from people over the weekend.

1374
00:55:15,100 --> 00:55:16,800
This was supposed to be a win Class.

1375
00:55:16,800 --> 00:55:16,900
A.

1376
00:55:16,900 --> 00:55:21,100
Remember, I was in trying specifically to make everything be a is

1377
00:55:21,100 --> 00:55:21,900
where they should be.

1378
00:55:22,300 --> 00:55:25,700
And so load library is also an a kind of a thing.

1379
00:55:26,200 --> 00:55:29,600
So I'm going to try and go in here and just pass a to everything so

1380
00:55:29,600 --> 00:55:32,500
that we know that we're not using Unicode for the benefit of people at

1381
00:55:32,500 --> 00:55:32,700
home.

1382
00:55:32,700 --> 00:55:35,100
Just make it a little easier for them if they're compiling in Unicode

1383
00:55:35,100 --> 00:55:36,400
mode, since we are not.

1384
00:55:36,600 --> 00:55:38,200
If they are for some reason, trying

1385
00:55:38,400 --> 00:55:39,800
Do that then.

1386
00:55:39,800 --> 00:55:41,400
Then this will make it a little easier on them.

1387
00:55:41,400 --> 00:55:44,100
Just if we have most of them, correct?

1388
00:55:44,100 --> 00:55:45,300
Okay, I guess I guess.

1389
00:55:45,300 --> 00:55:46,200
Get proc address.

1390
00:55:46,200 --> 00:55:47,400
Only has a Nancy version.

1391
00:55:47,400 --> 00:55:49,900
There is no Unicode version of that.

1392
00:55:50,300 --> 00:55:51,100
So that's good.

1393
00:55:53,000 --> 00:55:54,300
All right, that's all set.

1394
00:55:54,400 --> 00:55:57,900
Let's take a look and see if there's anything else here that I wanted

1395
00:55:57,900 --> 00:56:03,100
to take a look at ya.

1396
00:56:03,400 --> 00:56:04,000
Yes.

1397
00:56:04,000 --> 00:56:05,100
Oh, there is one more.

1398
00:56:05,200 --> 00:56:07,500
One of the things I was thinking about over the weekend as I did and I

1399
00:56:07,500 --> 00:56:09,300
asked some friends about it too, just to be sure.

1400
00:56:09,500 --> 00:56:11,600
I decided I don't really like this passing by value.

1401
00:56:11,600 --> 00:56:12,700
I mentioned it real quickly.

1402
00:56:12,700 --> 00:56:16,400
I was talking about passing win32 off-screen buffer by valuing, really

1403
00:56:16,400 --> 00:56:19,000
passing something by valued in the hopes that's going to optimize

1404
00:56:19,000 --> 00:56:22,100
stuff when it's that big, but it's something that large which is that

1405
00:56:22,100 --> 00:56:22,600
is a fairly large.

1406
00:56:22,800 --> 00:56:23,200
Dropped.

1407
00:56:23,800 --> 00:56:27,300
It's more than, you know, it's not like a tiny little struct.

1408
00:56:27,300 --> 00:56:28,600
It's fairly sizable.

1409
00:56:29,200 --> 00:56:29,500
I think.

1410
00:56:29,500 --> 00:56:33,000
In general, you're counting on inlining, you're counting on on the

1411
00:56:33,000 --> 00:56:34,700
optimizer inlining this before.

1412
00:56:34,700 --> 00:56:36,300
It's really going to get a win out of that.

1413
00:56:36,300 --> 00:56:38,400
And if it doesn't in line at then it's going to be a problem because

1414
00:56:38,400 --> 00:56:39,800
it's going to force copies stuff like that.

1415
00:56:39,800 --> 00:56:42,100
So I want to actually go back to the way I normally code.

1416
00:56:42,100 --> 00:56:45,000
I kind of did that for the benefit benefit of the people watching but

1417
00:56:45,000 --> 00:56:47,000
you know, honestly, it's not something I would actually do.

1418
00:56:47,100 --> 00:56:49,600
So I'm just going to go ahead and change it to the way that I actually

1419
00:56:49,600 --> 00:56:52,600
do do things and not try to be overly clever.

1420
00:56:52,700 --> 00:56:53,400
Over on the stream.

1421
00:56:53,400 --> 00:56:54,600
I think that was a mistake.

1422
00:56:55,200 --> 00:56:58,300
And so I'm just going to actually kind of rearrange a code here and

1423
00:56:58,500 --> 00:56:59,700
just make it a little bit.

1424
00:57:00,200 --> 00:57:01,900
More like what I would normally do.

1425
00:57:02,600 --> 00:57:05,200
And just because I think that's the right thing to stick to, I mean I

1426
00:57:05,200 --> 00:57:08,800
should stick to how I code and if I want to mention something that

1427
00:57:08,800 --> 00:57:11,600
other people do and say you could try to do this or investigate on

1428
00:57:11,600 --> 00:57:11,900
your own.

1429
00:57:11,900 --> 00:57:15,100
I think that's good, but I shouldn't try to do things that aren't the

1430
00:57:15,100 --> 00:57:15,600
sort of things.

1431
00:57:15,600 --> 00:57:18,800
I normally do just because they might be better, or maybe they're

1432
00:57:18,800 --> 00:57:23,000
newer ways of doing things because at the end of the day, I have no

1433
00:57:23,000 --> 00:57:26,100
guarantee that they are actually correct and I may just be leading you

1434
00:57:26,600 --> 00:57:27,200
astray.

1435
00:57:27,200 --> 00:57:29,700
So I'm going to go ahead and just clean that code up a little bit and

1436
00:57:29,700 --> 00:57:29,900
make

1437
00:57:30,000 --> 00:57:31,600
That look a little bit more.

1438
00:57:31,800 --> 00:57:34,400
Like what I would have expected.

1439
00:57:34,700 --> 00:57:38,100
Okay, so we are almost done with that.

1440
00:57:38,900 --> 00:57:39,700
There we go.

1441
00:57:40,100 --> 00:57:43,700
And now we are compiling again.

1442
00:57:44,100 --> 00:57:45,600
And I think that is it.

1443
00:57:46,000 --> 00:57:47,700
We are still in good shape here.

1444
00:57:48,700 --> 00:57:49,700
We've got three minutes.

1445
00:57:49,700 --> 00:57:52,300
I don't know what else we should try to throw in here in the three

1446
00:57:52,300 --> 00:57:52,800
minutes.

1447
00:57:53,500 --> 00:57:53,900
I guess.

1448
00:57:53,900 --> 00:57:58,300
One thing we could do is we could go take a look at the set cursor

1449
00:57:58,300 --> 00:57:59,800
situation since we're

1450
00:58:00,000 --> 00:58:02,600
Not saying the cursor, we could try to throw full screen there.

1451
00:58:02,600 --> 00:58:04,100
Two minutes out of know, that two minutes.

1452
00:58:04,200 --> 00:58:05,600
Maybe we just go to Q&A early.

1453
00:58:05,600 --> 00:58:07,000
Maybe we just say that was a good day.

1454
00:58:07,000 --> 00:58:08,900
We got everything done that we wanted to get done.

1455
00:58:09,700 --> 00:58:12,800
We've got input in and so we'll have the rest of the week to work on

1456
00:58:12,800 --> 00:58:15,000
sound which is really the only thing.

1457
00:58:15,000 --> 00:58:18,500
Well, you got two things really sound and file I/O.

1458
00:58:18,800 --> 00:58:22,200
So if we can get through sound and three days, we could do file I/O on

1459
00:58:22,200 --> 00:58:26,600
Friday, and then we would pretty much be ready to get going on the

1460
00:58:26,600 --> 00:58:27,000
game.

1461
00:58:27,000 --> 00:58:29,900
Proper the following week, which would be great, two weeks.

1462
00:58:30,000 --> 00:58:32,000
On Windows, it's not very much to spend.

1463
00:58:32,800 --> 00:58:35,600
I mean, that is longer often times.

1464
00:58:35,900 --> 00:58:38,800
I'm sorry that is shorter often times and it takes to figure out why

1465
00:58:38,800 --> 00:58:41,400
your CSS isn't working on when you're trying to make a web page.

1466
00:58:41,400 --> 00:58:42,900
So I think that's probably pretty good.

1467
00:58:43,800 --> 00:58:47,500
All right, I will go ahead and go to the stream now to see what is

1468
00:58:47,500 --> 00:58:49,800
going on over there.

1469
00:58:53,700 --> 00:58:54,600
Let's take a look.

1470
00:58:57,800 --> 00:58:58,900
To do.

1471
00:59:04,700 --> 00:59:06,600
Can you write a driver to make it work piece?

1472
00:59:06,600 --> 00:59:07,700
Okay, L.

1473
00:59:07,700 --> 00:59:11,500
/ m, 30 is always one for WM key up.

1474
00:59:14,400 --> 00:59:17,000
Yes, that is should be true.

1475
00:59:18,600 --> 00:59:19,900
But that's okay.

1476
00:59:20,300 --> 00:59:21,400
We don't care.

1477
00:59:22,300 --> 00:59:23,900
I'm not sure why that would matter that.

1478
00:59:23,900 --> 00:59:25,400
We don't we don't actually care if that's true.

1479
00:59:25,400 --> 00:59:25,700
Right?

1480
00:59:25,700 --> 00:59:29,000
Because as long we just want to make sure that we're turning whatever

1481
00:59:29,000 --> 00:59:31,300
these four messages, these four separate ways.

1482
00:59:31,300 --> 00:59:32,900
That wind is going to tell us about key events.

1483
00:59:34,100 --> 00:59:36,600
We just want to make sure that we turn them into something reliable

1484
00:59:36,800 --> 00:59:40,100
and whether it was down, whether it is down or usually pretty reliable

1485
00:59:40,100 --> 00:59:44,000
things in my mind because it kind of lets, you know, which direction

1486
00:59:44,000 --> 00:59:44,300
your go.

1487
00:59:44,300 --> 00:59:47,400
It kind of makes it so that no matter what the message was, you end up

1488
00:59:47,400 --> 00:59:49,400
with a stable state that you can record in here.

1489
00:59:49,400 --> 00:59:52,300
So it was just kind of a way of decrypting that into something easier.

1490
00:59:56,600 --> 00:59:57,800
Okay.

1491
00:59:58,900 --> 00:59:59,800
Not a Christmas tree.

1492
01:00:00,000 --> 01:00:02,700
And why uppercase variable names, really?

1493
01:00:02,700 --> 01:00:04,600
It's something that I got in the habit of doing it.

1494
01:00:04,600 --> 01:00:07,700
My very first thing which is was partnering with Chris Tucker.

1495
01:00:07,700 --> 01:00:10,400
Actually, there is no reason for it.

1496
01:00:10,400 --> 01:00:11,700
It's just how things were done.

1497
01:00:11,700 --> 01:00:12,900
And that's what stuck with me.

1498
01:00:13,500 --> 01:00:16,400
I don't, I don't think there's a right or wrong way to capitalize your

1499
01:00:16,500 --> 01:00:17,900
variables or anything else.

1500
01:00:21,500 --> 01:00:22,400
Okay.

1501
01:00:22,400 --> 01:00:25,200
Can you explain your macro and referencing the X input functions?

1502
01:00:25,200 --> 01:00:25,900
Again?

1503
01:00:26,200 --> 01:00:27,200
I certainly can.

1504
01:00:28,300 --> 01:00:29,800
Let's see here.

1505
01:00:31,100 --> 01:00:32,100
so,

1506
01:00:34,200 --> 01:00:35,200
In here.

1507
01:00:36,400 --> 01:00:41,800
What I did was I said, well, this is the function prototype that

1508
01:00:41,800 --> 01:00:45,100
Windows made for xinput.

1509
01:00:45,100 --> 01:00:46,300
Get state, right?

1510
01:00:46,300 --> 01:00:49,800
This is this is what it looks like in the windows header file.

1511
01:00:50,300 --> 01:00:55,900
So what I did is I replace the name xinput, get state with basically a

1512
01:00:56,100 --> 01:00:57,200
macro parameter.

1513
01:00:57,400 --> 01:01:01,100
So that allows us to make as many functions of this signature.

1514
01:01:01,100 --> 01:01:04,100
As we want, just by using this macro, right?

1515
01:01:04,100 --> 01:01:06,000
This macro will basically generate the

1516
01:01:06,100 --> 01:01:07,600
Signature and swapping.

1517
01:01:07,600 --> 01:01:08,100
Whatever name.

1518
01:01:08,100 --> 01:01:08,700
We give it.

1519
01:01:09,400 --> 01:01:14,000
So to define a type that is that signature, right?

1520
01:01:14,000 --> 01:01:16,200
The type is this function signature.

1521
01:01:16,400 --> 01:01:21,400
I just do typedef that I let the macro expand this thing out with the

1522
01:01:21,400 --> 01:01:25,000
name that I want my typedef to have, right?

1523
01:01:25,500 --> 01:01:28,000
Then I do the exact same thing to generate.

1524
01:01:28,000 --> 01:01:31,700
It again only this time with a different name and that generates the

1525
01:01:31,700 --> 01:01:35,200
function, the actual header, for my function, which I then have return

1526
01:01:35,200 --> 01:01:35,700
0.

1527
01:01:36,700 --> 01:01:39,300
Finally, I make a global variable that points to it.

1528
01:01:39,300 --> 01:01:47,000
And then I I define basically xinput, get state from now on to, to use

1529
01:01:47,000 --> 01:01:51,400
my new pointer that I declared because I can't undefined the one that

1530
01:01:51,400 --> 01:01:51,900
Windows had.

1531
01:01:51,900 --> 01:01:55,700
So I just renamed basically everything from here, on out to use this

1532
01:01:55,700 --> 01:01:56,000
one.

1533
01:01:56,700 --> 01:01:58,500
There's really nothing magic going on here.

1534
01:01:58,700 --> 01:02:04,300
It's I guess it is something that only I do because I posted an or

1535
01:02:04,300 --> 01:02:06,000
maybe other people do it, but I've never heard.

1536
01:02:06,100 --> 01:02:11,300
It it's basically something that I posted in a one of my windows Dev

1537
01:02:11,300 --> 01:02:13,500
blog entries and I got email from people going.

1538
01:02:13,500 --> 01:02:14,900
Like I never seen that before.

1539
01:02:15,000 --> 01:02:16,300
That's pretty cool or something like that.

1540
01:02:16,300 --> 01:02:20,600
So I guess it's not that common but I it's the only way I ever do it.

1541
01:02:21,300 --> 01:02:25,800
So the way I the only way I ever do function pointers is I pound

1542
01:02:25,800 --> 01:02:28,400
Define a thing that generates the signature.

1543
01:02:29,100 --> 01:02:33,800
I type def using that macro using the pound to find.

1544
01:02:33,900 --> 01:02:35,400
I make the type def to the type.

1545
01:02:35,500 --> 01:02:35,900
I

1546
01:02:36,000 --> 01:02:36,300
Fine.

1547
01:02:36,300 --> 01:02:40,100
The pointer by using that new typedef, right?

1548
01:02:40,600 --> 01:02:43,100
And I Define the stubs by using the macro.

1549
01:02:44,300 --> 01:02:47,800
Just works really well because especially it works, especially well,

1550
01:02:47,800 --> 01:02:50,300
you'll see later on when we want to do dispatch tables or something

1551
01:02:50,300 --> 01:02:53,000
like that, and you've got a lot of functions that all have the same

1552
01:02:53,000 --> 01:02:56,200
signature and you want to be able to change them trivially, having

1553
01:02:56,200 --> 01:02:56,700
them all go through.

1554
01:02:56,700 --> 01:02:59,300
This macro means you can just change one line and have all your

1555
01:02:59,300 --> 01:02:59,900
functions.

1556
01:03:00,100 --> 01:03:00,700
Function signatures.

1557
01:03:00,700 --> 01:03:01,400
It's pretty cool.

1558
01:03:08,600 --> 01:03:09,800
Let's see.

1559
01:03:15,800 --> 01:03:16,600
What's the size?

1560
01:03:16,600 --> 01:03:17,100
We're copying?

1561
01:03:17,100 --> 01:03:19,000
Becomes problematic for a struct?

1562
01:03:19,000 --> 01:03:19,400
I don't know.

1563
01:03:19,400 --> 01:03:20,400
You'd have to time it.

1564
01:03:20,400 --> 01:03:22,000
It probably depends on the platform.

1565
01:03:22,500 --> 01:03:26,400
But in certain cases, like, for wrecked, for example, we still were

1566
01:03:26,400 --> 01:03:28,100
passing that one by value for a while.

1567
01:03:28,100 --> 01:03:28,700
And earlier.

1568
01:03:28,700 --> 01:03:30,900
We're not doing anymore cuz you don't pass the rectangle thing, but

1569
01:03:30,900 --> 01:03:35,300
something like rekt where it's 3:30 for 32-bit values or something

1570
01:03:35,300 --> 01:03:35,700
like that.

1571
01:03:35,700 --> 01:03:36,000
I don't know.

1572
01:03:36,000 --> 01:03:36,700
Let's take a look.

1573
01:03:36,700 --> 01:03:37,500
I don't actually remember.

1574
01:03:37,500 --> 01:03:39,900
I think it's for 32-bit values in a wrecked, right?

1575
01:03:42,200 --> 01:03:46,700
Yeah, so if you have something like for 32-bit values that seems like

1576
01:03:46,700 --> 01:03:50,000
something you probably want to just pass by value because you know, I

1577
01:03:50,000 --> 01:03:53,200
mean you wouldn't you wouldn't bat an eyelash right at having a

1578
01:03:53,200 --> 01:03:57,900
function where you were going to do something like, you know, in Star

1579
01:03:57,900 --> 01:04:03,000
a in Star be right, but in 64-bit code, that right there is 128 bits,

1580
01:04:03,000 --> 01:04:04,700
which is the size of the wreck struct.

1581
01:04:05,300 --> 01:04:07,000
So it's really not a big deal with something small like that.

1582
01:04:07,000 --> 01:04:08,400
But once it gets big enough,

1583
01:04:10,000 --> 01:04:13,000
Yeah, I would say, you know, you don't risk it, pass a pointer.

1584
01:04:13,000 --> 01:04:16,300
Now, the problem is, how do you know where that breaking point is?

1585
01:04:16,300 --> 01:04:19,500
And the thing that I want to emphasize, this is something that I

1586
01:04:19,500 --> 01:04:21,600
actually wrote down here that I want to talk about.

1587
01:04:21,600 --> 01:04:24,400
And I'm glad it came up because I was going to kind of force the issue

1588
01:04:25,100 --> 01:04:27,300
here in the Q&A, if it didn't, but

1589
01:04:28,600 --> 01:04:30,800
Basically something that I want to get across that, I didn't do a good

1590
01:04:30,800 --> 01:04:31,800
job of getting cross.

1591
01:04:32,000 --> 01:04:37,400
In fact, I probably exacerbated the situation last week is don't think

1592
01:04:37,500 --> 01:04:42,600
about optimization at a low level until you actually are optimizing it

1593
01:04:42,600 --> 01:04:43,200
a low level.

1594
01:04:43,500 --> 01:04:45,800
Because if you're constantly thinking about how to optimize your code

1595
01:04:45,800 --> 01:04:48,900
to the low level, you're probably just wasting your time because low

1596
01:04:48,900 --> 01:04:52,300
level optimization is very difficult and very specific.

1597
01:04:52,400 --> 01:04:56,000
And a lot of times if you're like, oh I'm typing along and I decide to

1598
01:04:56,000 --> 01:04:57,500
pass this thing by value because it'll be

1599
01:04:57,600 --> 01:05:00,900
Faster, you don't know if it's faster and you're not going to spend

1600
01:05:00,900 --> 01:05:02,800
the time right now to check, right?

1601
01:05:02,800 --> 01:05:05,300
And there's so many things that are interdependent in low-level

1602
01:05:05,300 --> 01:05:08,900
optimization that you're just likely to be wrong all the time.

1603
01:05:09,100 --> 01:05:14,000
So, what I'd like to emphasize is program in a way that doesn't create

1604
01:05:14,200 --> 01:05:15,700
obviously bad things.

1605
01:05:15,800 --> 01:05:18,700
Like don't do anything that's going to be disastrously bad.

1606
01:05:19,600 --> 01:05:23,900
But other than that, try not to constantly focus on anything low-level

1607
01:05:23,900 --> 01:05:26,900
optimization wise because you're probably just wasting your time

1608
01:05:26,900 --> 01:05:27,500
thinking about that.

1609
01:05:27,700 --> 01:05:30,400
Might be actually making things worse by doing things assuming that

1610
01:05:30,400 --> 01:05:32,200
they're helping in their actually hurting and so on.

1611
01:05:33,300 --> 01:05:36,400
So, I would say you want to write your code in ways that are nice and

1612
01:05:36,400 --> 01:05:40,500
clean and simple because that is what will be easy to optimize later.

1613
01:05:40,500 --> 01:05:43,600
So you should always be thinking about that, but don't spend too much

1614
01:05:43,600 --> 01:05:48,000
time thinking about how to do like crazy little optimizations.

1615
01:05:48,500 --> 01:05:53,000
For example, in fact, someone just just said, this, they were saying

1616
01:05:53,100 --> 01:05:54,600
instead of writing it this way.

1617
01:05:54,700 --> 01:05:57,000
Why not write it this way, right?

1618
01:05:57,600 --> 01:05:59,500
And then not have to do that thing.

1619
01:06:00,100 --> 01:06:03,800
And the answer is because that's just, that's way more obtuse, right

1620
01:06:04,200 --> 01:06:05,000
at some level.

1621
01:06:05,400 --> 01:06:07,900
It's just more confusing to look at that.

1622
01:06:07,900 --> 01:06:08,200
Really?

1623
01:06:08,200 --> 01:06:13,100
What you probably should do in this code, is something more like this.

1624
01:06:13,100 --> 01:06:14,200
You should say, like,

1625
01:06:16,300 --> 01:06:21,600
W like like he message was down bit, right?

1626
01:06:21,600 --> 01:06:24,400
Like this, you know, or something like that.

1627
01:06:24,600 --> 01:06:29,200
And just so that you actually are actually testing against things that

1628
01:06:29,200 --> 01:06:30,200
make some sense.

1629
01:06:30,700 --> 01:06:34,000
If you know what I mean, this is probably an even better way to write

1630
01:06:34,000 --> 01:06:37,100
this because the compiler is not dumb and it's probably going to be

1631
01:06:37,100 --> 01:06:39,600
able to generate the right code out of this either way.

1632
01:06:40,700 --> 01:06:44,800
So, you know, that's just, that's just a cleaner way to do it in my

1633
01:06:44,800 --> 01:06:45,300
opinion.

1634
01:06:47,000 --> 01:06:48,100
Yeah, I don't know.

1635
01:06:48,700 --> 01:06:50,500
But either way, I don't really care again.

1636
01:06:50,500 --> 01:06:52,000
Like, you should write those sorts of things.

1637
01:06:52,000 --> 01:06:53,500
However, you want to write them.

1638
01:06:53,900 --> 01:06:54,300
Whatever.

1639
01:06:54,300 --> 01:06:56,600
Makes it cleanest and easiest for you, to understand.

1640
01:06:56,600 --> 01:07:00,100
And remember because this is the kind of thing that really just

1641
01:07:00,100 --> 01:07:03,500
doesn't want to be done at this stage in the code.

1642
01:07:03,600 --> 01:07:07,100
If you are thinking about how to write this more optimally, you are

1643
01:07:07,100 --> 01:07:11,300
totally wasting your time because a, the compiler will probably do the

1644
01:07:11,300 --> 01:07:11,700
right thing.

1645
01:07:11,700 --> 01:07:14,600
No matter what you write on that line, because it's so simple and be.

1646
01:07:14,600 --> 01:07:15,300
If the compiler is

1647
01:07:15,500 --> 01:07:18,800
Doing the right thing rather than guessing, what will be the right

1648
01:07:18,800 --> 01:07:20,200
thing for to make the compiler.

1649
01:07:20,200 --> 01:07:23,000
Do you actually should if you're like, I got to optimize this.

1650
01:07:23,000 --> 01:07:24,300
Now, you should look at the assembly.

1651
01:07:24,300 --> 01:07:27,800
See what's generated, verify the thing that your writing is faster and

1652
01:07:27,800 --> 01:07:31,000
then, you know, and so I really want to make sure that people aren't

1653
01:07:31,000 --> 01:07:32,400
getting hung up on this.

1654
01:07:32,900 --> 01:07:35,400
I'm talking about low-level programming because that's I like the

1655
01:07:35,400 --> 01:07:36,200
control.

1656
01:07:36,600 --> 01:07:40,000
And I like to be able to do the optimal things and we will be getting

1657
01:07:40,000 --> 01:07:43,000
to those sorts of things, but I don't want to create some kind of a

1658
01:07:43,000 --> 01:07:45,300
thing where people are thinking they always have to be thinking

1659
01:07:45,400 --> 01:07:47,900
About exactly what the compiler is going to do and how to make it the

1660
01:07:47,900 --> 01:07:51,800
most optimal because that's actually going to cross into unproductive.

1661
01:07:52,300 --> 01:07:54,300
So you need to know what your code is doing.

1662
01:07:54,400 --> 01:07:58,000
You need to know what you're telling the CPU to do, but between you

1663
01:07:58,000 --> 01:08:00,900
and the CPU there is that compiler and it will do inefficient things

1664
01:08:01,400 --> 01:08:04,200
and you don't have to always worry about wrestling with it.

1665
01:08:04,700 --> 01:08:06,800
The time will come when we start to wrestle with it.

1666
01:08:06,800 --> 01:08:09,800
But until that comes, you know, maybe just try not to fixate too much

1667
01:08:09,800 --> 01:08:10,300
on it.

1668
01:08:14,900 --> 01:08:15,600
Let's see.

1669
01:08:19,899 --> 01:08:21,899
Let's see here.

1670
01:08:28,600 --> 01:08:29,899
How does that Dynamic Linker?

1671
01:08:29,899 --> 01:08:32,300
Find the X input Library installed on the user's machine.

1672
01:08:32,300 --> 01:08:33,600
Is it allowed to link xinput?

1673
01:08:33,600 --> 01:08:35,300
A compile time or distribute the X input?

1674
01:08:35,300 --> 01:08:38,200
Dll alongside Excel to ensure that a lamp Dynamic can find it?

1675
01:08:38,300 --> 01:08:38,700
Okay.

1676
01:08:39,800 --> 01:08:41,100
That is a good question.

1677
01:08:41,899 --> 01:08:44,899
So basically what happens is, when we call load Library, it is going

1678
01:08:44,899 --> 01:08:46,500
to look in a number of places.

1679
01:08:46,700 --> 01:08:50,200
And in fact, I believe and I don't know if this is true anymore, but I

1680
01:08:50,200 --> 01:08:53,000
believe you should be able to actually read it out of the

1681
01:08:53,000 --> 01:08:57,500
documentation here because I think they actually document the series

1682
01:08:57,600 --> 01:08:58,500
of steps.

1683
01:08:58,500 --> 01:08:59,800
It goes through to find the

1684
01:09:00,000 --> 01:09:00,500
File.

1685
01:09:01,000 --> 01:09:03,000
Now, let's take a look if that's actually true.

1686
01:09:03,500 --> 01:09:06,500
Maybe I am totally wrong about that.

1687
01:09:10,300 --> 01:09:14,399
Okay, the tumor.

1688
01:09:16,200 --> 01:09:16,800
Here we go.

1689
01:09:17,200 --> 01:09:18,700
The first direct research is the directory.

1690
01:09:18,700 --> 01:09:21,000
Containing the image file used to create the calling process.

1691
01:09:21,000 --> 01:09:23,399
So first, it will look where our executable is.

1692
01:09:23,399 --> 01:09:23,600
Right?

1693
01:09:23,600 --> 01:09:26,399
Our wherever we installed our eggs e, it'll look there.

1694
01:09:27,399 --> 01:09:30,600
So basically what we could do is we could dump an X input dll that we

1695
01:09:30,600 --> 01:09:33,300
wanted to use into that directory, for example, and then it would

1696
01:09:33,300 --> 01:09:34,200
always load that one.

1697
01:09:35,399 --> 01:09:38,100
Okay, so that's fine.

1698
01:09:38,300 --> 01:09:39,300
Let's take a look here.

1699
01:09:39,800 --> 01:09:42,500
The search paths can be altered by set dll.

1700
01:09:42,500 --> 01:09:45,500
Directory, if a path is specified and there's redirection.

1701
01:09:48,100 --> 01:09:48,300
Yeah.

1702
01:09:48,300 --> 01:09:48,800
Yeah.

1703
01:09:48,899 --> 01:09:52,500
Okay, path.

1704
01:09:52,500 --> 01:09:53,399
Ruble.

1705
01:09:55,200 --> 01:09:57,600
To load a model for a relative path without switching their path.

1706
01:09:57,600 --> 01:09:58,400
Get full path.

1707
01:09:58,400 --> 01:09:59,200
Name here.

1708
01:09:59,200 --> 01:09:59,400
It is.

1709
01:09:59,400 --> 01:10:01,700
Dynamic link Library, search order.

1710
01:10:02,700 --> 01:10:04,100
Factors that affect searching.

1711
01:10:04,100 --> 01:10:04,400
Okay.

1712
01:10:04,400 --> 01:10:06,000
So this is the page you want.

1713
01:10:06,400 --> 01:10:07,500
This is what you want to read.

1714
01:10:07,500 --> 01:10:09,600
If you want to know everywhere that it goes through.

1715
01:10:09,700 --> 01:10:11,900
I'm not going to try and read all this because oh my God, right?

1716
01:10:11,900 --> 01:10:12,800
Like look at all that.

1717
01:10:13,200 --> 01:10:15,800
Suffice to say, We'll look wherever executable is.

1718
01:10:16,100 --> 01:10:18,500
Then it will look and like the Windows system directories and stuff

1719
01:10:18,500 --> 01:10:20,900
which is where stuff gets installed when it's system-wide.

1720
01:10:21,800 --> 01:10:22,400
So,

1721
01:10:23,700 --> 01:10:28,300
If we wanted to ensure that X input X input was redistributed with our

1722
01:10:28,300 --> 01:10:31,200
game, we could do that and we could put it, just we can just put X

1723
01:10:31,200 --> 01:10:33,500
input in our directory, but it's unclear.

1724
01:10:33,500 --> 01:10:34,600
Whether we actually need to do that.

1725
01:10:34,600 --> 01:10:37,700
Because usually, if the person has an X input controller, they will

1726
01:10:37,700 --> 01:10:40,600
have gotten the little redistributable thing that comes with it or

1727
01:10:40,600 --> 01:10:44,200
install, the little helper function, that will install it, or they're

1728
01:10:44,200 --> 01:10:47,300
using Windows 7, which has it installed by default and so on.

1729
01:10:47,300 --> 01:10:49,500
So we probably don't need to do that.

1730
01:10:49,900 --> 01:10:52,400
But if you really wanted to when you did redistribution, yes, you

1731
01:10:52,400 --> 01:10:53,000
could go.

1732
01:10:53,000 --> 01:10:53,300
In fact,

1733
01:10:53,500 --> 01:10:54,500
Might even have one.

1734
01:10:55,900 --> 01:10:59,100
These are typically called redistributable 's and you can look for

1735
01:10:59,100 --> 01:11:01,000
xinput redistributable.

1736
01:11:01,700 --> 01:11:07,400
And there might be a thing which basically says how to do that and

1737
01:11:07,400 --> 01:11:08,500
let's take a look.

1738
01:11:11,600 --> 01:11:11,900
Okay.

1739
01:11:11,900 --> 01:11:16,500
So basically it says here that that there is a redistributable as part

1740
01:11:16,500 --> 01:11:17,900
of the SDK.

1741
01:11:18,200 --> 01:11:21,400
So you may be able to go into the windows SDK and get a little

1742
01:11:21,400 --> 01:11:23,300
redistribute redistributable, but they have

1743
01:11:23,400 --> 01:11:26,200
made for you that you can just run that will install it on the user's

1744
01:11:26,200 --> 01:11:27,100
machine if you want to.

1745
01:11:27,100 --> 01:11:27,700
I don't know.

1746
01:11:27,700 --> 01:11:30,900
I usually try not to do that when I ship stuff, I try to make it so

1747
01:11:30,900 --> 01:11:33,000
that it just works on the user's machine.

1748
01:11:34,700 --> 01:11:38,500
So what I usually do is I load Library the earliest version of the dll

1749
01:11:38,500 --> 01:11:39,400
that I can find.

1750
01:11:39,700 --> 01:11:41,800
That I know will work which in this case is this one.

1751
01:11:42,100 --> 01:11:44,300
And so then I know that almost everyone will just already be on their

1752
01:11:44,300 --> 01:11:46,800
machine and work and if they don't have it, then they don't have it.

1753
01:11:47,200 --> 01:11:52,700
They can always choose to install the X input app thing.

1754
01:11:53,000 --> 01:11:53,300
And then

1755
01:11:53,400 --> 01:11:55,500
they will magically get it so they can always, you know, I can always

1756
01:11:55,500 --> 01:11:59,400
have in the web page if you would like to use a joystick with this and

1757
01:11:59,500 --> 01:11:59,900
and you

1758
01:12:00,000 --> 01:12:03,900
Don't have and you have an older version of Windows, like, Windows XP.

1759
01:12:03,900 --> 01:12:04,700
Just go ahead.

1760
01:12:04,800 --> 01:12:06,100
Go on Microsoft site.

1761
01:12:06,100 --> 01:12:10,600
That, you know, here's the link, download the xinput application and

1762
01:12:10,600 --> 01:12:13,800
install it and then you will magically be able to use the X input with

1763
01:12:13,800 --> 01:12:14,200
your game.

1764
01:12:14,300 --> 01:12:17,600
I tended like to do that a little bit better just because I find that

1765
01:12:17,600 --> 01:12:20,700
most things you can get are already on the Wind persons machine as

1766
01:12:20,700 --> 01:12:24,200
long as you use old backwards compatible stuff and don't force to have

1767
01:12:24,200 --> 01:12:27,100
the like the newest like that's why I didn't put xinput 1.4 here,

1768
01:12:27,300 --> 01:12:27,900
right?

1769
01:12:28,300 --> 01:12:29,800
I find that that's better because then the

1770
01:12:30,000 --> 01:12:30,800
User isn't like.

1771
01:12:30,800 --> 01:12:32,800
Oh I'm running in order to install this game.

1772
01:12:32,800 --> 01:12:35,600
It just installed this crap on my machine and I don't even know what

1773
01:12:35,600 --> 01:12:38,500
half of it was and now there's the DC library and all this other

1774
01:12:38,500 --> 01:12:38,800
stuff.

1775
01:12:38,900 --> 01:12:40,300
You know, I just don't, I don't like that.

1776
01:12:40,300 --> 01:12:42,800
So I try to keep that as minimal as possible for the benefit of the

1777
01:12:42,800 --> 01:12:43,200
user.

1778
01:12:47,600 --> 01:12:48,500
Let's see.

1779
01:12:53,300 --> 01:12:55,800
You had a second part of that question, is it allowed to link xinput

1780
01:12:55,800 --> 01:12:56,600
at compile time?

1781
01:12:58,600 --> 01:13:02,500
So, no, it can't really link it at compile time.

1782
01:13:03,700 --> 01:13:04,900
That's not really an option.

1783
01:13:04,900 --> 01:13:06,200
It has the thing that it's linking.

1784
01:13:06,200 --> 01:13:09,800
Compile time is just an import library that itself calls like this.

1785
01:13:09,900 --> 01:13:14,600
This basically is more or less, what actually happens when your

1786
01:13:14,600 --> 01:13:17,000
program is loaded in Windows, right?

1787
01:13:17,000 --> 01:13:20,400
It's going to go ahead and it's gonna look at the things that were in

1788
01:13:20,400 --> 01:13:21,500
your import libraries.

1789
01:13:21,700 --> 01:13:22,800
It's going to get their

1790
01:13:23,100 --> 01:13:26,600
This is much like this and then the only difference is instead of it

1791
01:13:26,600 --> 01:13:30,200
like instead of it being pointers that we manually dealt with like we

1792
01:13:30,200 --> 01:13:30,600
did here.

1793
01:13:30,600 --> 01:13:32,000
It's just going to patch them in.

1794
01:13:32,000 --> 01:13:35,300
It's going to patch those pointers into direct memory locations in

1795
01:13:35,300 --> 01:13:37,800
your executable, but it's basically the exact same process.

1796
01:13:38,000 --> 01:13:39,200
So that's just what's going to happen.

1797
01:13:39,200 --> 01:13:41,600
If we didn't do this Windows, just doing it for us.

1798
01:13:41,600 --> 01:13:44,700
And that's how Windows is, you know, Windows is already doing that for

1799
01:13:44,700 --> 01:13:47,100
a bunch of functions for us, like, get client wrecked and so on,

1800
01:13:47,200 --> 01:13:48,300
that's what's happening there.

1801
01:13:48,400 --> 01:13:51,000
It's getting its the loader is doing that.

1802
01:14:00,500 --> 01:14:01,800
Let's see.

1803
01:14:02,500 --> 01:14:05,700
There was a question earlier about why you chose an if-else Cascade

1804
01:14:05,700 --> 01:14:07,600
for key input instead of a switch statement.

1805
01:14:07,600 --> 01:14:08,900
It's up for grabs.

1806
01:14:09,500 --> 01:14:10,000
Okay.

1807
01:14:10,000 --> 01:14:16,600
So basically the reason I chose this is that I wasn't really trying to

1808
01:14:16,600 --> 01:14:17,700
write any real code here.

1809
01:14:17,900 --> 01:14:20,900
So basically this is just going to sit here until we actually have

1810
01:14:20,900 --> 01:14:23,900
thing to pipe to and we may well switch it to a switch statement.

1811
01:14:23,900 --> 01:14:25,000
That would be totally fine.

1812
01:14:25,500 --> 01:14:28,400
In fact, we can, you know, you're you're welcome to basically recode

1813
01:14:28,400 --> 01:14:29,000
it like this.

1814
01:14:29,000 --> 01:14:29,300
If you

1815
01:14:29,500 --> 01:14:32,800
Prefer, it does not matter at all.

1816
01:14:32,800 --> 01:14:34,600
Like, like I said, this isn't real code right now.

1817
01:14:34,600 --> 01:14:36,100
Just showing you how to get it out.

1818
01:14:36,100 --> 01:14:38,900
I just want it to be there so that later when I go, okay, it's time to

1819
01:14:38,900 --> 01:14:40,900
add input now and we add it in the game.

1820
01:14:40,900 --> 01:14:41,700
I can just go out here.

1821
01:14:41,700 --> 01:14:42,800
I have to explain anything.

1822
01:14:42,800 --> 01:14:45,100
I can just hook it up and we're done.

1823
01:14:45,600 --> 01:14:48,400
So this is just showing I was just trying to show people what comes in

1824
01:14:48,400 --> 01:14:49,400
and how so yeah.

1825
01:14:49,400 --> 01:14:50,500
This is not a choice.

1826
01:14:50,700 --> 01:14:52,900
It's not a smart choice or a dumb choice or anything.

1827
01:14:52,900 --> 01:14:53,600
It's not even a choice.

1828
01:14:53,600 --> 01:14:54,200
It was just saying.

1829
01:14:54,200 --> 01:14:55,300
Hey, this is how that would work.

1830
01:15:00,000 --> 01:15:02,600
I break the giant header off of the main.cpp fell.

1831
01:15:02,600 --> 01:15:04,800
So you're talking about, I assume this stuff.

1832
01:15:05,300 --> 01:15:10,300
Basically, I'm assuming probably next week, I guess.

1833
01:15:14,200 --> 01:15:17,600
How do you know the xinput, stub, things work without testing it, on

1834
01:15:17,600 --> 01:15:20,600
an XP computer without expectations, input installed?

1835
01:15:20,900 --> 01:15:24,000
I love that question.

1836
01:15:24,600 --> 01:15:27,100
It's like you read my mind.

1837
01:15:29,500 --> 01:15:31,800
You know, it was going to be a secret but because the question was so

1838
01:15:31,800 --> 01:15:32,400
good.

1839
01:15:32,800 --> 01:15:33,800
I'm just going to say

1840
01:15:34,900 --> 01:15:37,100
I don't know if anyone noticed this guy sitting right here.

1841
01:15:38,000 --> 01:15:40,900
Well, once we are all done with the window stuff, I was going to show

1842
01:15:40,900 --> 01:15:42,900
you guys that exact thing.

1843
01:15:42,900 --> 01:15:45,400
You see this guy right here, x Windows XP.

1844
01:15:45,400 --> 01:15:46,600
I I did it.

1845
01:15:46,800 --> 01:15:48,300
You didn't believe I do it, I bet.

1846
01:15:48,300 --> 01:15:51,800
But I did I install a Windows XP virtual machine.

1847
01:15:53,000 --> 01:15:55,100
I actually have a bunch of Windows XP licenses.

1848
01:15:55,100 --> 01:15:57,700
So used to have essentially render farm and that totally is

1849
01:15:57,700 --> 01:16:00,800
decommission now, so I've got like a stack of winxp licenses.

1850
01:16:00,800 --> 01:16:04,600
So I took one of those installed it on here and now I've basically

1851
01:16:04,700 --> 01:16:09,800
Got Windows XP, a fully legitimate, actual fully licensed one.

1852
01:16:09,800 --> 01:16:12,200
So we can run it for as long as we wants not even one of those, like,

1853
01:16:12,200 --> 01:16:16,000
30 day trial about, to undo itself, kind of a Windows xp's.

1854
01:16:16,000 --> 01:16:19,800
It's like a full-on version of Windows XP Pro that we can launch and

1855
01:16:19,800 --> 01:16:20,400
test on.

1856
01:16:20,400 --> 01:16:23,500
And that was, I was gonna do that as going to be like at the end.

1857
01:16:23,500 --> 01:16:26,400
It was gonna be this big climactic moment of like how do we really

1858
01:16:26,400 --> 01:16:26,900
know?

1859
01:16:27,000 --> 01:16:29,200
And then we're going to run it on there and all that stuff.

1860
01:16:30,300 --> 01:16:33,400
But you beat me to it, but with such a good question, I felt like I

1861
01:16:33,400 --> 01:16:35,800
had to had to let the cat out of the bag.

1862
01:16:35,800 --> 01:16:36,100
Now.

1863
01:16:36,200 --> 01:16:40,700
What I will tell you is as of right now, there's absolutely no way

1864
01:16:40,700 --> 01:16:41,900
that we run on Windows XP.

1865
01:16:41,900 --> 01:16:42,300
I bet.

1866
01:16:42,800 --> 01:16:45,400
And the reason for that is because I think you even need to pass

1867
01:16:45,400 --> 01:16:50,000
special Flags to the Linker right now to make that happen because by

1868
01:16:50,000 --> 01:16:52,100
default, Microsoft's compiler.

1869
01:16:52,100 --> 01:16:55,400
Like doesn't even output stuff that runs on Windows XP.

1870
01:16:55,400 --> 01:16:59,800
That's how bad the default setup for the compiler is really, it's

1871
01:17:00,100 --> 01:17:00,600
Sad.

1872
01:17:01,400 --> 01:17:02,400
That's just the way it is.

1873
01:17:02,600 --> 01:17:05,000
So I can pretty much tell you definitively.

1874
01:17:06,300 --> 01:17:08,300
Yeah, that that we don't run on Windows XP.

1875
01:17:08,300 --> 01:17:10,000
And so what we're going to do is we're going to run it on there.

1876
01:17:10,000 --> 01:17:11,700
I'm going to show you that it doesn't run out on your show.

1877
01:17:11,700 --> 01:17:12,300
You the flags.

1878
01:17:12,300 --> 01:17:16,300
We need to set to make it run and then we will also be able to verify

1879
01:17:16,300 --> 01:17:20,200
that we're not calling anything inappropriately that causes us not to

1880
01:17:20,200 --> 01:17:22,000
run on there and that's so that's a great question.

1881
01:17:22,100 --> 01:17:24,400
And the answer is the only way to do it is to test.

1882
01:17:24,500 --> 01:17:25,500
So I highly recommend.

1883
01:17:25,500 --> 01:17:30,600
You always have a virtual machine or actual machines with the platform

1884
01:17:31,500 --> 01:17:34,100
different platforms that you want to ship on on their the minimum one,

1885
01:17:34,100 --> 01:17:35,700
especially so that you can

1886
01:17:35,800 --> 01:17:36,800
You can figure that out.

1887
01:17:39,800 --> 01:17:43,200
Is it a waste of time to check if get progress proc address return 0?

1888
01:17:43,500 --> 01:17:44,200
So

1889
01:17:46,700 --> 01:17:48,300
You know, I get, I don't know.

1890
01:17:48,300 --> 01:17:49,500
I mean that's a good question.

1891
01:17:49,500 --> 01:17:52,400
If you wanted to be really, really stringent about it.

1892
01:17:52,400 --> 01:17:57,400
You could, you could reassign to the stub here and actually in my

1893
01:17:57,400 --> 01:17:59,800
actual real code, I do it.

1894
01:18:00,000 --> 01:18:03,100
We do that, I do a thing.

1895
01:18:03,100 --> 01:18:07,700
We're actually after these, I basically do, you know, if not get input

1896
01:18:07,700 --> 01:18:11,700
State X input State, equals x input States tub.

1897
01:18:12,000 --> 01:18:19,100
I actually do do that normally just to make sure that I don't get a

1898
01:18:19,100 --> 01:18:20,200
bad one, but

1899
01:18:21,300 --> 01:18:23,100
You know, is it a waste of time?

1900
01:18:23,100 --> 01:18:27,200
Yeah, probably because you are so far.

1901
01:18:27,200 --> 01:18:30,500
You're basically guarding against something that's kind of

1902
01:18:30,500 --> 01:18:31,200
meaningless.

1903
01:18:31,400 --> 01:18:35,700
Like if you loaded this dll and somehow someone had modified the dll

1904
01:18:35,700 --> 01:18:38,500
to not have the functions in it that it normally has.

1905
01:18:39,200 --> 01:18:43,500
Then you know who's to say that the function is even work at all, but

1906
01:18:43,500 --> 01:18:46,600
like guarding against it, not finding them is like the least of your

1907
01:18:46,600 --> 01:18:46,900
worries.

1908
01:18:46,900 --> 01:18:47,700
At that point.

1909
01:18:47,700 --> 01:18:50,600
You're probably about to jump into some real crazy stuff if someone

1910
01:18:50,600 --> 01:18:50,900
gave you

1911
01:18:51,500 --> 01:18:57,300
Dll that bogus, you know, so do I think that's worth it.

1912
01:18:59,800 --> 01:19:03,300
Not really, you know, I don't, I don't think that's particularly good.

1913
01:19:04,800 --> 01:19:08,700
Yeah, you know, not my I wouldn't I wouldn't say that.

1914
01:19:08,700 --> 01:19:10,000
That's a particularly good thing to do.

1915
01:19:10,200 --> 01:19:10,700
We'll do it.

1916
01:19:10,700 --> 01:19:13,500
Just because you asked, but yeah, I wouldn't say so, you know what,

1917
01:19:13,500 --> 01:19:14,200
while I'm here.

1918
01:19:14,800 --> 01:19:17,000
I feel like this kind of has to happen, right?

1919
01:19:17,000 --> 01:19:18,800
I feel like we kind of need to do this.

1920
01:19:20,600 --> 01:19:20,900
Excuse me.

1921
01:19:21,000 --> 01:19:21,200
Me.

1922
01:19:22,500 --> 01:19:23,400
Something like this.

1923
01:19:24,900 --> 01:19:32,500
That's do plus equals stick X stick why you know, that sort of thing

1924
01:19:32,500 --> 01:19:36,100
and those are probably going to be pretty heavy weight.

1925
01:19:36,900 --> 01:19:39,100
So we're going to we're going to match.

1926
01:19:39,100 --> 01:19:40,700
That's probably still too heavy weight.

1927
01:19:41,300 --> 01:19:42,200
Let's do that.

1928
01:19:42,800 --> 01:19:43,400
All right.

1929
01:19:44,700 --> 01:19:46,300
Oh, no, no, no.

1930
01:19:46,300 --> 01:19:46,700
No.

1931
01:19:46,700 --> 01:19:47,800
Ahh, what's going on?

1932
01:19:48,600 --> 01:19:49,400
That's no good.

1933
01:19:54,100 --> 01:19:55,200
Well 08.

1934
01:19:55,500 --> 01:19:58,000
That's double what I meant was like, shift down by it.

1935
01:19:58,000 --> 01:20:00,800
I was I was trying to make the much The Dead Zone alone will be no

1936
01:20:00,800 --> 01:20:01,500
heat that up.

1937
01:20:01,500 --> 01:20:01,900
See.

1938
01:20:03,100 --> 01:20:05,000
All right, so here is my controller.

1939
01:20:06,400 --> 01:20:07,600
At still way too much.

1940
01:20:08,100 --> 01:20:09,500
That is still way too much.

1941
01:20:10,300 --> 01:20:12,300
Let's set that down a bit.

1942
01:20:12,300 --> 01:20:14,400
So we basically want something like that.

1943
01:20:14,400 --> 01:20:17,600
I guess a very very, very little back from controller.

1944
01:20:22,000 --> 01:20:25,100
Yeah, oops, that's why offset.

1945
01:20:25,700 --> 01:20:27,500
Okay, there we go.

1946
01:20:28,500 --> 01:20:32,900
And now we can control our scrolling.

1947
01:20:32,900 --> 01:20:34,300
So that's always good this.

1948
01:20:34,300 --> 01:20:37,800
So that is interesting to this guy is always a little bit left, isn't

1949
01:20:37,800 --> 01:20:38,100
he?

1950
01:20:39,800 --> 01:20:42,400
You know, I thought this Gamepad was busted.

1951
01:20:42,500 --> 01:20:43,400
I was playing with it.

1952
01:20:43,400 --> 01:20:46,200
This guy, you know, if you can see that now we're actually getting

1953
01:20:46,600 --> 01:20:48,300
stick in there, which is I don't know.

1954
01:20:48,400 --> 01:20:49,400
It felt like it kind of have to happen.

1955
01:20:49,700 --> 01:20:51,100
I thought this Gamepad was busted.

1956
01:20:51,100 --> 01:20:52,800
We've been playing a bunch of games with it.

1957
01:20:54,100 --> 01:20:56,300
Doug was over the other day and we were playing a bunch of games with

1958
01:20:56,300 --> 01:20:56,600
it.

1959
01:20:56,800 --> 01:20:59,900
And it was like, I thought that it was always

1960
01:21:00,000 --> 01:21:02,000
Going the other direction, and I don't know.

1961
01:21:02,000 --> 01:21:04,400
I think it's like got a messed up dead zone or something, because it

1962
01:21:04,400 --> 01:21:07,100
shouldn't be that there's no way it should be.

1963
01:21:07,100 --> 01:21:09,500
It should be registering that much all the time.

1964
01:21:09,500 --> 01:21:11,600
I think this is just basically a faulty controller.

1965
01:21:11,600 --> 01:21:14,100
I'm gonna have to buy a new controller, ladies and gentlemen, maybe

1966
01:21:14,100 --> 01:21:16,500
this will be an excuse to order an Xbox One controller.

1967
01:21:16,500 --> 01:21:18,000
I don't know if those work with xinput yet.

1968
01:21:18,000 --> 01:21:18,900
I assume they do.

1969
01:21:20,100 --> 01:21:22,500
Yeah, well, that's just that's just lame.

1970
01:21:22,800 --> 01:21:24,400
But anyway, that needed to happen.

1971
01:21:24,400 --> 01:21:25,800
I think we all know need to happen.

1972
01:21:28,000 --> 01:21:28,800
Let's see.

1973
01:21:33,500 --> 01:21:35,300
Do do do.

1974
01:21:39,100 --> 01:21:40,500
All right, we're kind of out of question.

1975
01:21:40,500 --> 01:21:42,100
So I think we mostly got.

1976
01:21:42,800 --> 01:21:45,400
I think we've mostly got everything.

1977
01:21:49,900 --> 01:21:50,200
Open up.

1978
01:21:50,200 --> 01:21:51,300
We got a little bit more.

1979
01:21:52,600 --> 01:21:53,800
Let's see here.

1980
01:21:57,000 --> 01:21:59,400
Rai has no impact on performance.

1981
01:21:59,700 --> 01:22:01,100
I would disagree with that.

1982
01:22:01,300 --> 01:22:04,800
I would say that are aii, does have a large impact on performance.

1983
01:22:04,800 --> 01:22:07,200
That is one of the main reasons that I don't use it.

1984
01:22:08,700 --> 01:22:10,900
So, we'll, maybe we can get to that some other time.

1985
01:22:10,900 --> 01:22:12,200
Probably not a good time to do it.

1986
01:22:12,200 --> 01:22:16,800
But yeah, so I'd say, let's see, where do the W / a man L / am.

1987
01:22:16,800 --> 01:22:17,900
Come from?

1988
01:22:19,000 --> 01:22:24,900
Well, basically what happens is Windows calls us back here.

1989
01:22:25,100 --> 01:22:25,700
Right?

1990
01:22:25,800 --> 01:22:29,500
So if we were to set in fact we can just go ahead and do that.

1991
01:22:29,600 --> 01:22:35,400
So if we were to set a breakpoint here like this, we get into win32

1992
01:22:35,800 --> 01:22:37,000
main window, call back.

1993
01:22:37,500 --> 01:22:41,500
Basically what happens is whoever was above us in the call stack is

1994
01:22:41,500 --> 01:22:45,900
the person who's supplying this stuff and that stuff comes from user

1995
01:22:45,900 --> 01:22:46,900
32 dll.

1996
01:22:46,900 --> 01:22:48,500
So this is some windows code.

1997
01:22:48,700 --> 01:22:53,700
The windows code basically, you know, it's the thing, right?

1998
01:22:54,600 --> 01:22:57,400
It's the thing that's calling us back and telling us what window, what

1999
01:22:57,400 --> 01:23:00,200
message and what wpml / am, what they are.

2000
01:23:00,700 --> 01:23:00,900
Now.

2001
01:23:00,900 --> 01:23:03,700
The reason they're called W Prime and L Prime is because it wants to

2002
01:23:03,700 --> 01:23:06,600
call us back at just a single function.

2003
01:23:07,100 --> 01:23:10,300
But it has all these different messages that it wants to give us.

2004
01:23:10,400 --> 01:23:12,600
And each message has different parameters.

2005
01:23:12,700 --> 01:23:16,700
So, it can't actually put the actual types in here.

2006
01:23:17,300 --> 01:23:18,500
It can't say like, in t

2007
01:23:18,600 --> 01:23:23,700
W pram and void star L / am or something or you know wrecked or

2008
01:23:23,700 --> 01:23:27,500
something wrecked star L per annum, because each message uses a

2009
01:23:27,500 --> 01:23:28,100
different type.

2010
01:23:28,100 --> 01:23:32,100
So basically, what's forcing you to do is use this message to go into

2011
01:23:32,100 --> 01:23:34,800
a switch or some other thing and test Where You Are.

2012
01:23:36,000 --> 01:23:40,200
Once you figure out what message you're you're at, it's incumbent upon

2013
01:23:40,200 --> 01:23:41,800
you to basically decrypt.

2014
01:23:41,800 --> 01:23:46,200
Those wpml prams cast them to the right thing or do bit operations on

2015
01:23:46,200 --> 01:23:48,300
them to get out the values, you need, whatever.

2016
01:23:49,400 --> 01:23:50,800
That's basically what's happening there.

2017
01:23:51,500 --> 01:23:55,300
And so the W Prime until parameter just basically Anonymous parameters

2018
01:23:55,700 --> 01:23:56,300
to.

2019
01:23:56,500 --> 01:23:57,800
I think they're 64-bit.

2020
01:23:57,800 --> 01:23:59,400
I don't know if the 64-bit or 32-bit.

2021
01:23:59,400 --> 01:23:59,800
Let's find.

2022
01:24:00,300 --> 01:24:01,700
Size of w.

2023
01:24:01,700 --> 01:24:02,300
/ am

2024
01:24:04,300 --> 01:24:07,500
They are both 64-bit.

2025
01:24:07,500 --> 01:24:11,300
So they're basically just to 64-bit values that take on whatever

2026
01:24:11,300 --> 01:24:14,700
meaning they need to take on for the message in question.

2027
01:24:16,600 --> 01:24:17,500
Let's take a look.

2028
01:24:20,200 --> 01:24:20,700
Why did Ms.

2029
01:24:20,700 --> 01:24:23,200
Choose to use a link and import Library approach, like this rather

2030
01:24:23,200 --> 01:24:24,400
than true dynamic loading.

2031
01:24:25,900 --> 01:24:29,700
I'm not sure what you mean, Dynamic loading on Windows works.

2032
01:24:30,900 --> 01:24:35,000
He is no less Dynamic than Linux Unix Drive platforms.

2033
01:24:35,000 --> 01:24:35,300
I'm not sure.

2034
01:24:35,300 --> 01:24:36,200
I understand that question.

2035
01:24:36,200 --> 01:24:36,600
Sorry.

2036
01:24:40,800 --> 01:24:42,400
Let's see.

2037
01:24:44,300 --> 01:24:51,300
Will the game State be cleared once per frame so I don't know exactly

2038
01:24:51,300 --> 01:24:51,900
what that means.

2039
01:24:51,900 --> 01:24:54,500
Resetting Mouse positions clearing boolean's.

2040
01:24:55,100 --> 01:24:57,800
I mean some stuff will be cleared per frame.

2041
01:24:57,800 --> 01:25:00,400
If it's something that is only true for the frame.

2042
01:25:00,400 --> 01:25:01,200
I'm not sure.

2043
01:25:01,200 --> 01:25:01,300
Sorry.

2044
01:25:01,300 --> 01:25:03,400
I don't understand that question as well either maybe wait till we

2045
01:25:03,400 --> 01:25:06,500
actually get there and then you can ask it more specifically at the

2046
01:25:06,500 --> 01:25:08,100
time and it will be clear.

2047
01:25:09,200 --> 01:25:10,800
Will you implement procedural generation?

2048
01:25:10,800 --> 01:25:11,400
Yes.

2049
01:25:13,900 --> 01:25:16,700
When are we going to get a naysayer and Senior ettore combination

2050
01:25:16,700 --> 01:25:17,200
game?

2051
01:25:17,800 --> 01:25:18,800
I do not know.

2052
01:25:18,800 --> 01:25:21,800
But I, you know, the witness has both of our code in it.

2053
01:25:24,800 --> 01:25:28,900
I mean there's that I think braid even has some of my codon.

2054
01:25:28,900 --> 01:25:34,600
I think maybe the rounded rectangle intersection code is in there.

2055
01:25:34,600 --> 01:25:34,900
I don't know.

2056
01:25:34,900 --> 01:25:36,500
You'd have to ask John if that's still in there.

2057
01:25:36,500 --> 01:25:38,000
I remember it was in there at one point.

2058
01:25:38,100 --> 01:25:40,800
I wrote some rounded rectangle intersection testing code.

2059
01:25:42,000 --> 01:25:46,500
I mean it's like 60 lines of code and what's probably you know tens or

2060
01:25:46,500 --> 01:25:48,300
hundreds of thousands of lines of code for the game.

2061
01:25:48,300 --> 01:25:52,500
But if you really, if all you care about is that you had a game by

2062
01:25:52,500 --> 01:25:55,600
Jonathan Blow that also had some code from me in it.

2063
01:25:55,700 --> 01:25:57,800
You already have one that you can play.

2064
01:26:04,400 --> 01:26:05,500
What sound do PR, we're going to use.

2065
01:26:05,500 --> 01:26:07,800
Direct sound is what we're going to use?

2066
01:26:08,300 --> 01:26:11,000
Will the OS free all Heap objects on program exit.

2067
01:26:11,000 --> 01:26:12,800
Yes, you do not need a free.

2068
01:26:12,800 --> 01:26:13,500
Everything yourself.

2069
01:26:13,500 --> 01:26:14,500
It will free everything.

2070
01:26:16,800 --> 01:26:17,700
Let's see.

2071
01:26:19,700 --> 01:26:23,800
On Unix, you don't need to link to a DOT lib file at all to use a.so

2072
01:26:23,800 --> 01:26:24,300
file.

2073
01:26:24,300 --> 01:26:25,400
Where, as an MS platforms.

2074
01:26:25,400 --> 01:26:26,600
You needed that lib file.

2075
01:26:27,200 --> 01:26:29,700
I don't think that's true.

2076
01:26:31,300 --> 01:26:34,100
That is not been my experience on my, in my experience on both

2077
01:26:34,100 --> 01:26:34,500
platforms.

2078
01:26:34,500 --> 01:26:36,900
You can either use an import library and have it.

2079
01:26:36,900 --> 01:26:42,200
Do the binding for you or not use one and not, I mean, yes, you have

2080
01:26:42,200 --> 01:26:42,500
to.

2081
01:26:42,700 --> 01:26:44,400
Okay, so maybe that's what you're talking about.

2082
01:26:44,600 --> 01:26:47,300
Maybe you're talking about the fact that you can directly say, I'm

2083
01:26:47,300 --> 01:26:49,400
using this library and you don't need a separate.

2084
01:26:49,500 --> 01:26:50,500
Dot lib.

2085
01:26:50,500 --> 01:26:53,200
That tells you what the import library is, but that's really a

2086
01:26:53,200 --> 01:26:56,000
compiler thing, doesn't have anything to do with Windows.

2087
01:26:56,300 --> 01:26:59,400
That's just a, the way the compiler is decided to Output the

2088
01:27:00,800 --> 01:27:01,300
Stuff.

2089
01:27:02,100 --> 01:27:03,500
You wouldn't have to do that.

2090
01:27:03,500 --> 01:27:05,900
I don't think if you didn't want to the compiler, could have just done

2091
01:27:05,900 --> 01:27:06,600
it directly.

2092
01:27:07,000 --> 01:27:08,600
I think it's just designed to save time.

2093
01:27:08,600 --> 01:27:11,800
Maybe even because the compiler could just read the dll and output the

2094
01:27:11,800 --> 01:27:14,800
code to bind to the dll correctly, just like it does on Unix.

2095
01:27:14,800 --> 01:27:15,800
Oh, yeah.

2096
01:27:16,000 --> 01:27:18,000
I don't think there's much of a difference as you think there is.

2097
01:27:18,000 --> 01:27:20,900
I guess that's what I would say, but either way, I'm not sure it

2098
01:27:20,900 --> 01:27:21,300
matters.

2099
01:27:21,300 --> 01:27:24,000
Like it's really not a thing that affects anyone as far as I know.

2100
01:27:34,000 --> 01:27:36,800
In the far, future will use direct X or opengl or what?

2101
01:27:38,000 --> 01:27:42,800
Well, we'll probably use one of the two of them to do, are bleeding

2102
01:27:42,800 --> 01:27:48,600
for a 4-speed purposes, but I'm not sure which one we will probably

2103
01:27:48,600 --> 01:27:50,600
use opengl if it seems viable at the time.

2104
01:27:50,600 --> 01:27:53,600
Otherwise, we'll use DirectX on Windows and opengl only on other

2105
01:27:53,600 --> 01:27:57,200
platforms because sometimes, opengl and windows doesn't work as well.

2106
01:27:57,200 --> 01:27:57,700
And so on.

2107
01:28:02,000 --> 01:28:03,400
Let's see.

2108
01:28:06,400 --> 01:28:08,500
We will be drawing the whole screen every frame probably.

2109
01:28:08,600 --> 01:28:10,000
I mean, not exactly true.

2110
01:28:10,000 --> 01:28:13,100
But we will there's some things that will be sort of redirected, but

2111
01:28:13,100 --> 01:28:14,200
we will be drawing the whole screen.

2112
01:28:18,400 --> 01:28:21,400
Are we going to use the width and height in the paint variable again?

2113
01:28:21,800 --> 01:28:23,900
No, I don't think we are.

2114
01:28:23,900 --> 01:28:26,700
You're talking about in here if you notice they're already gone,

2115
01:28:27,100 --> 01:28:27,600
right?

2116
01:28:29,200 --> 01:28:30,500
Is that what you're talking about?

2117
01:28:30,600 --> 01:28:33,000
I'm not sure exactly what you're talking about.

2118
01:28:33,300 --> 01:28:37,600
But in here we passed the window within the window height only so we

2119
01:28:37,600 --> 01:28:40,600
don't ya I'm not sure exactly what you're talking about.

2120
01:28:40,600 --> 01:28:43,900
But I think we already got rid of them is my understanding but you

2121
01:28:43,900 --> 01:28:44,200
know.

2122
01:28:46,000 --> 01:28:46,700
Let's see.

2123
01:28:49,000 --> 01:28:51,600
Why does valgrind make it look so scary when you don't free?

2124
01:28:52,300 --> 01:28:54,200
Well, because they don't have anything else they can do, right?

2125
01:28:54,200 --> 01:28:55,600
I mean, it's an external utility.

2126
01:28:55,600 --> 01:29:01,800
It doesn't know whether that thing was a leak or something.

2127
01:29:01,800 --> 01:29:03,700
You actually meant the OS to clean up, right?

2128
01:29:03,700 --> 01:29:08,200
Because let's say I allocate at the beginning of the program.

2129
01:29:08,200 --> 01:29:10,800
I allocate a buffer that we use for stuff and then I don't free it.

2130
01:29:10,800 --> 01:29:13,400
I left the operating system clean that up that's totally valid in that

2131
01:29:13,400 --> 01:29:13,800
works.

2132
01:29:14,400 --> 01:29:17,000
But let's say I allocate something every frame.

2133
01:29:17,000 --> 01:29:18,500
I'll get a new one every frame.

2134
01:29:18,800 --> 01:29:19,700
I never cleaned that up.

2135
01:29:19,800 --> 01:29:23,100
Well, that's a memory leak valgrind where valgrind I believe is how

2136
01:29:23,100 --> 01:29:23,700
it's pronounced.

2137
01:29:23,700 --> 01:29:27,300
Valgrind doesn't know the difference between those, it doesn't know

2138
01:29:27,300 --> 01:29:28,900
what your intention was, right?

2139
01:29:29,000 --> 01:29:32,800
So it kind of has to report them all and you will have to kind of let

2140
01:29:32,800 --> 01:29:33,200
it know.

2141
01:29:33,200 --> 01:29:36,700
I guess, which ones are you have to know which ones are legitimate and

2142
01:29:36,700 --> 01:29:37,900
not would be my guess.

2143
01:29:45,100 --> 01:29:46,400
Let's see.

2144
01:29:48,900 --> 01:29:50,100
It looks like wp-admin.

2145
01:29:50,100 --> 01:29:51,600
El primer 32-bit on XP.

2146
01:29:51,600 --> 01:29:52,100
Yes.

2147
01:29:52,100 --> 01:29:53,900
Well, it's not really about XP or not.

2148
01:29:53,900 --> 01:29:56,200
It's about whether you're compiling in 64-bit mode, or not.

2149
01:29:56,200 --> 01:29:59,800
So I suspect if you were using XP 64 which

2150
01:30:00,000 --> 01:30:01,800
And you were loading in the 64-bit mode.

2151
01:30:01,800 --> 01:30:04,400
They would probably be 64 bit if that's it's really just whether your

2152
01:30:04,400 --> 01:30:07,000
32-bit or 64-bit is whether they're bigger or smaller.

2153
01:30:07,100 --> 01:30:08,400
We're compiling in 64-bit mode.

2154
01:30:08,400 --> 01:30:09,500
So they're 64-bit.

2155
01:30:10,900 --> 01:30:14,200
And we are basically at the end of the questions, it is pup.

2156
01:30:14,200 --> 01:30:16,500
Is it possible to keep your frame rate consistent while dragging the

2157
01:30:16,500 --> 01:30:19,600
window around doing repaint on WM move is slow.

2158
01:30:19,900 --> 01:30:21,200
So here's what I'd say about that.

2159
01:30:22,100 --> 01:30:22,700
I have noticed.

2160
01:30:22,700 --> 01:30:25,400
A lot of people I've been doing some crazy stuff with the handmade

2161
01:30:25,400 --> 01:30:28,900
hero Source, like trying to time the frames per second and stuff like

2162
01:30:28,900 --> 01:30:29,400
that.

2163
01:30:29,700 --> 01:30:32,100
I would highly recommend not doing that.

2164
01:30:32,700 --> 01:30:35,200
We are just setting ourselves up so we can learn how to write a

2165
01:30:35,200 --> 01:30:39,200
renderer and we'll be timing the code in the renderer because we want

2166
01:30:39,200 --> 01:30:40,400
to make that fast.

2167
01:30:40,700 --> 01:30:43,900
But we're not like right now we're just using a Windows call.

2168
01:30:43,900 --> 01:30:46,300
That's probably on the slow path to blip things to the window.

2169
01:30:46,300 --> 01:30:48,500
So don't time it.

2170
01:30:48,500 --> 01:30:51,500
It's going to be way slower than it should be.

2171
01:30:51,500 --> 01:30:55,500
Like like this is not we're not trying to get a fastball, it going

2172
01:30:55,500 --> 01:30:55,900
here.

2173
01:30:56,200 --> 01:30:58,600
We're just trying to get something reasonable to the screen bleeding

2174
01:30:58,600 --> 01:31:01,000
in an easy way that allows us to do our own bitmap rendering.

2175
01:31:01,000 --> 01:31:05,400
And then when we are done with all of that stuff, then we can start to

2176
01:31:05,400 --> 01:31:05,800
look at.

2177
01:31:05,800 --> 01:31:08,700
Okay, how do we get that stuff to the screen fastest?

2178
01:31:08,700 --> 01:31:10,500
Because that's a whole separate thing and I don't want

2179
01:31:10,600 --> 01:31:12,100
Want to put the cart before the horse.

2180
01:31:12,100 --> 01:31:15,000
That is way down the line because you get you we haven't even seen how

2181
01:31:15,000 --> 01:31:16,800
to like draw a game yet.

2182
01:31:16,900 --> 01:31:19,400
And so you don't want to try to draw game fast before, you know, how

2183
01:31:19,400 --> 01:31:20,500
to draw a game at all.

2184
01:31:21,200 --> 01:31:23,200
So hold off on that.

2185
01:31:23,300 --> 01:31:24,700
Don't go nuts timing.

2186
01:31:24,700 --> 01:31:28,000
This code is totally pointless because we probably won't even call

2187
01:31:28,000 --> 01:31:29,600
stretched B when we're done stretch.

2188
01:31:29,600 --> 01:31:31,200
Tibbets when we're done.

2189
01:31:32,000 --> 01:31:32,900
Okay, everyone.

2190
01:31:33,700 --> 01:31:36,100
I think that is the end of the stream.

2191
01:31:36,800 --> 01:31:38,100
So thank you very much.

2192
01:31:38,100 --> 01:31:39,200
Everyone for tuning in.

2193
01:31:39,200 --> 01:31:40,500
It has been a pleasure as always.

2194
01:31:40,700 --> 01:31:43,800
A stream went so, well, we basically had more time than we even need

2195
01:31:43,800 --> 01:31:44,200
it.

2196
01:31:44,300 --> 01:31:44,900
So that's good.

2197
01:31:44,900 --> 01:31:46,200
Let's hope that continues tomorrow.

2198
01:31:46,200 --> 01:31:50,500
We will pick up, where we left off with doing basically direct sound

2199
01:31:50,500 --> 01:31:52,800
so that we've got our input will start doing our sound.

2200
01:31:53,100 --> 01:31:54,900
So hope to see you all again.

2201
01:31:55,100 --> 01:31:57,900
We are also trying to get the forums and stuff up and running.

2202
01:31:57,900 --> 01:31:58,800
So maybe by tomorrow.

2203
01:31:58,800 --> 01:31:59,700
We'll have that too.

2204
01:32:00,300 --> 01:32:03,100
If not, hopefully by the end of the week, so thanks everyone for

2205
01:32:03,100 --> 01:32:03,500
joining us.

2206
01:32:03,500 --> 01:32:06,800
I hope to see you here again, tomorrow at 8:00 p.m.

2207
01:32:06,800 --> 01:32:09,600
Pacific Standard time, that will be the last eight pm cast for this

2208
01:32:09,600 --> 01:32:10,500
week because we're going to have

2209
01:32:10,600 --> 01:32:13,700
Holiday hours for Thanksgiving Wednesday, Thursday, Friday will

2210
01:32:13,700 --> 01:32:15,100
actually be at 11 a.m.

2211
01:32:15,400 --> 01:32:19,000
In the morning because everyone's going to have Thanksgiving things in

2212
01:32:19,000 --> 01:32:20,400
the day and parties and all that stuff.

2213
01:32:20,400 --> 01:32:22,500
So we're going to try and put it in the morning where people might be

2214
01:32:22,500 --> 01:32:25,500
able to catch it and then next week.

2215
01:32:25,500 --> 01:32:28,300
We will go back to our regular schedule after that.

2216
01:32:28,300 --> 01:32:29,400
So thank you very much for joining us.

2217
01:32:29,400 --> 01:32:32,200
I hope to see you here for the rest of the week when we add direct

2218
01:32:32,200 --> 01:32:34,500
sound and yeah, that's it.

2219
01:32:34,500 --> 01:32:35,300
Thanks for tuning in.

