1
00:00:03,700 --> 00:00:06,200
Hello everyone and welcome to handmade hero.

2
00:00:06,200 --> 00:00:09,900
The show recoded complete game live on stream here on Twitch.

3
00:00:10,600 --> 00:00:14,600
We don't actually use any libraries or any engine or anything.

4
00:00:14,600 --> 00:00:19,200
We just use Windows directly since that is the standard platform for

5
00:00:19,200 --> 00:00:20,200
games these days.

6
00:00:21,200 --> 00:00:22,800
And so that's what we're teaching on first.

7
00:00:23,400 --> 00:00:25,200
But we try to write all our code in a very portable way.

8
00:00:25,200 --> 00:00:28,300
And in fact, many members of the community have already done for its

9
00:00:28,300 --> 00:00:31,400
to Linux and mac and so on someone even got it running on a

10
00:00:31,600 --> 00:00:33,400
Pick a PlayStation Vita or something.

11
00:00:33,400 --> 00:00:34,400
It's been cool.

12
00:00:35,000 --> 00:00:37,800
So we try to keep our code very portable as well because at the end of

13
00:00:37,800 --> 00:00:41,300
this, we'll be trying to Port the game to lots of different platforms.

14
00:00:41,300 --> 00:00:44,800
We want to make life easy for ourselves, so that is also part of it.

15
00:00:46,500 --> 00:00:51,400
But right now we're in the middle of sort of extending our notion of

16
00:00:51,400 --> 00:00:53,000
what assets are in the game.

17
00:00:53,000 --> 00:00:56,400
Like what, how we store assets, how we process assets, how we can mark

18
00:00:56,400 --> 00:01:01,100
them up in preparation for having basically an asset pack file with a

19
00:01:01,100 --> 00:01:01,400
specification,

20
00:01:01,500 --> 00:01:04,900
Education that we can Define so that we can bring a lot of assets into

21
00:01:04,900 --> 00:01:07,700
the game easily, and not really have to think about it anymore.

22
00:01:07,700 --> 00:01:11,400
So we can just dump as many Assets in as we want and off we go.

23
00:01:14,700 --> 00:01:19,200
So to that end, we've been trying to Define how assets are defined.

24
00:01:19,200 --> 00:01:23,400
How they are looked up in the asset system and that is sort of the

25
00:01:23,400 --> 00:01:25,100
exploration that we're doing right now.

26
00:01:25,300 --> 00:01:28,000
I think we're sort of coming to the end of that.

27
00:01:28,000 --> 00:01:30,800
Like, I think maybe by the end of next week, certainly we would be

28
00:01:30,800 --> 00:01:33,500
wrapped up with any Explorations we're doing and be actually working

29
00:01:33,700 --> 00:01:35,500
on finalizing details of it.

30
00:01:35,700 --> 00:01:36,400
And so, that's pretty good.

31
00:01:36,400 --> 00:01:38,400
But right now, we're still doing a little bit of expiration because

32
00:01:38,400 --> 00:01:41,500
we're not 100% certain all the things we need out of that asset

33
00:01:41,500 --> 00:01:41,800
system.

34
00:01:41,800 --> 00:01:42,700
So we're kind of try to play

35
00:01:42,900 --> 00:01:46,400
And with how we pull things out of it and how we talk about Assets in

36
00:01:46,400 --> 00:01:47,200
it, so we can be sure.

37
00:01:47,200 --> 00:01:49,900
We've got a reasonable first attempt before.

38
00:01:49,900 --> 00:01:53,900
We actually make a sort of a definition and say here is what we want

39
00:01:53,900 --> 00:01:58,700
our pack files to look like first go right before I jump back into it.

40
00:01:58,900 --> 00:02:01,100
Let me just say that it is a 135.

41
00:02:01,100 --> 00:02:03,300
So if you would like to follow along at home, and you have

42
00:02:03,300 --> 00:02:06,700
pre-ordered, the game on handmade hero dot-org, download that Source,

43
00:02:06,700 --> 00:02:11,100
zip and unpack day, 134 source code into a directory.

44
00:02:11,100 --> 00:02:12,700
That is what I'm starting with now.

45
00:02:12,800 --> 00:02:13,200
Now.

46
00:02:13,600 --> 00:02:17,600
And that is what you should start with if you want to line up with me

47
00:02:18,400 --> 00:02:20,000
and while we're at it in the code here,

48
00:02:21,100 --> 00:02:21,600
All right.

49
00:02:21,600 --> 00:02:26,200
So if we take a look at what we did yesterday, we had made a new file

50
00:02:26,300 --> 00:02:26,600
something.

51
00:02:26,600 --> 00:02:29,900
We don't do that often in handmade hero, but we made a new file that

52
00:02:29,900 --> 00:02:32,800
contains all of our sort of temporary asset work here.

53
00:02:32,800 --> 00:02:37,800
So we can start to focus on it and sort of get it into a, you know,

54
00:02:37,800 --> 00:02:43,600
sort of a more, a more robust sort of definition of what, supposed to

55
00:02:43,600 --> 00:02:44,100
go on.

56
00:02:44,500 --> 00:02:46,000
Everything's working pretty well.

57
00:02:46,300 --> 00:02:49,800
I don't actually remember what I was in the middle of doing this, is

58
00:02:49,800 --> 00:02:50,700
the problem of actually

59
00:02:50,900 --> 00:02:51,700
And a ton of other things.

60
00:02:51,700 --> 00:02:54,200
I do every day in addition to handmade Heroes.

61
00:02:54,200 --> 00:02:56,800
I don't always remember what we were actually working on at the time,

62
00:02:57,600 --> 00:02:59,800
but I believe the last thing that we did.

63
00:03:00,000 --> 00:03:05,500
Was we just sort of cheesed in a little thing that would get the first

64
00:03:05,500 --> 00:03:08,400
bitmap out of a particular asset ID.

65
00:03:08,800 --> 00:03:11,900
So that basically we could test to make sure that sort of our asset

66
00:03:11,900 --> 00:03:16,000
tables were working and they seem to be working just fine.

67
00:03:16,000 --> 00:03:19,400
And so now, I think the next thing that we'd want to do to sort of

68
00:03:19,400 --> 00:03:23,900
expand this notion here, we've got really to vet two things we could

69
00:03:23,900 --> 00:03:24,500
choose to add.

70
00:03:24,500 --> 00:03:29,300
Next one, is we could start to work on a raised, the other is we can

71
00:03:29,300 --> 00:03:29,800
start to work.

72
00:03:30,000 --> 00:03:33,000
Con named elements like this things that have multiple Parts like

73
00:03:33,000 --> 00:03:33,400
this.

74
00:03:35,200 --> 00:03:38,300
And I think the first thing that I'm going to do is probably try to

75
00:03:38,300 --> 00:03:42,300
work on the array stuff first because that well, mmm-hmm.

76
00:03:45,400 --> 00:03:47,600
It's it's a question, isn't it?

77
00:03:48,500 --> 00:03:49,700
It's a question.

78
00:03:56,400 --> 00:04:00,000
I'm kind of, I'm a little bit leaning.

79
00:04:01,200 --> 00:04:03,100
You know, I think, I don't know.

80
00:04:03,700 --> 00:04:10,700
Okay, I do not know, but I feel like if I'm not totally mistaken, we

81
00:04:10,700 --> 00:04:13,400
might actually be able to get all of these things.

82
00:04:15,300 --> 00:04:22,800
In one straightforward way like it's entirely possible that we might

83
00:04:23,200 --> 00:04:30,700
be able to do these guys somewhat directly and not really have to

84
00:04:30,700 --> 00:04:33,900
handle these guys in different ways so so I guess I'm going to start

85
00:04:33,900 --> 00:04:34,900
with a simpler one.

86
00:04:35,000 --> 00:04:38,800
I'm going to start with the arrayed one and I'm going to go ahead and

87
00:04:38,800 --> 00:04:40,000
make the arrayed one.

88
00:04:40,000 --> 00:04:42,500
Actually work directly through the asset system.

89
00:04:42,500 --> 00:04:44,800
Now instead of them being pulled out because right now there

90
00:04:45,100 --> 00:04:51,900
About and I want them to go through the asset system instead.

91
00:04:52,300 --> 00:04:55,900
So what I'm going to do here is I'm going to start to figure out how

92
00:04:55,900 --> 00:04:56,600
we're going to do that.

93
00:04:56,600 --> 00:05:01,200
Now, if you remember our asset types already have the notion that

94
00:05:01,400 --> 00:05:03,900
there's multiple assets for that asset type.

95
00:05:03,900 --> 00:05:06,500
So we shouldn't really have to do anything to make multiple assets

96
00:05:06,500 --> 00:05:06,800
here.

97
00:05:07,600 --> 00:05:09,900
All we need to do is start adding these to our asset table.

98
00:05:09,900 --> 00:05:14,800
Here, we had asset grass, we had asset tough

99
00:05:15,000 --> 00:05:18,400
Puffed and we had asset Stone like so.

100
00:05:19,800 --> 00:05:24,400
And if I want to, I can go ahead and, uh, and start to try and pull

101
00:05:24,400 --> 00:05:29,400
those in to sort of the, the system elsewhere here.

102
00:05:29,400 --> 00:05:29,900
Right?

103
00:05:30,500 --> 00:05:33,500
So what I think, well, you know what, actually, that may have been a

104
00:05:33,500 --> 00:05:36,100
little premature, let's do one more thing first that I think will help

105
00:05:36,100 --> 00:05:36,800
out a little bit.

106
00:05:37,000 --> 00:05:40,000
So if you notice here, we still kind of got this stuff hard-coated,

107
00:05:40,000 --> 00:05:40,500
right.

108
00:05:40,900 --> 00:05:44,800
We're actually using the switch statement to load our bitmaps, but

109
00:05:44,800 --> 00:05:47,500
obviously, we don't really want to do that at the end of the day,

110
00:05:47,500 --> 00:05:47,700
right?

111
00:05:47,700 --> 00:05:49,000
In the, in the final version.

112
00:05:49,100 --> 00:05:51,400
We definitely don't want anything like that going on.

113
00:05:51,400 --> 00:05:55,500
So let's go ahead and push that down into something a little bit more

114
00:05:55,700 --> 00:05:56,300
stable.

115
00:05:56,700 --> 00:05:59,800
Because we know that we have some things that we need to find with our

116
00:06:00,000 --> 00:06:00,300
Maps.

117
00:06:00,300 --> 00:06:02,300
We need a line, X and top-down align.

118
00:06:02,300 --> 00:06:04,700
Why we need those?

119
00:06:04,700 --> 00:06:09,800
Those pieces of information or we need some, we need some equivalent

120
00:06:09,800 --> 00:06:10,500
of these things.

121
00:06:13,600 --> 00:06:14,100
Right.

122
00:06:15,200 --> 00:06:19,400
So let's go ahead and just smooth out that part first because I think

123
00:06:19,400 --> 00:06:22,800
that will make it a little bit easier as we go to move more things in

124
00:06:22,800 --> 00:06:23,400
their groups.

125
00:06:23,400 --> 00:06:25,000
That was not what I want to do.

126
00:06:26,100 --> 00:06:28,000
All right, so let's tackle that first.

127
00:06:28,000 --> 00:06:31,200
So the first thing I want to do is we have this sort of dichotomy

128
00:06:31,200 --> 00:06:37,200
currently with debug load bitmap and and this other one here that

129
00:06:37,200 --> 00:06:39,300
doesn't align percentage of point five point five.

130
00:06:39,300 --> 00:06:41,800
And the reason that we were doing that before is because we

131
00:06:42,100 --> 00:06:45,200
A way to be able to load a bitmap by default but just uses its Center

132
00:06:45,200 --> 00:06:49,500
Point as its anchor in order to know the center point you have to load

133
00:06:49,500 --> 00:06:51,600
the bitmap first, right?

134
00:06:51,700 --> 00:06:54,700
Well what I want to do is get rid of that concept because since we

135
00:06:54,700 --> 00:06:57,800
know we're going to be working with an asset pack file that asset pack

136
00:06:57,800 --> 00:07:00,900
file will already be able to process the Assets in any way that we

137
00:07:00,900 --> 00:07:01,200
want.

138
00:07:01,200 --> 00:07:04,000
Because we're going to have, you know, the assumption is there.

139
00:07:04,000 --> 00:07:08,000
Some art pipeline at the head end of this thing and things come out of

140
00:07:08,000 --> 00:07:08,300
it.

141
00:07:08,300 --> 00:07:11,200
They get packed into the PAC file and during that packing process,

142
00:07:11,400 --> 00:07:11,900
they will.

143
00:07:12,100 --> 00:07:16,800
Set up those aligned percentage things for us that's that's my

144
00:07:16,800 --> 00:07:18,000
thinking on it, right?

145
00:07:18,200 --> 00:07:22,000
And so if we go into the renderer and we take a look in the render

146
00:07:22,000 --> 00:07:27,100
group of the actual data that we actually need for the bitmap that

147
00:07:27,100 --> 00:07:28,100
sanitation.

148
00:07:29,000 --> 00:07:31,500
You can see that all we really needed is this a line percentage.

149
00:07:31,500 --> 00:07:34,400
So what I'd like to do is start specifying that align percentage

150
00:07:34,400 --> 00:07:39,000
directly and that way we don't have any more of this like sort of call

151
00:07:39,000 --> 00:07:40,800
dichotomy stuff, right?

152
00:07:41,400 --> 00:07:42,000
So the way that I

153
00:07:42,100 --> 00:07:46,200
To do that right now is I'm just going to go ahead and and actually

154
00:07:46,200 --> 00:07:49,400
compute those for these guys and then get rid of the sort of

155
00:07:49,600 --> 00:07:53,300
dependency on the size because we can assume that it's going to be

156
00:07:53,300 --> 00:07:55,300
taken care of for us as we go.

157
00:07:56,100 --> 00:07:59,300
So the easiest way for me to do that probably is actually just to set

158
00:07:59,300 --> 00:08:03,300
a breakpoint in the debugger and see what they're currently set to

159
00:08:03,400 --> 00:08:03,600
write.

160
00:08:03,600 --> 00:08:06,100
Because again this this is just sort of a manual process.

161
00:08:06,100 --> 00:08:09,800
We're doing temporarily because we don't really want to deal with the

162
00:08:09,800 --> 00:08:11,900
actual asset pipeline stuff at the moment.

163
00:08:12,000 --> 00:08:19,000
We would much rather just we would much rather just have some sort of

164
00:08:19,000 --> 00:08:21,900
a stand-in that we can do until we get things to find if that makes

165
00:08:21,900 --> 00:08:22,200
sense.

166
00:08:22,900 --> 00:08:26,800
So, when I come in here, after I've loaded all this stuff out, right?

167
00:08:26,900 --> 00:08:30,200
I now know what, all of the alignments actually are.

168
00:08:30,300 --> 00:08:34,400
So I'm going to go ahead and actually read out what those alignments

169
00:08:34,400 --> 00:08:34,799
are.

170
00:08:35,299 --> 00:08:40,000
All of these guys will, obviously all be .5 s, this guy will have

171
00:08:40,000 --> 00:08:40,600
this, this

172
00:08:42,100 --> 00:08:45,000
Alignment done for all of these guys will have to take a look at that

173
00:08:45,000 --> 00:08:46,000
one in a second.

174
00:08:46,000 --> 00:08:48,800
But these guys right here, we'll all be point five, so we don't need

175
00:08:48,800 --> 00:08:51,900
to read them out, but the ones that we do need to read out right will

176
00:08:51,900 --> 00:08:53,600
be all of these guys here.

177
00:08:54,200 --> 00:08:57,200
So I think actually now that I think about it I'll have to let the

178
00:08:57,200 --> 00:08:59,800
game Run a bit first because

179
00:09:00,000 --> 00:09:04,400
Till we actually load the bitmaps in, I won't be able to to inspect

180
00:09:04,400 --> 00:09:05,400
anything, right?

181
00:09:05,800 --> 00:09:08,000
So there everything is kind of loaded in here.

182
00:09:08,000 --> 00:09:10,100
Now we've got all the stuff.

183
00:09:10,500 --> 00:09:13,300
Although now that I think about it we probably also need to issue a

184
00:09:13,300 --> 00:09:17,100
load asset call for all of them at the end here, just to make sure.

185
00:09:17,600 --> 00:09:20,000
So we'd have to do something like load asset.

186
00:09:22,600 --> 00:09:32,100
For, for each bitmap, let's see, tree Rock, Rocco three test test

187
00:09:32,100 --> 00:09:35,000
background, we do use that anymore.

188
00:09:35,300 --> 00:09:36,400
Why is that even in here?

189
00:09:36,900 --> 00:09:39,600
That that's not actually used.

190
00:09:40,200 --> 00:09:41,200
Don't know why that's there.

191
00:09:41,400 --> 00:09:42,200
Let's get rid of that.

192
00:09:44,600 --> 00:09:45,700
Asset stairwell.

193
00:09:45,700 --> 00:09:46,800
Is that stairwell?

194
00:09:46,800 --> 00:09:49,100
Even used no asset.

195
00:09:49,100 --> 00:09:50,400
Stairwell isn't used either.

196
00:09:50,600 --> 00:09:55,100
So really all we've got is asset tree asset sword.

197
00:09:55,100 --> 00:09:55,600
Yes.

198
00:09:55,600 --> 00:09:56,900
Oh, and can we still fire sword?

199
00:09:56,900 --> 00:10:00,200
I don't even remember if we took that out or not, but let's just go

200
00:10:00,200 --> 00:10:01,400
ahead and see.

201
00:10:02,500 --> 00:10:07,700
So, all right, so now we should have everything actually loaded in.

202
00:10:07,700 --> 00:10:10,900
So I'm just going to take a look now and what they are because there's

203
00:10:10,900 --> 00:10:12,800
very few of them and then we'll just copy those in and

204
00:10:13,000 --> 00:10:16,200
Will serve as our stand-in, which is all well and good.

205
00:10:16,600 --> 00:10:17,300
All right.

206
00:10:17,800 --> 00:10:18,500
So let's see.

207
00:10:18,500 --> 00:10:20,600
Trance State assets.

208
00:10:21,200 --> 00:10:22,500
Here are the assets.

209
00:10:22,600 --> 00:10:27,000
Here are the bitmaps, we have eight of them, apparently, so let's take

210
00:10:27,000 --> 00:10:30,100
a look at all of these supposed bitmaps.

211
00:10:31,600 --> 00:10:32,400
Let's see.

212
00:10:32,900 --> 00:10:36,700
So, it looks like we've got one of them is not loaded, but that's

213
00:10:36,700 --> 00:10:40,300
bitmap 0, which I think is what we were expecting, because there's the

214
00:10:40,300 --> 00:10:41,600
null asset, right?

215
00:10:41,900 --> 00:10:42,800
And so, here we go.

216
00:10:42,900 --> 00:10:45,200
We've got bitmap, one bitmap to and bitmap three.

217
00:10:45,200 --> 00:10:46,400
Those are all loaded.

218
00:10:46,500 --> 00:10:50,300
And you can see that corresponds to Shadow tree and sword, right?

219
00:10:50,600 --> 00:10:54,300
And so what I can do here is I can set these, like, you know, a wine

220
00:10:54,300 --> 00:10:55,700
percentage or whatever.

221
00:10:56,300 --> 00:11:00,900
I can set these to whatever they actually are in the actual bitmap.

222
00:11:00,900 --> 00:11:05,400
So here is the aligned percentage here which I'll just go ahead and

223
00:11:05,400 --> 00:11:06,900
copy out, right?

224
00:11:08,800 --> 00:11:09,500
There it is.

225
00:11:10,000 --> 00:11:15,900
So it's a, it's got an X of .5 and it's got a, why of some

226
00:11:15,900 --> 00:11:19,400
ridiculously crazy number which is fine.

227
00:11:19,400 --> 00:11:22,500
You don't really care how crazy the number is, that's the shadow

228
00:11:22,500 --> 00:11:23,200
bitmap.

229
00:11:23,500 --> 00:11:25,800
Then we've got the second one here.

230
00:11:25,800 --> 00:11:29,700
I'll copy that out here.

231
00:11:29,800 --> 00:11:32,100
Align percentage, right?

232
00:11:33,600 --> 00:11:36,700
And that in there.

233
00:11:38,200 --> 00:11:39,200
There's Ry.

234
00:11:41,300 --> 00:11:43,600
And get rid of these now.

235
00:11:44,800 --> 00:11:45,800
And finally,

236
00:11:47,300 --> 00:11:49,300
Let's get this aligned percentage in here.

237
00:11:50,800 --> 00:11:57,500
That is the last guy and there is that a line percentage, and

238
00:11:59,000 --> 00:11:59,800
There we go.

239
00:12:05,500 --> 00:12:06,600
Should be good.

240
00:12:09,000 --> 00:12:13,500
So there we have it and once we are calling the line percentage like

241
00:12:13,500 --> 00:12:16,300
that we can get rid of these guys here, right?

242
00:12:16,300 --> 00:12:19,300
And we can just say we have it aligned percentage once we have it

243
00:12:19,300 --> 00:12:23,400
aligned percentage, this call goes away, right?

244
00:12:23,500 --> 00:12:26,500
Entirely I believe.

245
00:12:26,700 --> 00:12:32,700
And this guy up here can just be V2 align percentage and the Align

246
00:12:32,700 --> 00:12:35,200
percentage can be fault to be the point.

247
00:12:35,200 --> 00:12:37,600
Five point five since that's all good.

248
00:12:38,000 --> 00:12:38,500
And then we

249
00:12:38,600 --> 00:12:38,900
Cure.

250
00:12:38,900 --> 00:12:42,000
This is just going to be equal to the aligned percentage and it's not

251
00:12:42,000 --> 00:12:45,600
actually going to be doing that top down a line stuff at all.

252
00:12:46,200 --> 00:12:49,400
So we can get rid of top down a line like that.

253
00:12:50,300 --> 00:12:52,200
And I should be able to recompile now.

254
00:12:53,300 --> 00:12:55,700
Oops, guess I can't get rid of it quite so soon.

255
00:12:56,200 --> 00:12:57,300
I got one more step to do.

256
00:12:57,900 --> 00:12:59,600
So let's see here.

257
00:12:59,700 --> 00:13:02,900
When we do load bitmap work, we can get rid of has alignment now

258
00:13:02,900 --> 00:13:07,000
because we know that it'll just do that align percentage, so there's

259
00:13:07,000 --> 00:13:08,400
work a wide percentage.

260
00:13:08,500 --> 00:13:12,600
I'm like so and that kind of cleans that up nicely.

261
00:13:13,200 --> 00:13:17,400
And then all these has alignments also can go away because we can just

262
00:13:17,400 --> 00:13:19,200
set the default.

263
00:13:19,300 --> 00:13:23,500
Align percentage actually right here, because we now know what it

264
00:13:23,500 --> 00:13:26,400
actually is, it's always going to be that, right?

265
00:13:28,600 --> 00:13:33,100
So again you can see I'm just kind of I kind of identified an area

266
00:13:33,100 --> 00:13:35,800
where the coded a bit a little crusty because of the way that it had

267
00:13:35,800 --> 00:13:38,500
been written and I just wanted to smooth that out, make it into

268
00:13:38,500 --> 00:13:40,500
something that was more canonical.

269
00:13:40,500 --> 00:13:43,400
If that makes sense and easier to work with.

270
00:13:43,400 --> 00:13:46,300
So I went ahead and did that and we're still all correct.

271
00:13:46,300 --> 00:13:49,400
Now it looks like our alignments are all proper and so on, so that's

272
00:13:49,400 --> 00:13:49,700
good.

273
00:13:50,700 --> 00:13:55,000
So now, what I want to do is I want to take another step here, which

274
00:13:55,000 --> 00:13:57,300
is to stop having to do

275
00:13:57,500 --> 00:14:02,100
This, this stuff here with the test hero, Shadow bitmap stuff, and the

276
00:14:02,100 --> 00:14:03,400
Align percentage.

277
00:14:09,300 --> 00:14:14,700
Although actually, I guess try to think about this here, I don't know.

278
00:14:14,700 --> 00:14:18,300
Actually, if there's really all that much ways we can get anything,

279
00:14:18,300 --> 00:14:20,800
although much cleaner till we actually have a pack file.

280
00:14:22,200 --> 00:14:23,700
It's a little hard to say.

281
00:14:25,600 --> 00:14:32,400
Hmm, it's a little bit hard to say but well

282
00:14:35,200 --> 00:14:39,100
But in the end in the interim I do think I'd like to do this.

283
00:14:41,000 --> 00:14:45,400
It's just the it's a little annoying because of the filename part of

284
00:14:45,400 --> 00:14:49,900
things which we won't have in the actual fact, file file names will

285
00:14:49,900 --> 00:14:50,900
disappear.

286
00:14:51,200 --> 00:14:53,800
And so it's kind of annoying to have to preserve them but that's

287
00:14:53,800 --> 00:14:56,400
actually you know, it's not a huge deal.

288
00:14:56,400 --> 00:14:59,400
So I think what I'm going to do is I'm just going to start

289
00:15:00,000 --> 00:15:04,200
By saying that there's sort of this the bitmap table, right?

290
00:15:05,700 --> 00:15:09,400
You can see here that we had this asset that mapinfo thing which was

291
00:15:09,400 --> 00:15:12,900
going to be something that told us about bitmaps that we're going to

292
00:15:12,900 --> 00:15:13,600
load.

293
00:15:13,700 --> 00:15:19,100
So we could sort of say that for the time being, we actually have the

294
00:15:19,100 --> 00:15:24,100
data that we, you know, currently need for asset map info, right?

295
00:15:24,300 --> 00:15:26,000
And then, what I could do is, I could say.

296
00:15:26,000 --> 00:15:31,300
All right, let's pretend that we have this bitmap info table, that

297
00:15:31,300 --> 00:15:35,100
that's slightly different from the one that's actually going to be,

298
00:15:35,400 --> 00:15:38,900
In the, in the PAC file.

299
00:15:42,600 --> 00:15:43,600
At the end of the day.

300
00:15:47,100 --> 00:15:52,000
But let's just pretend for now that that we can just sort of get up

301
00:15:52,000 --> 00:15:53,600
this data, right.

302
00:15:53,600 --> 00:15:56,000
So I'm going to say that we have an acid pit mapinfo that's just

303
00:15:56,000 --> 00:15:57,500
bitmap infos, right?

304
00:15:58,100 --> 00:16:02,300
And we know that every one of these bitmaps has a bitmap info in it.

305
00:16:02,900 --> 00:16:05,400
So we kind of know that they have the same number.

306
00:16:06,100 --> 00:16:09,600
You know, that there's the same amount of them I could put it into the

307
00:16:09,600 --> 00:16:11,200
bitmap structure, right?

308
00:16:11,200 --> 00:16:16,000
I could put it into the assets, lot structure, if I wanted to, but I

309
00:16:16,000 --> 00:16:16,700
don't

310
00:16:16,900 --> 00:16:20,200
Really want to do that at the moment because I don't know whether or

311
00:16:20,200 --> 00:16:23,300
not this will be something that remains loaded or whether it's

312
00:16:23,300 --> 00:16:25,700
something that will be loaded out in chunks.

313
00:16:28,500 --> 00:16:31,200
It's kind of hard to say so I'm going to, I'm going to leave it as a

314
00:16:31,200 --> 00:16:34,800
separate thing so don't really know exactly what it's going to do.

315
00:16:34,800 --> 00:16:38,100
I'm just going to have it be a parallel array that's indexed by the

316
00:16:38,100 --> 00:16:38,600
same thing.

317
00:16:38,600 --> 00:16:42,500
So it's really no harder to use but it just it's a little bit more

318
00:16:42,500 --> 00:16:46,000
flexible that way in terms of stuff that comes out of files.

319
00:16:46,400 --> 00:16:46,700
So

320
00:16:46,800 --> 00:16:50,900
Oh okay, if I grab these bitmap, infos here, I make, you know, a

321
00:16:50,900 --> 00:16:52,500
bitmap count of them.

322
00:16:53,300 --> 00:16:57,000
What I'm going to do here is now kind of explode, the number of

323
00:16:57,000 --> 00:17:00,800
bitmaps we have just allocate a ton of them because remember this code

324
00:17:00,800 --> 00:17:04,099
is going to eventually go away and it will load that bitmap count off

325
00:17:04,099 --> 00:17:04,700
of disk.

326
00:17:04,700 --> 00:17:06,900
So this is entirely just test code.

327
00:17:06,900 --> 00:17:07,800
How many we set up here?

328
00:17:07,800 --> 00:17:08,800
It doesn't matter what we do.

329
00:17:08,800 --> 00:17:12,099
I just want to make sure that we have a ton of them at the moment, if

330
00:17:12,099 --> 00:17:12,800
that makes sense.

331
00:17:13,200 --> 00:17:15,599
And then what I'm going to do is going to make a function that's like

332
00:17:15,599 --> 00:17:16,700
debug ad.

333
00:17:16,900 --> 00:17:19,700
Map info or something like this, right?

334
00:17:20,700 --> 00:17:24,599
And what that's going to do is that's going to have something in here.

335
00:17:24,599 --> 00:17:29,500
That's like a, you know, debug used bitmap count, something like this.

336
00:17:30,600 --> 00:17:35,300
And that's going to be initialized to zero at the outset like, like

337
00:17:35,300 --> 00:17:35,700
this

338
00:17:37,300 --> 00:17:41,500
And so what I'm doing here is I'm essentially simulating what the

339
00:17:41,500 --> 00:17:43,900
asset Packer would be doing.

340
00:17:44,400 --> 00:17:47,000
And I'm just making a function that essentially imagines.

341
00:17:47,000 --> 00:17:50,500
It's actually doing the asset pack that would have normally been done

342
00:17:50,500 --> 00:17:53,400
offline just so we can have something for testing purposes.

343
00:17:53,400 --> 00:17:57,100
So what it's going to do is for every bitmap that it wants to pack in

344
00:17:57,100 --> 00:17:59,800
here, it is going to go ahead and call debug ad bitmap.

345
00:18:00,000 --> 00:18:02,300
Info and debug add bitmap.

346
00:18:02,300 --> 00:18:07,100
Info will take the Align percentage and the file name and it will

347
00:18:07,100 --> 00:18:11,800
return to you what the actual bitmap ID was of the bitmap that it

348
00:18:11,800 --> 00:18:13,000
added right?

349
00:18:14,100 --> 00:18:15,300
So that's what that's going to do.

350
00:18:19,700 --> 00:18:21,500
And we're going to reserve that first one.

351
00:18:22,500 --> 00:18:24,900
As we often do so.

352
00:18:24,900 --> 00:18:29,400
All right so if we're in here then we have our game assets.

353
00:18:30,300 --> 00:18:35,300
Like so what this is going to do is it's going to create an ID and

354
00:18:35,300 --> 00:18:37,800
that ID is going to be the assets.

355
00:18:37,800 --> 00:18:40,100
Debug used bitmap count, right?

356
00:18:40,900 --> 00:18:43,500
And we're going to increment that so that it just uses them in order.

357
00:18:43,800 --> 00:18:48,300
We're also going to assert before we do so that it was less, you know,

358
00:18:48,300 --> 00:18:52,000
than the bitmap count, the maximum bitmap count that we set

359
00:18:52,500 --> 00:18:55,600
Again, this is strictly test code, so we don't actually need to worry

360
00:18:55,600 --> 00:18:58,900
about how many we support because eventually, we'll just load the pack

361
00:18:58,900 --> 00:19:01,100
file which will tell us exactly how many we need ahead of time.

362
00:19:02,000 --> 00:19:04,400
So we have our debug at bitmap info.

363
00:19:04,400 --> 00:19:06,500
It's going to go ahead and grab us a new ID.

364
00:19:06,600 --> 00:19:10,300
We then want to fill out the actual bitmap info right asset bitmap

365
00:19:10,300 --> 00:19:11,500
info here.

366
00:19:12,700 --> 00:19:17,300
And asset bitmap info is going to contain, whatever.

367
00:19:17,300 --> 00:19:20,100
We just got passed in but you know, the two things we got passed in.

368
00:19:20,500 --> 00:19:26,600
So it's going to be the assets bitmap, infos, plus, whatever the ID

369
00:19:26,600 --> 00:19:31,800
value was, it's going to set the line percentage, and it's going to

370
00:19:31,800 --> 00:19:34,600
set the file name, which are the only two things that Action System

371
00:19:34,600 --> 00:19:35,100
that structure.

372
00:19:35,100 --> 00:19:39,100
And then it's going to go ahead and return that ID to the caller.

373
00:19:39,800 --> 00:19:42,300
And so, what we can do now is,

374
00:19:42,400 --> 00:19:47,300
Can actually make it so that we create these assets sort of, if you

375
00:19:47,300 --> 00:19:53,000
will die, sort of in a dynamic call, kind of a sense so that we can

376
00:19:53,000 --> 00:19:55,500
start to be a little bit closer to what the Packers actually doing.

377
00:19:55,500 --> 00:19:59,600
So if you see here, the way that we're adding this particular guy is,

378
00:19:59,600 --> 00:20:01,400
we're adding assets with a bitmap.

379
00:20:01,400 --> 00:20:04,600
And so what I want to do is layer another function on here, so I can

380
00:20:04,600 --> 00:20:09,400
basically just do this call each time and actually pass this

381
00:20:09,400 --> 00:20:12,000
information for the shadow of the tree and the sword.

382
00:20:12,400 --> 00:20:12,900
Right.

383
00:20:13,300 --> 00:20:19,000
And so what I want to do is I want to do something like this here, and

384
00:20:19,000 --> 00:20:23,100
I believe, if I'm not very much an error, we have an asset none which

385
00:20:23,100 --> 00:20:24,300
is the zero asset.

386
00:20:24,600 --> 00:20:29,900
So, the first thing I want to do actually, is, is on the asset count.

387
00:20:31,100 --> 00:20:33,400
Again, I kind of want to do something.

388
00:20:35,700 --> 00:20:37,400
It is not bitmap count, right?

389
00:20:37,400 --> 00:20:40,700
The asset count should actually be this, right?

390
00:20:41,100 --> 00:20:42,300
That is what should actually the

391
00:20:42,500 --> 00:20:46,700
account going to push that on and then when I need to do here is have

392
00:20:46,700 --> 00:20:48,100
again, a thing that's like,

393
00:20:51,200 --> 00:20:52,200
Debug.

394
00:20:53,400 --> 00:20:55,900
Used asset count, right?

395
00:20:56,200 --> 00:20:59,800
And these are again strictly there for just doing.

396
00:21:00,000 --> 00:21:00,500
Addition.

397
00:21:00,500 --> 00:21:04,500
So we have the assets debug eustass account.

398
00:21:11,400 --> 00:21:14,800
And what I want to be able to do now is say like I want to do add

399
00:21:14,800 --> 00:21:21,000
asset or I should say a bitmap asset or maybe begin asset.

400
00:21:21,100 --> 00:21:22,400
That's actually what I want to do.

401
00:21:23,000 --> 00:21:27,500
So I want to do begin asset, I want to be able to say which asset I am

402
00:21:27,500 --> 00:21:28,900
doing right.

403
00:21:29,100 --> 00:21:34,400
And then I want to be able to do a bitmap for this asset or look maybe

404
00:21:34,400 --> 00:21:40,400
add asset bitmap right and then I pass you know these two guys like so

405
00:21:43,400 --> 00:21:45,900
Maybe this should be called a bitmap asset.

406
00:21:46,400 --> 00:21:47,600
Maybe something like that.

407
00:21:51,300 --> 00:21:57,700
Something like this think that seems reasonable and so that's what I

408
00:21:57,700 --> 00:22:00,400
actually want this to end up looking like just something where I can

409
00:22:00,400 --> 00:22:03,300
now do these ad calls.

410
00:22:03,300 --> 00:22:07,400
So each time I do this it's going to automatically create the super

411
00:22:07,400 --> 00:22:12,600
structure necessary to support all this stuff as if we had loaded it

412
00:22:12,600 --> 00:22:16,100
out of a Pac file again, just simulating that pack file.

413
00:22:16,400 --> 00:22:19,800
So I can see how it would be how it would all work, right?

414
00:22:21,100 --> 00:22:23,800
Then I can, I can do something like this, right?

415
00:22:25,300 --> 00:22:25,800
So yeah.

416
00:22:26,100 --> 00:22:29,800
So this would actually want to work like this, right?

417
00:22:32,900 --> 00:22:34,700
Where we can begin an asset type.

418
00:22:34,900 --> 00:22:36,700
We can Define that asset type.

419
00:22:37,100 --> 00:22:41,200
And we can add as many assets as we want in there and then off we go,

420
00:22:41,500 --> 00:22:42,100
right?

421
00:22:42,700 --> 00:22:46,400
So yeah, that was sword, right?

422
00:22:48,000 --> 00:22:51,500
So yeah, so what I need to do now is actually defined these functions.

423
00:22:51,900 --> 00:22:54,900
We've got that sort of debug notion happening here and I kind of like

424
00:22:54,900 --> 00:22:55,100
that.

425
00:22:55,100 --> 00:23:00,400
So that's kind of kind of go down here as a little thing to do Casey.

426
00:23:00,400 --> 00:23:02,500
These should go away one.

427
00:23:02,700 --> 00:23:07,100
We actually load a asset file pack file.

428
00:23:09,100 --> 00:23:12,000
All right, so yeah.

429
00:23:12,000 --> 00:23:16,900
So what I want to do is make this do what this was doing, right?

430
00:23:17,600 --> 00:23:19,600
And that's should be pretty easy to do.

431
00:23:19,900 --> 00:23:22,500
So let's go ahead and make that happen here.

432
00:23:22,500 --> 00:23:26,300
Are you know, three calls I've already defined again, right?

433
00:23:26,300 --> 00:23:27,300
The usage code first.

434
00:23:27,300 --> 00:23:31,300
I've written the usage code, we have begin asset type.

435
00:23:31,700 --> 00:23:32,900
So here we have that.

436
00:23:33,500 --> 00:23:38,800
Like so we have what we want, the asset type ID to

437
00:23:40,000 --> 00:23:41,800
So there's the thing, type ID.

438
00:23:43,400 --> 00:23:50,500
Like so in this case, let's see we've got a file name and the aligned

439
00:23:50,500 --> 00:23:51,500
percentage.

440
00:23:51,700 --> 00:23:54,000
It's weird that those came in the opposite order here.

441
00:23:54,500 --> 00:23:58,200
I think I want to keep them in the same order always if I can.

442
00:23:58,200 --> 00:23:59,800
So I think I'm going to do it that.

443
00:24:00,100 --> 00:24:04,600
A like, so just to keep that a little bit more consistent.

444
00:24:04,600 --> 00:24:06,700
I don't like having things always go in different orders.

445
00:24:06,700 --> 00:24:08,000
I find to be confusing.

446
00:24:08,900 --> 00:24:09,500
So, there we go.

447
00:24:09,500 --> 00:24:12,300
We've got the line percentage and stuff in there.

448
00:24:12,300 --> 00:24:13,200
That's all good.

449
00:24:13,200 --> 00:24:15,300
We're passing and begin asset, type blah, blah blah.

450
00:24:15,300 --> 00:24:16,600
Yes that's all nice.

451
00:24:17,100 --> 00:24:22,100
And then we have, of course, the thing that ends the game asset.

452
00:24:22,300 --> 00:24:22,700
Okay.

453
00:24:23,800 --> 00:24:29,500
So if we have this and we want it to essentially do what this does, we

454
00:24:29,500 --> 00:24:34,700
now need to take this code up here and break it up into pieces, right?

455
00:24:35,200 --> 00:24:38,900
And so what we can do is we can say, well, first of all, we know what

456
00:24:38,900 --> 00:24:41,700
the type ID is that we're assigning here.

457
00:24:42,000 --> 00:24:46,600
So, what I can do is maybe make something in here that's like, okay,

458
00:24:46,600 --> 00:24:51,400
you know, debug defined type or something like this.

459
00:24:53,000 --> 00:24:55,000
Debug asset type, something like that.

460
00:24:55,800 --> 00:25:00,400
And what I can do is set that equal to whatever it would be when we

461
00:25:00,400 --> 00:25:02,400
start to Define one of these, right?

462
00:25:03,800 --> 00:25:07,500
And what I can also do is I can assert when I do that, this is a

463
00:25:07,500 --> 00:25:10,700
pretty standard construction Mecca, methodology.

464
00:25:11,200 --> 00:25:14,000
If you can only construct, one thing at a particular time, and, you

465
00:25:14,000 --> 00:25:15,700
know, that you're not multi-threaded, right?

466
00:25:15,700 --> 00:25:18,900
You just got of assert that no one else is in the middle of a begin

467
00:25:18,900 --> 00:25:22,400
asset type right here by saying, this has to be equal to 0.

468
00:25:23,700 --> 00:25:24,200
And you know what?

469
00:25:24,200 --> 00:25:27,400
The other thing that I should mention here too is, I don't actually

470
00:25:27,400 --> 00:25:31,100
know why I'm bothering considering these things to 0 because my

471
00:25:31,100 --> 00:25:33,900
understanding was we always said that all this stuff was clear, 20

472
00:25:34,600 --> 00:25:38,900
always anyway so that's kind of stupid that I'm bothering with that.

473
00:25:39,900 --> 00:25:41,100
I should probably stop at that.

474
00:25:41,100 --> 00:25:43,900
That's just the spec of how the initial memory comes in.

475
00:25:47,400 --> 00:25:48,600
I should probably make.

476
00:25:49,600 --> 00:25:53,900
Something here, like a push truck zero, or something like that.

477
00:25:54,000 --> 00:25:56,800
And in fact that maybe something to do sometime soon.

478
00:25:56,800 --> 00:26:02,900
Actually, something in here where we have a push struct to do Casey,

479
00:26:03,200 --> 00:26:06,300
optional clear parameter.

480
00:26:08,600 --> 00:26:09,400
All right.

481
00:26:11,100 --> 00:26:12,400
We'll take care of that a little bit later.

482
00:26:12,500 --> 00:26:16,300
Anyway, point being we'll set that here when we end the asset type we

483
00:26:16,300 --> 00:26:17,200
will assert.

484
00:26:17,500 --> 00:26:17,800
Oops.

485
00:26:17,800 --> 00:26:23,900
This should be equal zero will assert that it's, you know, is actually

486
00:26:23,900 --> 00:26:26,800
valid by the time I get down here and then we'll set it clean.

487
00:26:26,800 --> 00:26:29,600
So we can begin and end in asset type.

488
00:26:30,000 --> 00:26:36,800
So when we actually do this, we have a debug asset used asset count.

489
00:26:40,000 --> 00:26:42,600
All right, assets and asset types, not the same.

490
00:26:43,200 --> 00:26:45,100
So I thought this was a, this was a mistake.

491
00:26:45,100 --> 00:26:47,000
This should not have been that way, right?

492
00:26:47,400 --> 00:26:51,100
The asset type is supposed to be the same as the bitmap count at the

493
00:26:51,100 --> 00:26:52,100
moment, right?

494
00:26:53,800 --> 00:26:55,100
That's actually

495
00:26:56,300 --> 00:26:57,200
yeah.

496
00:27:01,000 --> 00:27:01,600
Hmm.

497
00:27:12,900 --> 00:27:17,400
Well, we'll keep going, I'm having some thoughts, but, you know, I

498
00:27:17,400 --> 00:27:18,000
often have them.

499
00:27:18,200 --> 00:27:22,400
So we have a certain number of assets here and we want to have a debug

500
00:27:22,400 --> 00:27:26,700
used asset count, which we have there and so, that's more correct now,

501
00:27:26,700 --> 00:27:27,000
right?

502
00:27:27,000 --> 00:27:27,800
That's all good.

503
00:27:27,800 --> 00:27:32,100
Okay, so when we come in here, we want to initialize this.

504
00:27:32,100 --> 00:27:37,100
So that the asset type, its first asset index should be equal to

505
00:27:37,100 --> 00:27:42,600
whatever the debug used asset count is right because

506
00:27:42,700 --> 00:27:46,900
That's what it would be and the one passed last should be initialized

507
00:27:46,900 --> 00:27:48,900
to just be like, okay, so it's just the null.

508
00:27:48,900 --> 00:27:49,900
It's a zero range.

509
00:27:49,900 --> 00:27:54,800
Like there's no actual Assets in it, but it's set up for that so far,

510
00:27:54,800 --> 00:27:55,300
right.

511
00:27:56,800 --> 00:28:00,700
Then when you end, I guess there's nothing in particular we would have

512
00:28:00,700 --> 00:28:01,600
to do when you end.

513
00:28:01,600 --> 00:28:05,200
So it's really only during add bitmap assets that the rest of it has

514
00:28:05,200 --> 00:28:06,400
to make some sense.

515
00:28:06,700 --> 00:28:10,100
And so the way this would work is we would have to get an asset.

516
00:28:10,100 --> 00:28:14,500
We'd have to do this work here, but then we'd also have to make sure

517
00:28:14,900 --> 00:28:18,600
that we essentially take, whatever the type was that you were working

518
00:28:18,600 --> 00:28:19,800
with, right?

519
00:28:20,000 --> 00:28:23,000
So we'd want to assert first of all that you were inside a begin asset

520
00:28:23,000 --> 00:28:25,600
type set, although we just crash if you weren't.

521
00:28:25,600 --> 00:28:26,400
So maybe those

522
00:28:27,000 --> 00:28:29,100
Help us at all but you know might as well.

523
00:28:29,800 --> 00:28:34,300
So we go ahead and in here, we take whatever that asset type was and

524
00:28:34,300 --> 00:28:37,700
whatever that asset type was, we're going to take whatever the last

525
00:28:37,700 --> 00:28:39,800
one in the range was and we're going to increment it.

526
00:28:39,800 --> 00:28:42,700
So that's the asset that we're actually going to use right?

527
00:28:47,100 --> 00:28:51,400
And I guess we also need to set this debug used asset account.

528
00:28:51,400 --> 00:28:54,200
So, I suppose actually, the way we could do that though is just do

529
00:28:54,200 --> 00:28:56,800
that in here, like so, right.

530
00:28:57,500 --> 00:28:59,500
So, that's going to be the new used asset Camp.

531
00:28:59,500 --> 00:28:59,900
Okay.

532
00:29:00,600 --> 00:29:02,700
So we go ahead and we start setting those assets.

533
00:29:02,700 --> 00:29:05,900
Inside the asset, we set the tags to nothing and then we want to

534
00:29:05,900 --> 00:29:08,200
actually set that slot ID.

535
00:29:08,700 --> 00:29:13,300
The slot ID is going to be the result of whatever.

536
00:29:13,300 --> 00:29:14,800
You know you know this call right.

537
00:29:14,800 --> 00:29:15,300
So we're going to

538
00:29:15,500 --> 00:29:19,600
Bitmap that the person asked us to add and that's going to be the slot

539
00:29:19,600 --> 00:29:23,300
idea because that's where you would go and get this thing right.

540
00:29:26,400 --> 00:29:27,200
Let's see here.

541
00:29:27,700 --> 00:29:33,200
Type first asset into X actually want.

542
00:29:33,500 --> 00:29:34,900
Well, I guess I can do it this way.

543
00:29:39,000 --> 00:29:39,600
So,

544
00:29:41,100 --> 00:29:43,000
Debug used asset count.

545
00:29:46,100 --> 00:29:50,200
All right, so I realize that's a little bit complicated, so we

546
00:29:50,200 --> 00:29:51,100
probably want to step through it.

547
00:29:51,100 --> 00:29:54,300
Anyway, even if there weren't any bugs in it, we would want to step

548
00:29:54,300 --> 00:29:56,500
through it just so you can take a look at it probably.

549
00:29:57,000 --> 00:29:59,800
So let's go ahead and see if we can

550
00:30:00,000 --> 00:30:02,700
Set a breakpoint there at allocate game assets just so I can sort of

551
00:30:02,700 --> 00:30:04,700
show you what that's doing.

552
00:30:05,500 --> 00:30:10,500
So in we come here and we start this sort of situation, I'm going to

553
00:30:10,500 --> 00:30:13,700
go ahead and make the call stack a little smaller here so I can see

554
00:30:14,300 --> 00:30:15,800
the asset structure a little bit more.

555
00:30:16,700 --> 00:30:21,300
So, here's what we've got, we have a couple different things in play.

556
00:30:21,300 --> 00:30:24,400
First of all, we have our asset types array, right?

557
00:30:25,100 --> 00:30:29,900
Then we have our assets array, and then we have our bitmap

558
00:30:30,000 --> 00:30:34,900
Map and bitmap infos array, the bitmap info is the one we're filling

559
00:30:34,900 --> 00:30:35,000
out.

560
00:30:35,000 --> 00:30:37,700
The bitmaps is where they'll go when they're actually loaded, right?

561
00:30:39,000 --> 00:30:41,800
So, let's take a look at these, and let's see what happens.

562
00:30:41,800 --> 00:30:46,000
So, when we begin this asset type, we're going to go ahead and grab

563
00:30:46,000 --> 00:30:48,000
out of assets.

564
00:30:48,300 --> 00:30:54,100
We're going to grab out the one that corresponds to Shadow, which is

565
00:30:54,100 --> 00:30:54,300
one.

566
00:30:54,300 --> 00:30:55,500
So we're going to grab out this one.

567
00:30:56,500 --> 00:30:59,800
We're going to take our used asset count, which at the moment is

568
00:31:00,000 --> 00:31:00,600
Zero.

569
00:31:00,900 --> 00:31:03,700
Although I feel like we should kind of reserved slots for that as

570
00:31:03,700 --> 00:31:04,100
well.

571
00:31:04,200 --> 00:31:07,500
I feel like, I don't know, just just a hunch.

572
00:31:08,000 --> 00:31:10,300
So that zero is a meaningless value.

573
00:31:10,300 --> 00:31:12,800
But so in fact let's just let's just do that.

574
00:31:12,800 --> 00:31:13,800
I would like to do that.

575
00:31:13,800 --> 00:31:18,200
I think, you know, so we can say here

576
00:31:23,100 --> 00:31:28,400
Debug choose bitmap count, debug used asset account so that we just

577
00:31:28,400 --> 00:31:31,000
leave that zero slot as like a mail slot.

578
00:31:31,400 --> 00:31:34,100
It's doesn't cost us very much to do that and I feel like it makes

579
00:31:34,100 --> 00:31:35,700
things a little easier.

580
00:31:36,500 --> 00:31:38,300
Oops, little too far there.

581
00:31:40,400 --> 00:31:43,500
Okay, so taking a look at it again.

582
00:31:43,900 --> 00:31:49,800
So we come in here, we grab that out and we grab out the asset type

583
00:31:49,800 --> 00:31:51,200
which would correspond to this one.

584
00:31:51,600 --> 00:31:54,100
We set its first SS at index 2.

585
00:31:54,100 --> 00:31:57,200
Whatever the debug used asset count is, which is one, you can see it's

586
00:31:57,200 --> 00:32:00,400
set the first set index there, and then we set the One path the last

587
00:32:00,400 --> 00:32:02,000
asset equal to one as well, right?

588
00:32:02,000 --> 00:32:04,600
So we're saying there's like, no assets and it right now, but if there

589
00:32:04,600 --> 00:32:06,000
were going to be one, it would be.

590
00:32:06,200 --> 00:32:08,200
Number one would be the first one, right?

591
00:32:08,400 --> 00:32:09,800
So then we try to add a bitmap

592
00:32:09,900 --> 00:32:12,300
That first we got to pack up that V2.

593
00:32:13,900 --> 00:32:17,900
We grab out the assets, whatever is the one that that is the sort of a

594
00:32:17,900 --> 00:32:19,900
pens to the end of the asset.

595
00:32:19,900 --> 00:32:21,800
We're currently working with, right?

596
00:32:21,900 --> 00:32:24,700
So there we appended one on and we push that index up.

597
00:32:25,000 --> 00:32:28,500
We set the tags for that guy, and remember, that is one of these guys

598
00:32:28,500 --> 00:32:31,700
in here, that's going to be asset one, right?

599
00:32:32,300 --> 00:32:36,500
So we set that and those are both already 0 but were clearing the

600
00:32:36,500 --> 00:32:36,900
matches.

601
00:32:36,900 --> 00:32:41,900
In case we then have the slot ID for debug bitmap info right?

602
00:32:42,300 --> 00:32:43,400
That debug a bit.

603
00:32:43,600 --> 00:32:47,900
Info call is going to add a bitmap info into our bitmap info array.

604
00:32:48,900 --> 00:32:50,800
So that's going to add it into.

605
00:32:50,800 --> 00:32:52,100
Well, we'll see where it's going to add into.

606
00:32:52,100 --> 00:32:54,800
I guess we figure out what idea we're going to add.

607
00:32:54,800 --> 00:32:55,600
It's add one, right?

608
00:32:55,600 --> 00:32:57,700
That's the first one because we're reserving slot zero.

609
00:32:58,200 --> 00:32:59,300
So there's that first one.

610
00:33:00,800 --> 00:33:02,100
And in, here we go.

611
00:33:02,100 --> 00:33:04,400
All right, let's get that bitmap, info.

612
00:33:04,400 --> 00:33:06,000
That corresponds to Ivy, we just picked.

613
00:33:06,000 --> 00:33:07,600
Let's set the file name which we did.

614
00:33:07,600 --> 00:33:10,500
Let's set the Align percentage which we did and let's return that ID

615
00:33:10,500 --> 00:33:11,100
back.

616
00:33:11,100 --> 00:33:14,700
And so now that the slot ID here gets set to correspond to that bitmap

617
00:33:14,700 --> 00:33:17,600
info that we just sent out, right?

618
00:33:19,600 --> 00:33:20,100
What's your name?

619
00:33:21,600 --> 00:33:22,100
So yeah.

620
00:33:27,400 --> 00:33:29,600
All right, so that's all good.

621
00:33:31,400 --> 00:33:35,200
And then when we go to end assets, really all we're doing is just

622
00:33:35,200 --> 00:33:35,700
finalizing.

623
00:33:35,700 --> 00:33:39,600
This by saying, the debug asset count should be, at least, however,

624
00:33:39,600 --> 00:33:43,200
many we added that guy, and then we're going to set that asset type

625
00:33:43,200 --> 00:33:44,100
back down to zero.

626
00:33:44,300 --> 00:33:44,800
Okay?

627
00:33:45,400 --> 00:33:48,800
So now, let's go ahead and run it and as you can see, thankfully, we

628
00:33:48,800 --> 00:33:49,900
are working just fine.

629
00:33:49,900 --> 00:33:51,000
We've got our little

630
00:33:52,200 --> 00:33:54,800
I will trees in there, which is what we wanted, and we're loading

631
00:33:54,800 --> 00:33:55,500
everything fine.

632
00:33:55,900 --> 00:33:58,100
So, let's go ahead and now push a little bit forwards.

633
00:33:58,100 --> 00:34:00,700
Now, that we have this ability, let's push a little bit for words and

634
00:34:00,700 --> 00:34:01,700
see if we can get.

635
00:34:01,800 --> 00:34:03,000
Our grasses are.

636
00:34:03,000 --> 00:34:05,900
Tufts, are these sorts of guys working that way?

637
00:34:05,900 --> 00:34:08,699
So, what I want to do is say, I want to begin an asset type.

638
00:34:08,699 --> 00:34:12,000
I want a bit in the beginning asset type grass to play with this guy a

639
00:34:12,000 --> 00:34:12,699
little bit.

640
00:34:12,699 --> 00:34:18,100
I want to take that, that sort of grasp, it map name.

641
00:34:18,199 --> 00:34:18,900
I want to add that.

642
00:34:18,900 --> 00:34:21,800
Now, using the system that we have in place, and this time,

643
00:34:22,000 --> 00:34:23,500
Add two things to it, right?

644
00:34:23,500 --> 00:34:26,300
Because we have two different graphs, that maps that correspond to the

645
00:34:26,300 --> 00:34:27,400
same asset type.

646
00:34:27,400 --> 00:34:30,000
They're two different grasses that we have right?

647
00:34:30,000 --> 00:34:32,800
Unlike these guys where we were only specifying one bitmap.

648
00:34:33,500 --> 00:34:35,600
So I'm going to make that work that way.

649
00:34:35,600 --> 00:34:39,000
And then I'm going to pull this out of here and turn it into one of

650
00:34:39,000 --> 00:34:39,400
these.

651
00:34:39,400 --> 00:34:39,600
Right?

652
00:34:39,600 --> 00:34:41,400
Because we already have that asset grass on there.

653
00:34:41,699 --> 00:34:44,000
And so what that'll do is that'll Force compile error.

654
00:34:45,100 --> 00:34:48,000
That'll Force compile error over 0 function is not take to Argus,

655
00:34:48,000 --> 00:34:51,600
looks like I didn't put a default on their should have.

656
00:34:52,600 --> 00:34:53,100
Here we go.

657
00:34:55,000 --> 00:34:57,900
So what I want to do now is just forced a compile error, back out here

658
00:34:57,900 --> 00:35:01,800
where we were doing this asset grass stuff here, where we were doing a

659
00:35:01,800 --> 00:35:04,000
random Choice, sort of a situation.

660
00:35:04,800 --> 00:35:06,800
And so what I'm going to do, I'm not going to do anything.

661
00:35:06,800 --> 00:35:09,600
Particularly complex her will probably want to do something a little

662
00:35:09,600 --> 00:35:12,000
bit more complicated later.

663
00:35:12,000 --> 00:35:14,700
But what I'm going to do here is just say that stamp

664
00:35:14,900 --> 00:35:21,200
Um you know this this this stamp here, what I want to do is get an

665
00:35:21,200 --> 00:35:26,900
asset, I want to get an asset ID back, sort of at random from the set

666
00:35:26,900 --> 00:35:27,700
of asset ID.

667
00:35:27,700 --> 00:35:31,400
So what I'm going to do is I'm going to first of all say translate

668
00:35:31,400 --> 00:35:35,000
this, I'm going to I'm going to comment out the stone when here and

669
00:35:35,000 --> 00:35:38,600
I'm going to say that instead of a loaded bitmap stamp thing here I'm

670
00:35:38,600 --> 00:35:42,300
going to say that we have a bitmap ID for the stamp, okay?

671
00:35:43,200 --> 00:35:44,700
And then I'm going to say that that bit

672
00:35:44,800 --> 00:35:50,400
app ID for the stamp is going to be random asset from right?

673
00:35:50,400 --> 00:35:55,800
And I'm going to pass the game assets and I'm going to say that I

674
00:35:55,800 --> 00:35:59,900
would like you to pick a random asset using this series that

675
00:36:00,000 --> 00:36:03,600
I have this random series, I'd like you to pick a random asset from

676
00:36:03,600 --> 00:36:05,300
the set of assets that you have.

677
00:36:05,700 --> 00:36:11,400
As long as they are of, you know, that, that type that I have here,

678
00:36:11,400 --> 00:36:12,800
the grass type, right?

679
00:36:13,100 --> 00:36:16,400
So look through the grasses that you have and just give me back a

680
00:36:16,400 --> 00:36:18,100
random one and I'm not going to do.

681
00:36:18,500 --> 00:36:22,300
I'm not going to do any of this anymore, and then when we go to render

682
00:36:22,300 --> 00:36:26,100
it here and we do this little stamp thing, it's going to use the, the

683
00:36:26,100 --> 00:36:29,000
ID based stuff in the it's going to.

684
00:36:29,000 --> 00:36:29,900
It's going to use the

685
00:36:30,000 --> 00:36:32,900
Debased drawing instead of the bitmap base drawing, right?

686
00:36:33,200 --> 00:36:37,000
And so then what we have to do is we have to take this random asset

687
00:36:37,000 --> 00:36:44,000
from and translate that over into our sort of load asset our whole

688
00:36:44,000 --> 00:36:45,200
regime here, right?

689
00:36:45,900 --> 00:36:49,900
So it's kind of a kin to this guy, this get bit first bitmap, it's

690
00:36:49,900 --> 00:36:54,300
basically the same thing only instead now of just getting whatever the

691
00:36:54,300 --> 00:36:55,800
one that happens to be first.

692
00:36:56,100 --> 00:36:59,900
Instead, we're going to go ahead and get one based on picking.

693
00:37:00,000 --> 00:37:01,500
Random value, right?

694
00:37:01,900 --> 00:37:04,200
So, if I take this random series here,

695
00:37:05,600 --> 00:37:06,300
We have.

696
00:37:07,700 --> 00:37:11,100
And maybe that to make it look more like the other call, maybe the

697
00:37:11,100 --> 00:37:14,200
random series should come last like that.

698
00:37:14,600 --> 00:37:15,800
So, let's do it this way.

699
00:37:15,900 --> 00:37:16,300
I think.

700
00:37:16,300 --> 00:37:17,400
I like the look of that better.

701
00:37:17,400 --> 00:37:18,800
It lines up a little bit nicer.

702
00:37:19,700 --> 00:37:20,600
So here we go.

703
00:37:22,900 --> 00:37:25,500
So we go ahead and grab out that asset type assuming that there

704
00:37:25,500 --> 00:37:27,900
actually is arranged in the asset type.

705
00:37:28,200 --> 00:37:31,200
What I'm going to do is I'm going to say, why don't you do a random

706
00:37:31,200 --> 00:37:31,700
choice?

707
00:37:32,900 --> 00:37:34,000
so, we have here, like,

708
00:37:39,500 --> 00:37:41,600
Random choice for these two.

709
00:37:41,600 --> 00:37:43,600
These two values basically tell me the range, right?

710
00:37:43,600 --> 00:37:48,100
So, I've got a count here and the count is the range between them,

711
00:37:48,700 --> 00:37:49,300
like, so,

712
00:37:50,400 --> 00:37:51,100
That makes sense.

713
00:37:51,900 --> 00:37:55,300
So, what I want to do is I want to figure out

714
00:37:59,900 --> 00:38:02,800
Some random one that's inside the count of these, right?

715
00:38:02,800 --> 00:38:05,800
So I want to choose among the the ones that I have available.

716
00:38:06,000 --> 00:38:09,400
I then want to grab that one out and return that as the slot ID.

717
00:38:09,800 --> 00:38:10,300
Right.

718
00:38:12,500 --> 00:38:13,200
Let's see here.

719
00:38:13,300 --> 00:38:15,000
Random Choice.

720
00:38:15,000 --> 00:38:16,300
Can I cover everyone?

721
00:38:16,300 --> 00:38:21,200
That's right now, it's already appointed so that I believe should give

722
00:38:21,200 --> 00:38:23,100
us a random vote.

723
00:38:23,400 --> 00:38:24,100
What happened?

724
00:38:24,400 --> 00:38:25,800
It means set a breakpoint there.

725
00:38:26,000 --> 00:38:27,000
Guess that was an old break.

726
00:38:28,300 --> 00:38:28,900
Oh, dear.

727
00:38:29,300 --> 00:38:29,800
Well

728
00:38:33,300 --> 00:38:34,200
That was awesome.

729
00:38:34,600 --> 00:38:36,500
Well, we're definitely picking an asset.

730
00:38:36,700 --> 00:38:40,200
I just don't think we're picking the right asset to say the least.

731
00:38:40,700 --> 00:38:41,800
That was pretty funny.

732
00:38:42,500 --> 00:38:44,500
You have to admit, that was that's pretty funny.

733
00:38:45,300 --> 00:38:49,900
All right, so we're still lining up with trees in our asset grass for

734
00:38:49,900 --> 00:38:50,600
some reason.

735
00:38:51,000 --> 00:38:52,500
So let's go ahead and debug that.

736
00:38:52,500 --> 00:38:53,500
That that is.

737
00:38:55,000 --> 00:38:56,900
That's pretty great though.

738
00:38:58,600 --> 00:38:59,800
I kind of like that.

739
00:39:01,700 --> 00:39:02,900
That's, that's pretty great.

740
00:39:03,900 --> 00:39:04,400
Okay?

741
00:39:08,100 --> 00:39:13,000
That's sometimes bugs are, you know, sometimes bugs are frustrating

742
00:39:13,000 --> 00:39:15,100
and other times bugs are just kind of fun and silly.

743
00:39:16,000 --> 00:39:16,600
All right?

744
00:39:18,600 --> 00:39:19,500
Sorry, where was I?

745
00:39:19,900 --> 00:39:23,700
So, let's take a look here and see what our tables actually look like

746
00:39:24,700 --> 00:39:24,900
just.

747
00:39:24,900 --> 00:39:29,800
So we can see if we've done anything obviously stupid before we try to

748
00:39:29,800 --> 00:39:32,600
debug this in sort of a heart of your way.

749
00:39:33,700 --> 00:39:41,400
So, okay, right now, we know that what we've got in the the asset

750
00:39:41,400 --> 00:39:43,000
thing here, asset grass, right?

751
00:39:43,400 --> 00:39:44,600
We know that it's this one here.

752
00:39:44,600 --> 00:39:47,700
Number five, right 0, 1 2 3 4 5, right?

753
00:39:50,200 --> 00:39:54,700
So notice this guy, so that means the first asset index there is going

754
00:39:54,700 --> 00:39:55,500
to be 0.

755
00:39:56,200 --> 00:39:56,600
Nice.

756
00:39:57,400 --> 00:39:58,000
Yep.

757
00:39:58,000 --> 00:39:59,100
I can already see the bug.

758
00:39:59,100 --> 00:40:01,800
Didn't even have to step through it any further than that and I

759
00:40:01,800 --> 00:40:03,400
already know what the bug is.

760
00:40:04,200 --> 00:40:04,500
Yeah.

761
00:40:04,500 --> 00:40:05,700
So it's the assets.

762
00:40:05,900 --> 00:40:09,600
Obviously we have to still add the first asset.

763
00:40:09,600 --> 00:40:13,000
We picked a random in that count there.

764
00:40:13,200 --> 00:40:14,700
Do we have a random between

765
00:40:15,600 --> 00:40:22,600
I don't know if we do random made, random random next, you into random

766
00:40:22,600 --> 00:40:27,300
Choice, random you lateral render between we have a random between

767
00:40:27,700 --> 00:40:32,800
right here, but I don't know if it includes the max or not.

768
00:40:33,900 --> 00:40:34,500
Let's see.

769
00:40:34,500 --> 00:40:39,400
Min plus random next Max Plus 1, minus min.

770
00:40:40,300 --> 00:40:47,600
So it actually it actually does include the maximum value which is not

771
00:40:47,600 --> 00:40:48,200
really what I wanted.

772
00:40:48,200 --> 00:40:49,300
So I'm going to leave it this way.

773
00:40:49,600 --> 00:40:50,500
Let's leave it this way.

774
00:40:52,000 --> 00:40:52,500
All right.

775
00:40:53,400 --> 00:40:56,300
So that seems that seems same.

776
00:40:57,200 --> 00:40:58,500
Let's see how we do here.

777
00:41:01,300 --> 00:41:04,600
Okay, correct me if I'm wrong but my trees have disappeared.

778
00:41:06,600 --> 00:41:07,400
Do you see this?

779
00:41:07,400 --> 00:41:08,100
Are you seeing what?

780
00:41:08,100 --> 00:41:08,700
I'm seeing?

781
00:41:08,800 --> 00:41:13,500
My trees, my poor, little trees have disappeared, right?

782
00:41:13,600 --> 00:41:14,400
They're gone.

783
00:41:14,800 --> 00:41:15,900
They're totally gone.

784
00:41:16,600 --> 00:41:21,400
I do have a idea, by the way of what this probably is, but

785
00:41:29,000 --> 00:41:31,400
If it's not one thing, it's another sometimes.

786
00:41:31,900 --> 00:41:36,700
So there's thing that we have not talked about yet.

787
00:41:41,700 --> 00:41:42,200
Oh wait, no.

788
00:41:42,200 --> 00:41:43,800
But I haven't done this yet.

789
00:41:43,800 --> 00:41:44,800
It's just not.

790
00:41:45,000 --> 00:41:45,800
Okay, nevermind.

791
00:41:45,800 --> 00:41:49,900
I don't need to tell her I was going to say, there was a thing that I

792
00:41:49,900 --> 00:41:53,600
was going to be like, oh, I got to talk about this thing because this

793
00:41:53,600 --> 00:41:54,200
could be what it is.

794
00:41:54,200 --> 00:41:56,900
But now I think about it, this this has nothing to do with it because

795
00:41:57,000 --> 00:41:59,600
I haven't actually done the thing that I was about to say.

796
00:42:00,000 --> 00:42:02,100
So there's no way that I could be it never mind.

797
00:42:03,000 --> 00:42:04,500
We didn't get that far yet.

798
00:42:04,900 --> 00:42:08,900
Anyway, so yeah, so why am I not seeing any trees?

799
00:42:08,900 --> 00:42:14,300
First of all I feel like that is a little bit odd what you say because

800
00:42:14,300 --> 00:42:17,200
I don't understand why I'm not seeing my trees, my trees should be

801
00:42:17,200 --> 00:42:21,600
there and I don't quite get why they have have disappeared from the

802
00:42:21,600 --> 00:42:23,800
face of handmade hero.

803
00:42:24,500 --> 00:42:29,900
So what I want to do first, let's just let's just take out the

804
00:42:30,000 --> 00:42:32,200
round chunk filling entirely here.

805
00:42:37,000 --> 00:42:44,100
Sadek Foo equals 0, if boo.

806
00:42:45,600 --> 00:42:46,800
Equal 0.

807
00:42:48,800 --> 00:42:49,300
There you go.

808
00:42:49,300 --> 00:42:50,100
Are you happy now?

809
00:42:50,100 --> 00:42:50,800
Compiler?

810
00:42:52,500 --> 00:42:54,000
Let me just see if the trees are there.

811
00:42:54,000 --> 00:43:00,300
So the trees are there if I don't try to render those ground chunks.

812
00:43:00,700 --> 00:43:02,400
So what's going on there?

813
00:43:03,100 --> 00:43:09,200
The act of trying to do this, the act of getting this random asset and

814
00:43:09,200 --> 00:43:10,100
pushing the bitmap.

815
00:43:10,100 --> 00:43:12,600
So if I didn't do that, right?

816
00:43:14,300 --> 00:43:16,600
Then, we'd be fine, right?

817
00:43:17,900 --> 00:43:23,900
So the act of doing that push bitmap is causing us to get a load asset

818
00:43:23,900 --> 00:43:24,700
to occur.

819
00:43:27,200 --> 00:43:31,600
Now that I think about it, did we ever actually bother to make that be

820
00:43:31,600 --> 00:43:33,200
thread safe and so on?

821
00:43:33,200 --> 00:43:36,000
I don't actually know if we did, let's take a look.

822
00:43:36,700 --> 00:43:37,400
Let me see here.

823
00:43:37,400 --> 00:43:43,500
What we've got load asset asset there is load asset.

824
00:43:46,800 --> 00:43:47,300
Somewhere.

825
00:43:47,300 --> 00:43:50,100
There is a call to load asset within the renderer

826
00:43:55,500 --> 00:43:56,500
load asset.

827
00:43:58,700 --> 00:43:59,100
Huh.

828
00:44:00,400 --> 00:44:01,100
What did I did?

829
00:44:01,100 --> 00:44:02,700
I what do they call that function?

830
00:44:02,800 --> 00:44:05,800
So it's load bitmap asset, duh.

831
00:44:07,100 --> 00:44:07,500
Yeah.

832
00:44:08,600 --> 00:44:10,500
Alright are just little bit map, I guess.

833
00:44:11,600 --> 00:44:13,700
So if we call that load bitmap function,

834
00:44:18,200 --> 00:44:19,200
I want to see.

835
00:44:22,500 --> 00:44:27,100
Whether we're all multi-threading friendly here and it looks like we

836
00:44:27,100 --> 00:44:31,300
did actually do this in a way that tried to be thread friendly there

837
00:44:32,000 --> 00:44:38,800
you call platform at entry to do that little bit map, work, 0 and 0

838
00:44:38,800 --> 00:44:41,700
and this stuff here should is.

839
00:44:41,800 --> 00:44:42,200
Yeah.

840
00:44:42,400 --> 00:44:45,600
Okay, so I forgot to actually go in here.

841
00:44:46,000 --> 00:44:47,000
It has been a long day.

842
00:44:48,000 --> 00:44:49,600
So we did all that bitmap info stuff.

843
00:44:49,600 --> 00:44:51,600
We're not actually using it right.

844
00:44:51,800 --> 00:44:56,200
And it says what the ID that we wanted the bitmap to be, was we never

845
00:44:56,200 --> 00:44:57,200
actually store it.

846
00:44:57,200 --> 00:44:58,500
So what we want to do, right?

847
00:44:58,500 --> 00:44:59,900
Is we want to get rid of this.

848
00:45:00,000 --> 00:45:04,800
Stuff that we had here and we want to just go ahead and push just this

849
00:45:04,800 --> 00:45:07,200
information on none of this other stuff.

850
00:45:07,600 --> 00:45:11,200
Because once we get in here, we don't actually need the aligned

851
00:45:11,200 --> 00:45:15,500
percentage or the bit, the bitmap file name anymore because both of

852
00:45:15,500 --> 00:45:19,500
those things are actually going to come from the bitmap info table,

853
00:45:19,500 --> 00:45:20,100
right?

854
00:45:20,200 --> 00:45:21,800
Because that's what the whole point of it was.

855
00:45:21,800 --> 00:45:24,800
I don't know why I forgot I just like, totally spaced.

856
00:45:25,700 --> 00:45:27,000
You know, sometimes that's the way it goes.

857
00:45:27,300 --> 00:45:29,600
So what we really wanted was this right

858
00:45:30,000 --> 00:45:35,600
We wanted our bitmap info to be on assets in foes, right?

859
00:45:38,100 --> 00:45:42,800
Oops, what happened first and then we want to use that work, orders ID

860
00:45:42,800 --> 00:45:46,800
value to get the, to get the particular bitmap info that we're talking

861
00:45:46,800 --> 00:45:50,800
about here and then we want to look at what the things were on that.

862
00:45:50,800 --> 00:45:56,100
That's how we actually wanted to do it right and and so that's what

863
00:45:56,100 --> 00:45:57,200
should have been happening.

864
00:45:57,400 --> 00:46:00,900
And and so now we can at least debug the actual program we were trying

865
00:46:00,900 --> 00:46:05,600
to write and not some other program which was totally different.

866
00:46:05,700 --> 00:46:06,100
Okay?

867
00:46:06,500 --> 00:46:09,000
So, let's go back there and re-enable, the thing that was causing us

868
00:46:09,000 --> 00:46:10,800
problems so we can start to track it down.

869
00:46:11,700 --> 00:46:16,000
Now that we have code, that's at least ostensibly trying to do the

870
00:46:16,000 --> 00:46:16,700
right thing.

871
00:46:18,100 --> 00:46:22,800
And okay, so now the question is, why are we not getting any of our

872
00:46:22,800 --> 00:46:27,700
bitmaps when we call load bitmap from inside our other thread here,

873
00:46:27,900 --> 00:46:28,400
right?

874
00:46:29,200 --> 00:46:33,600
Why are we never getting anything to load at that point?

875
00:46:33,800 --> 00:46:35,500
What is, what is the problem?

876
00:46:36,100 --> 00:46:39,500
And so what I'm going to do, I guess there is I'm just going to set

877
00:46:40,100 --> 00:46:43,700
load bitmap that load bitmap call.

878
00:46:45,500 --> 00:46:50,300
I'm just want to take a look at what's going on in there just so I can

879
00:46:50,300 --> 00:46:55,900
see ID value is 0 on push bitmap here.

880
00:46:55,900 --> 00:47:00,700
Phil ground chunk random asset from.

881
00:47:01,200 --> 00:47:02,200
How are we getting back?

882
00:47:02,200 --> 00:47:03,200
A 0 from here?

883
00:47:03,300 --> 00:47:05,700
All right, so I guess I got to start by De bugging this a little more.

884
00:47:05,900 --> 00:47:09,000
Really because that's doesn't make any sense at all.

885
00:47:10,000 --> 00:47:13,200
So, we come in here, we take a look at the count for grass, chunks.

886
00:47:13,200 --> 00:47:14,400
We get a count of two.

887
00:47:14,900 --> 00:47:18,500
We take a look at the Choice there, which was one.

888
00:47:18,800 --> 00:47:22,500
So then we have a particular asset and that asset is slot.

889
00:47:22,500 --> 00:47:27,100
ID 0, how is slot ID 0, ever being a thing.

890
00:47:28,600 --> 00:47:29,800
What did I mess up?

891
00:47:30,300 --> 00:47:31,900
Obviously, I messed something up.

892
00:47:32,000 --> 00:47:34,800
Like with the debug a bitmap stuff.

893
00:47:34,900 --> 00:47:35,800
I obviously

894
00:47:35,900 --> 00:47:37,700
Did something stupid.

895
00:47:37,800 --> 00:47:40,300
I'm just not sure what it was.

896
00:47:40,400 --> 00:47:41,200
That makes sense.

897
00:47:43,700 --> 00:47:46,800
Did I forget to assert on a size somewhere in here?

898
00:47:46,800 --> 00:47:47,600
I don't think so.

899
00:47:47,600 --> 00:47:52,600
I tried to be relatively careful with that, right?

900
00:47:54,100 --> 00:47:55,900
We've got all these guys lined up.

901
00:47:55,900 --> 00:47:59,800
We've got the assets and the bitmaps in foes.

902
00:48:03,000 --> 00:48:04,400
Yeah.

903
00:48:05,900 --> 00:48:09,200
Yeah.

904
00:48:10,400 --> 00:48:17,000
Alright, so yeah, so let's take a look at what happened there so I can

905
00:48:17,000 --> 00:48:18,600
see it.

906
00:48:19,500 --> 00:48:24,400
So, here's our assets, I'm going to go ahead and just take a look at

907
00:48:24,400 --> 00:48:26,100
all of them, right?

908
00:48:27,200 --> 00:48:27,700
Oops.

909
00:48:28,900 --> 00:48:32,400
I'm just going to look at sort of a set of assets and see what

910
00:48:32,400 --> 00:48:32,900
happened.

911
00:48:33,600 --> 00:48:37,400
So we start setting the slot IDs and then when we get up to assets

912
00:48:37,900 --> 00:48:41,700
that are past number five, we just simply stopped sending them

913
00:48:42,700 --> 00:48:48,000
entirely and so I'm not certain what exactly is going on there.

914
00:48:48,700 --> 00:48:50,000
That's a little bit weird.

915
00:48:50,900 --> 00:48:54,800
So yeah, let's let's see what happened there.

916
00:48:55,600 --> 00:48:56,900
Let me jump up here.

917
00:48:57,400 --> 00:48:58,400
Let's take a look at this.

918
00:48:58,400 --> 00:48:58,600
We've

919
00:48:58,800 --> 00:49:02,500
Set 30, but that's really all that should have been set.

920
00:49:02,500 --> 00:49:04,100
Looks like, right?

921
00:49:04,400 --> 00:49:09,400
So we're adding one in their slot for let's take a look at our take a

922
00:49:09,400 --> 00:49:18,500
look at our asset types here, so 4, Type 4 and 5, so that's what they

923
00:49:18,500 --> 00:49:20,600
should have been and there's the slot IDs.

924
00:49:23,600 --> 00:49:31,100
Okay, so now let's go ahead and jump in here too.

925
00:49:33,900 --> 00:49:34,700
Random.

926
00:49:37,700 --> 00:49:39,400
Grab out that asset type.

927
00:49:40,100 --> 00:49:42,300
Take a look at the type except the one.

928
00:49:42,300 --> 00:49:44,300
We think it should be yes for 26.

929
00:49:44,900 --> 00:49:46,200
Here are the assets.

930
00:49:46,500 --> 00:49:47,400
There's four.

931
00:49:47,600 --> 00:49:49,600
There's five, right?

932
00:49:50,000 --> 00:49:51,200
It's, it's type.

933
00:49:51,200 --> 00:49:54,300
First index plus count.

934
00:49:55,000 --> 00:49:55,800
Let's see here.

935
00:49:58,200 --> 00:50:01,100
Count is argh, man.

936
00:50:02,100 --> 00:50:03,700
Just a mistake filled day.

937
00:50:03,700 --> 00:50:07,100
Today, obviously, you don't want to add the count because that would

938
00:50:07,100 --> 00:50:08,600
be at the end.

939
00:50:12,200 --> 00:50:14,400
That's just super stupid.

940
00:50:15,800 --> 00:50:18,400
We did that thing to pick choice, right?

941
00:50:18,600 --> 00:50:20,200
Oops are my assets.

942
00:50:21,100 --> 00:50:24,400
We did all this work to pick the choice and then we add the count,

943
00:50:24,400 --> 00:50:27,000
which, of course will put us into no-man's-land.

944
00:50:27,900 --> 00:50:29,500
So yeah, that's not very bright.

945
00:50:29,600 --> 00:50:30,200
There we go.

946
00:50:31,300 --> 00:50:32,300
So let's take a look.

947
00:50:34,500 --> 00:50:35,300
See here.

948
00:50:37,000 --> 00:50:37,600
All right.

949
00:50:38,100 --> 00:50:40,800
So now we're back to being useful.

950
00:50:40,800 --> 00:50:42,000
I'm not sure though.

951
00:50:42,000 --> 00:50:43,800
I don't understand.

952
00:50:44,800 --> 00:50:49,600
I feel like we still have some aspect of the bug that we don't totally

953
00:50:49,600 --> 00:50:54,500
understand here because I don't understand why that always being zero.

954
00:50:58,100 --> 00:50:59,800
I don't understand why that would have.

955
00:51:00,300 --> 00:51:00,800
Aid.

956
00:51:02,000 --> 00:51:04,000
So here's what I'm guessing happened.

957
00:51:04,400 --> 00:51:07,200
I'm guessing that that somehow know.

958
00:51:07,200 --> 00:51:10,900
I don't know, I can't think of exactly how

959
00:51:13,800 --> 00:51:19,100
I can't think of exactly how that was forcing us to have all of our

960
00:51:19,100 --> 00:51:22,300
get first bitmap ID stuff fail as well, right?

961
00:51:22,700 --> 00:51:25,800
And I'm trying to think of whether it flooded our q but I don't see

962
00:51:25,800 --> 00:51:28,700
why it would have flooded the queue because if you're trying to load

963
00:51:28,700 --> 00:51:32,400
nothing it doesn't ever add to the queue, right?

964
00:51:34,700 --> 00:51:38,200
I mean if it's a slight idea is zero the bitmap ID is 0.

965
00:51:38,800 --> 00:51:41,500
It's just going to fail to load immediately.

966
00:51:41,500 --> 00:51:45,000
I would think so we should test that out a little bit and figure out

967
00:51:45,000 --> 00:51:46,900
what's going on first.

968
00:51:46,900 --> 00:51:48,100
I'm just going to go ahead and

969
00:51:49,800 --> 00:51:51,000
and finish this off here.

970
00:51:52,000 --> 00:51:55,500
So that we can have ourselves a a working.

971
00:51:56,900 --> 00:51:57,800
Array set here.

972
00:52:05,600 --> 00:52:06,200
There we go.

973
00:52:14,100 --> 00:52:15,100
Is this Stone?

974
00:52:15,100 --> 00:52:17,000
I think guess.

975
00:52:17,000 --> 00:52:19,500
Do a bitmap asset.

976
00:52:20,600 --> 00:52:24,000
So now we can at least have these guys in here.

977
00:52:25,500 --> 00:52:26,700
Operating properly.

978
00:52:33,800 --> 00:52:39,000
and we can have our, we can kind of get rid of these guys and

979
00:52:39,000 --> 00:52:40,300
correctly have are

980
00:52:42,200 --> 00:52:43,400
Our stuff work this way.

981
00:52:44,300 --> 00:52:47,200
So, okay, we've got a bitmap ID stamp here.

982
00:52:47,200 --> 00:52:55,200
We've got random choice to stamp, equals something from the grass

983
00:52:55,200 --> 00:52:55,800
array.

984
00:52:56,000 --> 00:52:59,200
Otherwise, it's something from the stone array.

985
00:52:59,600 --> 00:53:01,400
In fact, I guess we could say that.

986
00:53:01,400 --> 00:53:11,600
It's just this right, random choice and either it'll pick asset,

987
00:53:11,600 --> 00:53:11,800
right?

988
00:53:13,200 --> 00:53:18,500
We're assets tone and then it passes the series, something like that,

989
00:53:19,000 --> 00:53:19,600
right?

990
00:53:22,000 --> 00:53:23,000
That seems fair.

991
00:53:23,800 --> 00:53:29,000
This guy here again, bitmap ID for stamp is just going to be a random

992
00:53:29,000 --> 00:53:35,700
Choice, random asset from trance State assets.

993
00:53:37,900 --> 00:53:39,800
And it's stuffed, right?

994
00:53:39,800 --> 00:53:41,500
So asset tuft.

995
00:53:44,500 --> 00:53:45,600
So that's all good.

996
00:53:46,600 --> 00:53:50,600
And now if I run this in theory, it should be able to build those

997
00:53:50,600 --> 00:53:50,900
chunks.

998
00:53:50,900 --> 00:53:52,400
I don't know if it actually does or not.

999
00:53:53,800 --> 00:53:57,200
Not a good day here for working for handmade hero stuff.

1000
00:53:57,200 --> 00:53:59,800
Working on the first try, you know, sometimes we get really lucky.

1001
00:54:00,800 --> 00:54:04,800
Other times, we don't still got two minutes left on the clock.

1002
00:54:06,000 --> 00:54:09,000
But all right, so now we've translated everything properly and we

1003
00:54:09,000 --> 00:54:15,500
definitely have a bug where where we are not properly, sort of

1004
00:54:15,500 --> 00:54:18,800
flushing things or something stupid, you know, we're doing something

1005
00:54:18,800 --> 00:54:19,300
dumb.

1006
00:54:22,100 --> 00:54:23,200
Ah,

1007
00:54:25,100 --> 00:54:26,400
I see what we're doing.

1008
00:54:26,400 --> 00:54:27,400
Well, we're doing one thing.

1009
00:54:27,400 --> 00:54:28,600
That's particularly dumb.

1010
00:54:30,300 --> 00:54:31,300
This is what it is.

1011
00:54:31,500 --> 00:54:33,700
You guys see it already on the stream?

1012
00:54:34,700 --> 00:54:37,800
I feel like you guys should always be faster than I am because I have

1013
00:54:37,800 --> 00:54:40,700
to talk this all the time and you're just watching so you should know

1014
00:54:41,400 --> 00:54:42,200
what it is.

1015
00:54:42,400 --> 00:54:46,400
And that is that if we fail because we have something that isn't

1016
00:54:46,400 --> 00:54:50,100
loaded yet, we still we suck up a slot.

1017
00:54:50,100 --> 00:54:53,600
We never actually call end, right?

1018
00:54:53,700 --> 00:54:55,800
We never free up our tasks live again.

1019
00:54:57,500 --> 00:55:00,800
Because we did this thing where we wanted to abort the task, but we

1020
00:55:00,800 --> 00:55:03,600
never actually aborted the task, right?

1021
00:55:03,600 --> 00:55:06,600
So, the task technically was just sitting there kind of pseudo running

1022
00:55:06,600 --> 00:55:07,200
forever.

1023
00:55:10,900 --> 00:55:12,000
Which is not what we want.

1024
00:55:12,000 --> 00:55:14,400
We want to just abort the task and say don't do this.

1025
00:55:15,100 --> 00:55:18,800
Once those tasks Ops fill up then we can't load anything anymore,

1026
00:55:19,100 --> 00:55:19,700
right?

1027
00:55:20,600 --> 00:55:23,900
So I think that's what we actually want to do if I'm not mistaken.

1028
00:55:24,800 --> 00:55:26,400
All right, so let's take a look here.

1029
00:55:26,500 --> 00:55:29,300
Can we actually end the task with memory from in here?

1030
00:55:30,200 --> 00:55:31,900
I think we can write.

1031
00:55:31,900 --> 00:55:36,800
We can testimony although although the machine thinks we can't and

1032
00:55:36,800 --> 00:55:37,900
tasked with memory.

1033
00:55:38,100 --> 00:55:39,100
Memory flush.

1034
00:55:40,600 --> 00:55:43,800
What why does it think that that was was bad?

1035
00:55:44,500 --> 00:55:45,600
I'm not exactly sure.

1036
00:55:46,700 --> 00:55:48,400
Begin test the memory trance state.

1037
00:55:48,500 --> 00:55:52,900
If task go through and try to do whatever it is that we're going to

1038
00:55:52,900 --> 00:55:53,300
do.

1039
00:55:54,300 --> 00:55:58,400
So let's go ahead and set a breakpoint there, right?

1040
00:55:58,700 --> 00:56:00,800
We've got our task.

1041
00:56:03,100 --> 00:56:05,100
Nah, it's just not set up yet, sorry.

1042
00:56:10,200 --> 00:56:10,600
Memory.

1043
00:56:11,700 --> 00:56:14,100
Yes, I think that that totally explains.

1044
00:56:14,100 --> 00:56:17,300
I'm glad that we went and found that because like I knew something was

1045
00:56:17,300 --> 00:56:18,000
weird there.

1046
00:56:18,500 --> 00:56:19,500
That was not right.

1047
00:56:19,600 --> 00:56:22,400
So what we want to do is we want to set this stuff up the render

1048
00:56:22,400 --> 00:56:26,900
group, The buffer, the task stuff, we want that to to be set.

1049
00:56:26,900 --> 00:56:28,000
We should probably just set it.

1050
00:56:28,000 --> 00:56:33,200
I don't know why it wasn't being set up here when we actually have the

1051
00:56:33,200 --> 00:56:34,000
information.

1052
00:56:34,300 --> 00:56:35,900
Seems like we want to do that.

1053
00:56:35,900 --> 00:56:38,800
I don't can't think of really any reason not to do that.

1054
00:56:43,400 --> 00:56:46,700
Because until we call platform at entry, it's not actually going to

1055
00:56:46,700 --> 00:56:47,700
ever get looked at.

1056
00:56:47,700 --> 00:56:50,200
So I feel like that's what we wanted.

1057
00:56:50,300 --> 00:56:51,500
So I think that's safer.

1058
00:56:52,000 --> 00:56:55,300
Anyway, just in general so that we don't have that problem.

1059
00:56:56,300 --> 00:56:59,800
Okay, so now we're working, okay, although I still

1060
00:57:00,000 --> 00:57:02,700
Maybe there was some kind of a bug there potentially, I don't know if

1061
00:57:02,700 --> 00:57:05,900
all of our assets are actually working properly but we're closer,

1062
00:57:06,100 --> 00:57:06,700
right?

1063
00:57:08,500 --> 00:57:10,900
And now we've kind of gotten to that nice place.

1064
00:57:11,400 --> 00:57:14,400
We're now the game code doesn't really know anything about our assets

1065
00:57:14,400 --> 00:57:17,700
anymore which is exactly what I wanted to be.

1066
00:57:17,700 --> 00:57:20,800
At least there's there's still a couple things we haven't done yet

1067
00:57:21,400 --> 00:57:24,400
like we have to tackle these hero bitmaps but now we've gotten to the

1068
00:57:24,400 --> 00:57:28,100
place where everything is kind of actually just a structured set of

1069
00:57:28,100 --> 00:57:28,900
information.

1070
00:57:29,100 --> 00:57:29,800
And so now the

1071
00:57:30,000 --> 00:57:33,300
Game just talks about things semantically like it wants a some grass.

1072
00:57:33,300 --> 00:57:36,700
It can go and ask for that and it doesn't even know how many there are

1073
00:57:36,700 --> 00:57:37,700
or where they're coming from.

1074
00:57:37,700 --> 00:57:39,900
It just knows them trying to fill some grass and I can get it.

1075
00:57:39,900 --> 00:57:41,900
And that's exactly what I was trying to do with this.

1076
00:57:41,900 --> 00:57:45,600
So we're definitely getting closer to where I want to be but we still

1077
00:57:45,600 --> 00:57:48,300
need to talk a little bit more about how we're going to actually pull

1078
00:57:48,300 --> 00:57:51,200
things out with tags and stuff so that we can actually start talking

1079
00:57:51,200 --> 00:57:54,600
about these structured assets and also about matching like types of

1080
00:57:54,600 --> 00:57:55,200
grass and stuff like that.

1081
00:57:55,200 --> 00:57:59,100
So that seems like what probably the right thing for us to start

1082
00:57:59,100 --> 00:57:59,600
working on next.

1083
00:58:00,100 --> 00:58:03,800
So I'm going to go ahead and call it here and we can go to the Q and

1084
00:58:03,800 --> 00:58:04,300
the a.

1085
00:58:04,300 --> 00:58:09,200
So if you have a question that you would like answered, please put Q:

1086
00:58:09,200 --> 00:58:12,500
front of it, so I can see it and try to, please, try to keep it to

1087
00:58:12,500 --> 00:58:12,700
stuff.

1088
00:58:12,700 --> 00:58:14,800
We're working on, so they can be on topic.

1089
00:58:43,100 --> 00:58:43,700
Let's see.

1090
00:58:44,100 --> 00:58:47,000
What do you mean when you say to write usage code first?

1091
00:58:47,000 --> 00:58:50,000
Also, is there any special handling of asset 0?

1092
00:58:50,000 --> 00:58:51,200
I am unclear on this.

1093
00:58:52,100 --> 00:58:53,800
So what I mean, when I say right?

1094
00:58:53,800 --> 00:59:00,000
The usage code first is, I mean, don't write the API for something

1095
00:59:00,600 --> 00:59:04,900
like don't write the calls and the structure of how it works first.

1096
00:59:05,300 --> 00:59:09,600
Write the code that's going to use that system first, right?

1097
00:59:09,600 --> 00:59:12,400
See how the user wants the thing to work?

1098
00:59:13,000 --> 00:59:14,400
And then write the thing.

1099
00:59:15,200 --> 00:59:18,600
And so that way, you'll be guided by the the side.

1100
00:59:18,600 --> 00:59:22,100
That's actually the one that's going to use it all the time rather

1101
00:59:22,100 --> 00:59:26,100
than having whatever you happen to Think Through in here, be the way

1102
00:59:26,100 --> 00:59:27,200
that gets exposed.

1103
00:59:28,100 --> 00:59:31,800
So, right in the usage code first is really, really important and I

1104
00:59:31,800 --> 00:59:35,200
always Advocate doing it especially because when you think about when

1105
00:59:35,200 --> 00:59:38,000
you write a little piece of software that's you know a little piece of

1106
00:59:38,000 --> 00:59:40,100
code that's going to be used throughout like the game.

1107
00:59:40,700 --> 00:59:44,200
You're going to write that once and then possibly hundreds of places

1108
00:59:44,200 --> 00:59:45,400
in the game are going to use it.

1109
00:59:45,400 --> 00:59:51,300
So if you write the way that it gets used by just like thinking about

1110
00:59:51,300 --> 00:59:56,100
the thing and implementing, the thing you are potentially sacrificing,

1111
00:59:56,100 --> 00:59:57,900
hundreds of people's use case, right?

1112
00:59:57,900 --> 00:59:59,800
Hundreds of places, use case for

1113
01:00:00,100 --> 01:00:03,300
You what looked clean right in that little one space.

1114
01:00:04,600 --> 01:00:07,400
What you would rather do is write a couple of those use cases out of

1115
01:00:07,400 --> 01:00:11,100
100 see what they want the thing to look like and then write it that

1116
01:00:11,100 --> 01:00:13,400
way because now a hundred people will be clean.

1117
01:00:13,500 --> 01:00:15,700
And only one person will be potentially messy.

1118
01:00:15,700 --> 01:00:18,900
If it has to conform to some way that it wants, you know, that the

1119
01:00:18,900 --> 01:00:20,100
other people want it to work, right?

1120
01:00:20,100 --> 01:00:24,000
That's always the way that you want to structure it as for the special

1121
01:00:24,000 --> 01:00:25,000
handling of asset zero.

1122
01:00:25,000 --> 01:00:28,900
I just want 02 mean nothing so that when people talk about an asset

1123
01:00:28,900 --> 01:00:31,600
they could say zero meaning there is no asset.

1124
01:00:31,600 --> 01:00:34,300
Like if there's a particular thing that

1125
01:00:34,700 --> 01:00:38,500
You know what asset should I display when the person wins the game and

1126
01:00:38,500 --> 01:00:41,300
it says zero means, there is no asset to this play in that situation

1127
01:00:41,300 --> 01:00:41,800
or whatever.

1128
01:00:45,800 --> 01:00:49,400
You used some, you went through to Tea in t here, instead of you and

1129
01:00:49,400 --> 01:00:50,100
32.

1130
01:00:50,500 --> 01:00:53,900
Argh, it's different working on different code bases, makes it a

1131
01:00:53,900 --> 01:00:56,800
little bit hard to keep that all straight.

1132
01:00:59,400 --> 01:01:00,600
let's just go ahead and

1133
01:01:01,800 --> 01:01:03,100
see what the situation is.

1134
01:01:26,900 --> 01:01:27,500
All right.

1135
01:01:41,800 --> 01:01:43,800
Are you expecting a new batch of art from Yankton?

1136
01:01:43,800 --> 01:01:49,200
I actually have a lot of art from your action, but it's more about

1137
01:01:49,200 --> 01:01:51,400
when I you know, decide to

1138
01:01:54,200 --> 01:01:57,400
You know, process it and put it into what we're working on.

1139
01:02:02,300 --> 01:02:05,000
Are you going to eventually downgrade the graphics to stir up some

1140
01:02:05,000 --> 01:02:08,800
controversy and get the game talked about on neogaf and Reddit?

1141
01:02:14,100 --> 01:02:15,500
Well, sure.

1142
01:02:15,500 --> 01:02:17,600
I mean there's no such thing as bad press, right?

1143
01:02:18,700 --> 01:02:22,500
So I think there's a number of things that we should probably do if

1144
01:02:22,500 --> 01:02:24,300
we, if we want to stir up controversy.

1145
01:02:25,800 --> 01:02:26,700
So, yeah.

1146
01:02:26,700 --> 01:02:30,300
I mean, clearly, we should downgrade the graphics at a minimum.

1147
01:02:31,600 --> 01:02:36,300
We should probably also, like, accept money from somebody to be

1148
01:02:36,300 --> 01:02:38,200
exclusive, right?

1149
01:02:39,500 --> 01:02:43,700
Like, you know, get get someone to get some console vendor to pee.

1150
01:02:43,800 --> 01:02:45,900
Off to not release the PC version.

1151
01:02:45,900 --> 01:02:53,200
On time we should have like some kind of a like you know,

1152
01:02:53,900 --> 01:02:57,700
discriminatory selection of characters or something like this.

1153
01:02:57,700 --> 01:02:59,800
There's there's all sorts of things we should do to generate.

1154
01:03:00,000 --> 01:03:00,500
Press.

1155
01:03:01,100 --> 01:03:01,600
So yeah.

1156
01:03:01,600 --> 01:03:05,000
Well just would have to make a big old list of all of our controversy

1157
01:03:05,000 --> 01:03:08,500
generating things that we can do and roll them out there.

1158
01:03:12,800 --> 01:03:16,400
What are some example changes to the gameplay that we require changes

1159
01:03:16,400 --> 01:03:17,800
to the tags?

1160
01:03:23,500 --> 01:03:27,200
Gonna go ahead and say I'm not sure exactly what that means.

1161
01:03:27,200 --> 01:03:31,900
The tags are more about describing the asset that's there.

1162
01:03:32,500 --> 01:03:35,300
And not really necessarily about the gameplay per se.

1163
01:03:36,600 --> 01:03:40,800
But you know, if you added some gameplay stuff that needed other ways

1164
01:03:40,800 --> 01:03:44,100
of describing assets, maybe that would require to start adding new

1165
01:03:44,100 --> 01:03:45,500
tags to things, right?

1166
01:03:46,300 --> 01:03:50,200
But yeah, I'm not sure that the gameplay in the tags are necessarily

1167
01:03:50,200 --> 01:03:52,100
the most coherent things to think about.

1168
01:03:54,300 --> 01:03:57,000
What certifications do I have?

1169
01:03:57,600 --> 01:03:59,400
I do not even know what that means.

1170
01:04:00,000 --> 01:04:06,600
Although recently because obviously I manage the office for Molly

1171
01:04:06,600 --> 01:04:07,300
rocket.

1172
01:04:08,900 --> 01:04:12,500
I had to like certif certified, get myself fire training, certified

1173
01:04:12,500 --> 01:04:13,200
and stuff like this.

1174
01:04:13,200 --> 01:04:15,700
I had to like, do a bunch of online things to certify that.

1175
01:04:15,700 --> 01:04:18,200
I was like a floor award in or something like this, that I knew what

1176
01:04:18,200 --> 01:04:21,500
to do in the case of emergencies and all this sort of stuff.

1177
01:04:25,000 --> 01:04:28,500
Do you feel sleepy when it's taking you a long time to solve a bug?

1178
01:04:29,600 --> 01:04:33,400
Sometimes I feel sleepy and it takes me a long time to solve a bug

1179
01:04:33,400 --> 01:04:34,400
because I'm sleepy.

1180
01:04:35,000 --> 01:04:38,700
But I don't know, I feel sleepy because it's taking a long time to

1181
01:04:38,700 --> 01:04:39,500
solve a bug.

1182
01:04:42,200 --> 01:04:46,200
Are you going to show the asset pipeline tools programming on stream

1183
01:04:46,200 --> 01:04:50,400
know, I've talked about this before, we're restricting programming to

1184
01:04:50,400 --> 01:04:57,200
just the game and that was just because I had to pick some manageable

1185
01:04:57,200 --> 01:04:57,900
boundary for things.

1186
01:04:57,900 --> 01:05:01,700
And so asset pipeline is like a whole different domain of programming

1187
01:05:01,700 --> 01:05:06,300
that has very little to do with the stuff that we're talking about on

1188
01:05:06,300 --> 01:05:06,700
the Stream.

1189
01:05:06,700 --> 01:05:11,400
So what we're going to do is we're going to spec our day

1190
01:05:11,700 --> 01:05:13,600
To file format which is kind of what we're in the middle of doing

1191
01:05:13,600 --> 01:05:14,200
right now.

1192
01:05:14,500 --> 01:05:17,900
And then I will separately take care of producing a pack file that

1193
01:05:17,900 --> 01:05:19,700
complies with that format.

1194
01:05:20,000 --> 01:05:23,700
As if you were handing it off to your asset guy pipeline guy, or

1195
01:05:23,700 --> 01:05:25,800
whatever, and being like go right,

1196
01:05:32,900 --> 01:05:34,700
I miss the pre, seems you talk about apis.

1197
01:05:34,700 --> 01:05:37,900
Like you said, you would on Twitter, I did not say I would on Twitter.

1198
01:05:38,400 --> 01:05:42,900
I said, if someone remembered to ask me about it, I would and no one

1199
01:05:42,900 --> 01:05:44,600
asked me about it so you didn't miss it.

1200
01:05:52,000 --> 01:05:56,000
What reason is there to use size T other than in 32 or un 32?

1201
01:05:56,000 --> 01:05:59,700
So size T is when you don't know whether you're on a

1202
01:06:00,000 --> 01:06:01,900
For a bit or 32-bit platform.

1203
01:06:01,900 --> 01:06:06,500
And you want to talk about how big something is in memory because in

1204
01:06:06,500 --> 01:06:09,800
in 32 or an N64 is talking about with you have a 32-bit or 64-bit

1205
01:06:09,800 --> 01:06:11,000
integer, right?

1206
01:06:12,400 --> 01:06:17,200
But if I'm talking about the size, something takes in memory, how

1207
01:06:17,200 --> 01:06:20,700
would I know whether I need a 32-bit or 64-bit or talk about that?

1208
01:06:20,700 --> 01:06:24,600
If I don't know, whether I'm on 32-bit or 64-bit memory model, right?

1209
01:06:24,600 --> 01:06:29,900
So size, T is just a type that you use to talk about something that is

1210
01:06:30,000 --> 01:06:32,200
that can hold a value.

1211
01:06:32,200 --> 01:06:33,600
That's the size of something in memory.

1212
01:06:33,600 --> 01:06:38,600
And so on 32-bit systems, it will be a 32-bit integer on 64-bit

1213
01:06:38,600 --> 01:06:38,900
systems.

1214
01:06:38,900 --> 01:06:40,000
It'll be a 64 bits.

1215
01:06:40,100 --> 01:06:42,000
So, you know, you always can rely on it to be big enough to

1216
01:06:42,100 --> 01:06:45,900
Hold any memory size thing.

1217
01:07:01,000 --> 01:07:07,100
Do you plan on implementing HTC Vive and Lighthouse support for

1218
01:07:07,100 --> 01:07:08,100
whatever reason.

1219
01:07:09,300 --> 01:07:13,600
I don't know how we can really do that with a 2-D game.

1220
01:07:15,400 --> 01:07:22,900
So, no, because you kind of need to at least have some idea of what

1221
01:07:22,900 --> 01:07:27,200
you would want to have happen in 3D before, a Vive would really be

1222
01:07:27,400 --> 01:07:28,300
worth it, right?

1223
01:07:32,700 --> 01:07:35,600
If you asset pipeline won't be done on stream, will you still release

1224
01:07:35,600 --> 01:07:36,300
the source for it?

1225
01:07:36,300 --> 01:07:36,900
No.

1226
01:07:37,300 --> 01:07:42,300
So we're like asset pipeline is not in the product at all, like it's

1227
01:07:42,300 --> 01:07:47,400
just assumed that there is a data set and the data set will be, you

1228
01:07:47,400 --> 01:07:48,900
know, part of the game.

1229
01:07:49,200 --> 01:07:51,400
But how that data set gets made?

1230
01:07:51,600 --> 01:07:54,300
I don't even promise that something that will compile on other

1231
01:07:54,300 --> 01:07:56,000
people's machines, right?

1232
01:07:56,000 --> 01:07:59,800
Like, it's just, it's whatever I want to do separately to make sure

1233
01:07:59,800 --> 01:08:02,000
that we produce something that matches.

1234
01:08:02,500 --> 01:08:03,700
Description that we have.

1235
01:08:04,500 --> 01:08:06,400
But obviously will make the description on Stream.

1236
01:08:06,400 --> 01:08:08,400
So, anyone who wants to build their own pack file.

1237
01:08:08,500 --> 01:08:10,900
It's not going to be like rocket science, right?

1238
01:08:11,700 --> 01:08:14,000
It's just a bunch of things concatenated, together in a file.

1239
01:08:14,000 --> 01:08:18,200
So it's not exactly something that's hard to reproduce, but, you know,

1240
01:08:18,200 --> 01:08:21,899
I may use a bunch of proprietary stuff that I, you know, I've written,

1241
01:08:21,899 --> 01:08:26,399
like my Photoshop parser and stuff like that that are not going to be

1242
01:08:26,399 --> 01:08:29,300
really like those are not public domain things, so they won't be

1243
01:08:30,300 --> 01:08:31,300
included in the

1244
01:08:33,500 --> 01:08:35,300
In the release at all.

1245
01:08:43,899 --> 01:08:47,600
Will you do is separate isolated session on databases mentioned

1246
01:08:47,600 --> 01:08:48,200
yesterday.

1247
01:08:48,200 --> 01:08:51,899
I would love to hear your thoughts on that at some point potentially

1248
01:08:53,200 --> 01:08:57,300
but it's kind of involved topic.

1249
01:08:57,300 --> 01:08:59,800
So, I don't know when I would be doing that since obviously, I've

1250
01:09:00,000 --> 01:09:01,399
Of handmade hero to get through.

1251
01:09:04,100 --> 01:09:07,300
And I don't know that it's like super pressingly valuable that I talk

1252
01:09:07,300 --> 01:09:10,700
about the problems of data did with databases at the moment.

1253
01:09:13,100 --> 01:09:14,800
Will you talk about apis now?

1254
01:09:15,100 --> 01:09:19,600
Yes, I suppose I can because we don't have it doesn't seem like having

1255
01:09:19,600 --> 01:09:20,899
any of it.

1256
01:09:22,700 --> 01:09:25,500
Other questions about what we were doing programming wise.

1257
01:09:30,700 --> 01:09:33,300
HTC is handing you five hundred thousand dollars.

1258
01:09:33,300 --> 01:09:34,700
Are you doing Vibe support?

1259
01:09:34,700 --> 01:09:41,200
Now, you know if ACC wants to hand the handmade hero project, half a

1260
01:09:41,200 --> 01:09:45,100
million dollars to support Vive then sure.

1261
01:09:45,600 --> 01:09:49,899
Right I mean I'll happily go ahead and I mean provided they allow me

1262
01:09:49,899 --> 01:09:51,700
to program it on stream, right?

1263
01:09:51,700 --> 01:09:54,600
Like I'm not going to add Vibe support to the game if they won't let

1264
01:09:54,600 --> 01:09:58,700
me like if there's some kind of endianness that would prevent me from

1265
01:09:58,700 --> 01:10:00,000
programs dream but

1266
01:10:00,500 --> 01:10:03,100
Sure for half a million dollars weed at it.

1267
01:10:04,300 --> 01:10:09,900
But again, I say, what would we add like, what do they?

1268
01:10:09,900 --> 01:10:11,000
What it's know.

1269
01:10:11,000 --> 01:10:15,400
Who would want to play a 2-D game on a 3D headset?

1270
01:10:15,900 --> 01:10:17,300
Like why would you do that?

1271
01:10:18,400 --> 01:10:21,300
I don't understand, I don't understand why you would want that to

1272
01:10:21,300 --> 01:10:22,500
happen, right?

1273
01:10:22,500 --> 01:10:26,600
Like, I guess we could make the characters like kind of stand up a

1274
01:10:26,600 --> 01:10:32,100
little bit like cards and tilt the backdrop a little bit, I don't

1275
01:10:32,100 --> 01:10:32,200
know.

1276
01:10:32,200 --> 01:10:34,600
It just seems like a really bad idea.

1277
01:10:35,900 --> 01:10:40,500
So yeah, for half a million dollars, sure will add support but I just

1278
01:10:40,500 --> 01:10:43,600
don't understand why they would even want that.

1279
01:10:44,900 --> 01:10:47,300
I don't understand why they'd want to pay 50 bucks for that.

1280
01:10:47,600 --> 01:10:49,000
Let alone five hundred thousand.

1281
01:10:49,900 --> 01:10:54,200
Will you accept chromatic aberration as the best post-processing thing

1282
01:10:54,200 --> 01:10:55,600
ever conceived?

1283
01:10:56,000 --> 01:10:56,600
No.

1284
01:10:57,100 --> 01:10:59,300
I will not accept that chromatic.

1285
01:10:59,300 --> 01:11:04,100
Aberration is in my opinion, a bad visual effect.

1286
01:11:04,400 --> 01:11:08,800
It is, it is not so there's so there's visual effects from cameras,

1287
01:11:09,300 --> 01:11:14,500
like chromatic aberration their visual effects from cameras that

1288
01:11:14,700 --> 01:11:20,200
Into the category of positive image technique that you actually use

1289
01:11:20,200 --> 01:11:23,300
for a purpose and cinematography and they're ones that pretty much

1290
01:11:23,300 --> 01:11:26,800
just don't except in really rare circumstances and chromatic

1291
01:11:26,800 --> 01:11:29,800
aberration is in the don't category like basically chromatic

1292
01:11:29,800 --> 01:11:31,500
aberration and lens flare.

1293
01:11:34,200 --> 01:11:38,100
Krakow tration lens flare and vignetting are the three that come to

1294
01:11:38,100 --> 01:11:39,200
mind basically.

1295
01:11:39,200 --> 01:11:43,700
Like any competent cinematographer is trying not to have happen pretty

1296
01:11:43,700 --> 01:11:47,500
much 100% of the time like once in a great while they'll do a very

1297
01:11:47,500 --> 01:11:51,300
specific shot that maybe takes advantage of some of those things to

1298
01:11:51,300 --> 01:11:55,700
achieve, some very strange thing that they're trying to do, right.

1299
01:11:56,600 --> 01:11:59,800
But by and large are very much trying not to have those on the other.

1300
01:12:00,000 --> 01:12:09,000
And like, hey, latian, and and depth of field are examples of things

1301
01:12:09,000 --> 01:12:13,900
that they use specifically in almost every shot where it could be

1302
01:12:13,900 --> 01:12:17,400
applicable to do certain things with the image.

1303
01:12:17,400 --> 01:12:21,100
And so those I consider to be positive, post-processing effects that

1304
01:12:21,100 --> 01:12:24,800
you do want in your pipeline, if you can, if you can afford them,

1305
01:12:24,900 --> 01:12:25,400
right?

1306
01:12:27,500 --> 01:12:28,700
The chromatic aberration.

1307
01:12:28,700 --> 01:12:30,700
No, no, no no.

1308
01:12:37,100 --> 01:12:38,400
Let's see.

1309
01:12:52,100 --> 01:12:55,100
Why do you support direct input 8 for supporting good old USB

1310
01:12:55,100 --> 01:12:58,400
controllers instead of just Xbox 360 controllers, we probably will

1311
01:12:58,500 --> 01:13:02,300
actually but again the platform layer is really just stand-in.

1312
01:13:02,300 --> 01:13:05,800
At this point, we will switch back to working on platform layers when

1313
01:13:05,800 --> 01:13:10,000
we are done with the game and are doing kind of our shipping work, and

1314
01:13:10,000 --> 01:13:12,200
because there's a bunch of things we don't support right now in the

1315
01:13:12,200 --> 01:13:14,900
platform layer that we probably would want to write.

1316
01:13:16,100 --> 01:13:19,600
So we probably will support, I would guess.

1317
01:13:19,600 --> 01:13:21,500
Anyway, we probably would support direct input.

1318
01:13:21,700 --> 01:13:22,900
Eight, as well as.

1319
01:13:25,000 --> 01:13:25,800
As xinput.

1320
01:13:36,800 --> 01:13:41,000
If the people in this chat collectively give you 500,000 dollars.

1321
01:13:41,000 --> 01:13:42,000
Will you implement VR?

1322
01:13:42,000 --> 01:13:45,300
Sure, but where are they going to get five hundred thousand dollars?

1323
01:13:45,800 --> 01:13:47,400
That's a lot of money, dude.

1324
01:13:48,100 --> 01:13:50,500
Half a million dollars is a lot of money.

1325
01:13:51,300 --> 01:13:54,700
And why would why does the chat want to pay half of?

1326
01:13:55,300 --> 01:13:57,000
Nobody seems to understand?

1327
01:13:57,400 --> 01:14:00,800
Just how an interesting it would be to add VR2 handmade hero.

1328
01:14:00,800 --> 01:14:03,000
I do not understand why they would even want that.

1329
01:14:04,800 --> 01:14:05,900
It just doesn't make any sense.

1330
01:14:07,400 --> 01:14:09,100
Okay, so I'm supposed to talk about apis.

1331
01:14:09,100 --> 01:14:11,000
I think and we have some time left.

1332
01:14:11,000 --> 01:14:11,900
So I should probably do that.

1333
01:14:11,900 --> 01:14:15,100
I'm just trying to see if there's any other questions here.

1334
01:14:27,800 --> 01:14:29,000
Let's see.

1335
01:14:29,000 --> 01:14:33,500
Okay, so what I was talking about with apis.

1336
01:14:34,400 --> 01:14:38,600
So I'm going to go ahead and close this down here.

1337
01:14:40,400 --> 01:14:45,100
So what I was talking about apis before I feel like we at some point

1338
01:14:45,600 --> 01:14:48,000
installed depends, did we not?

1339
01:14:48,100 --> 01:14:53,800
I feel like we did but I don't actually remember if we did or not.

1340
01:14:53,800 --> 01:14:55,600
So I don't actually know.

1341
01:14:57,000 --> 01:14:59,700
I don't actually know if we actually did, let's find out.

1342
01:15:00,000 --> 01:15:01,200
In program files.

1343
01:15:01,200 --> 01:15:02,900
Did we ever put this in here?

1344
01:15:02,900 --> 01:15:08,500
Program files, depends depends, depends.

1345
01:15:08,600 --> 01:15:16,400
All right, so let's just talk about API stuff for a second here and,

1346
01:15:17,400 --> 01:15:19,900
you know, it's extremely long topic.

1347
01:15:19,900 --> 01:15:22,400
I'm not going to try and cover hardly anything, but I'll just try and

1348
01:15:22,400 --> 01:15:26,300
give you a little bit of background on the stuff that I was talking

1349
01:15:26,300 --> 01:15:28,400
about on Twitter.

1350
01:15:29,800 --> 01:15:30,600
So here we go.

1351
01:15:31,500 --> 01:15:33,100
See here if I can actually use this.

1352
01:15:36,300 --> 01:15:36,700
Okay.

1353
01:15:37,700 --> 01:15:44,900
So here is if I actually go in to to handmade hero, right?

1354
01:15:45,200 --> 01:15:46,800
This is the game that we built.

1355
01:15:47,000 --> 01:15:48,400
And we were very conservative, right?

1356
01:15:48,400 --> 01:15:50,100
So you can see in handmade hero.

1357
01:15:50,800 --> 01:15:55,000
This is, if you don't know, depends, it's a program that says what

1358
01:15:55,000 --> 01:15:58,900
system Services, you're linking to basically, it basically shows you

1359
01:15:58,900 --> 01:16:02,500
all of your Imports that are things, you have to call, right?

1360
01:16:02,700 --> 01:16:05,300
And so we call user 32.2 LL be.

1361
01:16:05,700 --> 01:16:10,300
GDI 30 to 80 lb Colwyn multimedia, dll and kernel32.

1362
01:16:10,700 --> 01:16:11,000
Okay?

1363
01:16:11,000 --> 01:16:11,800
And that's it.

1364
01:16:12,100 --> 01:16:15,200
So in order to run our game whole game, that's all we needed.

1365
01:16:15,400 --> 01:16:15,900
Okay?

1366
01:16:17,300 --> 01:16:20,600
And we don't call any other services from anywhere else except for X

1367
01:16:20,600 --> 01:16:21,700
input, which we load dynamically.

1368
01:16:21,700 --> 01:16:24,100
And if it's not there then we just don't use it right?

1369
01:16:24,900 --> 01:16:27,700
So I'm pretty sure that's basically I don't know if we do any other

1370
01:16:27,700 --> 01:16:29,900
live virus I don't think we do, right?

1371
01:16:31,600 --> 01:16:37,100
So, if you think about the way that you would want your software

1372
01:16:37,100 --> 01:16:41,700
ecosystem to work, what you would like to do is you'd like to make

1373
01:16:41,700 --> 01:16:46,600
sure that basically you have a few, you have a small, well, defined

1374
01:16:46,600 --> 01:16:50,600
set of apis that you plan on supporting for a long time and that work

1375
01:16:50,600 --> 01:16:52,100
in a reliable way, right?

1376
01:16:53,000 --> 01:16:56,400
And so one of the important ways that you would, you know, that you

1377
01:16:56,400 --> 01:16:59,000
should a mindset, you should be in, right?

1378
01:16:59,500 --> 01:17:04,400
Is that if I have something like handmade here which has, you know, a

1379
01:17:04,400 --> 01:17:06,700
small handful of actual Imports.

1380
01:17:06,700 --> 01:17:09,300
You know, the number of imports is probably like 20 or 30.

1381
01:17:09,300 --> 01:17:14,600
It should be pretty straightforward to see how those things are

1382
01:17:14,600 --> 01:17:17,600
actually connected up in the system so that they're easy to maintain

1383
01:17:17,600 --> 01:17:18,500
from version to version.

1384
01:17:18,500 --> 01:17:22,600
And like when you come out with Windows 8, you can just make sure that

1385
01:17:22,600 --> 01:17:25,100
you support these things properly and all that sort of stuff.

1386
01:17:25,100 --> 01:17:25,400
Right?

1387
01:17:25,400 --> 01:17:29,500
You want a small set of well-defined apis that.

1388
01:17:29,600 --> 01:17:33,900
You know, have reasonable behavior and that are easy to link through

1389
01:17:33,900 --> 01:17:36,700
to explicitly so that there's no confusion, right?

1390
01:17:38,500 --> 01:17:42,300
Now in the old days when you ran this application, you would see

1391
01:17:42,300 --> 01:17:46,900
basically like just this like you would see just what we're looking at

1392
01:17:46,900 --> 01:17:50,400
right now because the operating system was implemented basically as

1393
01:17:50,400 --> 01:17:54,800
just, these few dlls there were not that many and the dlls themselves

1394
01:17:54,800 --> 01:17:58,000
really just only relied on a few other dlls like Colonel like you know

1395
01:17:58,000 --> 01:17:59,800
user 32 ft LL would rely on colonel.

1396
01:18:00,000 --> 01:18:01,800
2 dot, dll, or whatever, right?

1397
01:18:02,800 --> 01:18:03,600
and then,

1398
01:18:05,200 --> 01:18:10,200
And it's like if they just kept doing this, I do not know why.

1399
01:18:11,600 --> 01:18:15,300
At some point Microsoft decided that because they had had some

1400
01:18:15,300 --> 01:18:17,400
problems with compatibility with dll stuff.

1401
01:18:17,400 --> 01:18:19,900
What they were going to do is start adding all of these layers of

1402
01:18:19,900 --> 01:18:22,100
complexity on it year after year.

1403
01:18:22,700 --> 01:18:26,200
So they started introducing all these new Concepts like side-by-side

1404
01:18:26,200 --> 01:18:31,900
assemblies in API sets and all of these things that greatly complexify

1405
01:18:32,000 --> 01:18:35,700
trying to figure out what is even running and what is even being

1406
01:18:35,700 --> 01:18:37,300
linked to when something loads.

1407
01:18:37,800 --> 01:18:41,100
And so now, when we come to today, here is what you are.

1408
01:18:41,300 --> 01:18:44,500
Actually talking about when you're talking about how your program

1409
01:18:44,500 --> 01:18:46,400
Links at runtime, are you ready for this?

1410
01:18:46,800 --> 01:18:50,700
Look at this, it's absurd, right?

1411
01:18:50,800 --> 01:18:54,800
Like there's just all this nonsense in here for a game that hardly has

1412
01:18:54,800 --> 01:18:56,000
any thing going on.

1413
01:18:56,400 --> 01:18:59,900
Like check this stuff out, I don't even know.

1414
01:18:59,900 --> 01:19:03,400
Like I mean, it's crazy.

1415
01:19:04,400 --> 01:19:06,600
A single individual would have absolutely no idea.

1416
01:19:06,600 --> 01:19:08,400
What was even going on here, right?

1417
01:19:08,400 --> 01:19:10,700
Like you'd have no clue what was going on.

1418
01:19:10,700 --> 01:19:11,000
I used.

1419
01:19:11,100 --> 01:19:12,200
To be pretty straightforward.

1420
01:19:12,200 --> 01:19:14,000
You be like, here's the few things I call from Colonel.

1421
01:19:14,000 --> 01:19:16,500
Here's a few things, like all from user, that's all it needs.

1422
01:19:16,500 --> 01:19:19,600
I can totally think and reason about what's going on here, right?

1423
01:19:20,900 --> 01:19:23,800
And so that's, you know, that's the situation that we've sort of

1424
01:19:24,200 --> 01:19:27,400
backed ourselves into now and that's for handmade hero, which is

1425
01:19:27,400 --> 01:19:29,300
extremely conservative, right?

1426
01:19:29,900 --> 01:19:30,900
So let's take a look.

1427
01:19:30,900 --> 01:19:33,400
Now at something, that's not so conservative.

1428
01:19:33,600 --> 01:19:35,200
Okay, let's take a look.

1429
01:19:35,200 --> 01:19:36,600
Now at the kind of software that.

1430
01:19:36,600 --> 01:19:37,800
Microsoft ships.

1431
01:19:39,100 --> 01:19:42,300
So let's go in here to program files, right?

1432
01:19:43,400 --> 01:19:44,300
X86.

1433
01:19:45,000 --> 01:19:50,000
And let's go in to see about for example, their IDE, right?

1434
01:19:53,100 --> 01:19:55,400
Dev I think, is it?

1435
01:19:55,500 --> 01:19:56,800
See if I can load that?

1436
01:20:00,300 --> 01:20:04,900
All right, well I guess we can't really do that one.

1437
01:20:07,200 --> 01:20:11,900
Well, it couldn't actually parse the whole thing I guess, but this is

1438
01:20:11,900 --> 01:20:13,400
what we're dealing with, okay?

1439
01:20:14,600 --> 01:20:19,200
And it highlights two things, one that it's absolutely ludicrous,

1440
01:20:19,500 --> 01:20:20,000
right?

1441
01:20:20,100 --> 01:20:21,400
Like what,

1442
01:20:23,800 --> 01:20:25,700
These things are not abstract.

1443
01:20:26,600 --> 01:20:30,200
All of these things actually have to be in place, have to be the right

1444
01:20:30,200 --> 01:20:33,300
versions have to be functioning properly in order for this piece of

1445
01:20:33,300 --> 01:20:37,800
software to function, right and that never actually happens.

1446
01:20:38,300 --> 01:20:42,500
So to give you a very simple example on my witness dead machine which

1447
01:20:42,500 --> 01:20:47,300
is one that Johnson up for me, it's a laptop on the version of Visual

1448
01:20:47,300 --> 01:20:48,700
Studio that was installed on it.

1449
01:20:48,900 --> 01:20:52,500
You could not move the panel's around if you try to move the panel's

1450
01:20:52,500 --> 01:20:53,400
around, it would crash.

1451
01:20:54,300 --> 01:20:57,700
And I went to the website to look up the fix for that and they said

1452
01:20:57,700 --> 01:20:59,800
there is no fix for that, that's just some machines.

1453
01:21:00,000 --> 01:21:02,000
In the state and we have no way of fixing it.

1454
01:21:02,300 --> 01:21:03,300
I swear to God.

1455
01:21:03,300 --> 01:21:04,900
That's what it said right.

1456
01:21:05,400 --> 01:21:10,500
And that is exactly this kind of circumstance that is the mentality.

1457
01:21:10,500 --> 01:21:14,000
That is the software development methodology that you end up with when

1458
01:21:14,000 --> 01:21:17,500
you have this many moving parts that all have to work.

1459
01:21:17,600 --> 01:21:21,700
They don't somebody at some point will accidentally do something that

1460
01:21:21,700 --> 01:21:25,100
breaks this one thing here, right?

1461
01:21:25,300 --> 01:21:29,200
And then suddenly your app crashes, when it tries to do this thing or

1462
01:21:29,200 --> 01:21:29,700
it can't

1463
01:21:30,000 --> 01:21:33,000
run run because like something wasn't found, right?

1464
01:21:34,900 --> 01:21:39,200
I've even had this happen when we do the Indie, Mega Booth, I actually

1465
01:21:39,200 --> 01:21:40,800
have a little thumb drive, I bring around.

1466
01:21:40,800 --> 01:21:43,800
That's got all these dependency, installation things on it, because

1467
01:21:43,800 --> 01:21:47,400
invariably some poor developer brings the build of their game that

1468
01:21:47,400 --> 01:21:48,700
works just fine on their machine.

1469
01:21:48,800 --> 01:21:51,200
They try to run it on one of the Indie Megadeth machines and they

1470
01:21:51,200 --> 01:21:54,400
can't because some crazy side by side.

1471
01:21:54,400 --> 01:22:01,100
Assembly installation from the DirectX, runtime from June, 2013 wasn't

1472
01:22:01,100 --> 01:22:03,200
installed in the right order and so it's got the

1473
01:22:03,500 --> 01:22:06,500
Something and blah blah blah and like so I go in there and I put the

1474
01:22:06,500 --> 01:22:09,800
thumb drive in and I run through the install process and eventually we

1475
01:22:09,800 --> 01:22:12,500
hit the one that puts the right deal on the right place and the right

1476
01:22:12,500 --> 01:22:15,500
side by side assembly lined up and all this stuff and then it's okay,

1477
01:22:15,500 --> 01:22:16,100
right?

1478
01:22:17,000 --> 01:22:18,700
And this is just not a sustainable ecosystem.

1479
01:22:18,700 --> 01:22:23,300
It's why stuff just never runs right on Windows anymore and it's awful

1480
01:22:23,800 --> 01:22:27,700
it's just terrible and so it highlights that Ridiculousness that you

1481
01:22:27,700 --> 01:22:31,500
just you should not be writing software that requires this many other

1482
01:22:31,500 --> 01:22:33,000
dependencies to be correct.

1483
01:22:33,000 --> 01:22:33,100
It's

1484
01:22:33,400 --> 01:22:38,300
What you're asking for the kind of poorly behaving, software that you

1485
01:22:38,300 --> 01:22:41,600
do, end up getting in practice, pardon me while I close all these, so

1486
01:22:41,600 --> 01:22:44,300
we can see just the top level ones, all right?

1487
01:22:45,300 --> 01:22:48,100
And again, that it didn't even wasn't even know the parcel thing, but

1488
01:22:48,100 --> 01:22:49,500
it also highlights another thing.

1489
01:22:49,800 --> 01:22:51,100
Which is that you now?

1490
01:22:51,100 --> 01:22:53,400
Because their stuff is so full on crazy.

1491
01:22:53,600 --> 01:22:57,000
Depends can't even parse the whole dependency set anymore and even

1492
01:22:57,000 --> 01:23:00,200
tell you what is missing and what's not, it can only give you partial

1493
01:23:00,200 --> 01:23:00,700
information.

1494
01:23:00,700 --> 01:23:03,300
So for example, if we take a look at this,

1495
01:23:04,200 --> 01:23:06,400
It doesn't think that this actually exists.

1496
01:23:06,600 --> 01:23:08,700
It doesn't know where to get this guy, right?

1497
01:23:08,700 --> 01:23:11,200
It's like I don't know what's going on here, right?

1498
01:23:11,200 --> 01:23:12,200
We can't find it.

1499
01:23:12,300 --> 01:23:13,300
We don't know what it is.

1500
01:23:14,500 --> 01:23:18,000
But when we run this program, it works right?

1501
01:23:18,000 --> 01:23:22,200
So obviously we're it's not actually the case that this is an actual

1502
01:23:22,200 --> 01:23:24,900
problem and that didn't used to happen, right?

1503
01:23:25,100 --> 01:23:26,500
Like, who knows what's this?

1504
01:23:26,500 --> 01:23:27,000
I don't know.

1505
01:23:27,000 --> 01:23:28,100
It can't load it.

1506
01:23:28,300 --> 01:23:31,600
Who knows where it comes from, nobody knows, you know, maybe it's on

1507
01:23:31,600 --> 01:23:32,700
the drive somewhere.

1508
01:23:33,200 --> 01:23:37,000
And again, these are from IE framed dll, which is some system, utility

1509
01:23:37,000 --> 01:23:38,200
blah, blah, blah, right?

1510
01:23:39,100 --> 01:23:43,000
So at this point, I don't even know how to use.

1511
01:23:43,000 --> 01:23:44,700
Depends to look up dependency stuff anymore.

1512
01:23:44,700 --> 01:23:45,500
Like I don't even know.

1513
01:23:45,500 --> 01:23:51,400
It's so crazy town that if something doesn't work on a machine it's

1514
01:23:51,400 --> 01:23:55,100
like I almost can't even really help in the old days I used to just

1515
01:23:55,100 --> 01:23:57,800
load up depends see what the missing dependency was and then it was

1516
01:23:57,800 --> 01:23:59,600
just like shooting fish in a barrel it's like oh it's missing.

1517
01:24:00,500 --> 01:24:01,200
VCR.

1518
01:24:01,200 --> 01:24:04,100
120 that dll good.

1519
01:24:04,100 --> 01:24:04,900
We'll just go get that.

1520
01:24:04,900 --> 01:24:05,800
Will put it in place.

1521
01:24:05,900 --> 01:24:08,900
We just copied into the directory that the executable has and then we

1522
01:24:08,900 --> 01:24:11,100
can run and that would work, right?

1523
01:24:11,100 --> 01:24:13,300
You could, you could repair a broken installation.

1524
01:24:13,300 --> 01:24:17,100
Trivially, just by doing that nowadays, forget it because you can't

1525
01:24:17,100 --> 01:24:19,400
even install stuff into the side by side assembly stuff.

1526
01:24:19,400 --> 01:24:20,900
You, I mean, I don't even know how to do that, right?

1527
01:24:20,900 --> 01:24:25,100
I have to go learn how to do those things just to even repair it

1528
01:24:25,100 --> 01:24:25,400
anymore.

1529
01:24:25,400 --> 01:24:28,100
It's not as simple as just copying the files around anymore, right?

1530
01:24:29,500 --> 01:24:29,900
So this

1531
01:24:30,000 --> 01:24:33,600
Is not a sustainable model and it's why Windows is so darn unreliable

1532
01:24:33,600 --> 01:24:34,100
anymore.

1533
01:24:34,200 --> 01:24:36,500
It didn't used to be this way, right?

1534
01:24:36,500 --> 01:24:39,800
I mean, yeah, Windows was never like some Panacea or Utopia or

1535
01:24:39,800 --> 01:24:44,800
anything is true, but it used to be much more reliable and he 351 to

1536
01:24:44,800 --> 01:24:50,200
some extent mt4 to some extent Windows 2000, but, you know, pretty

1537
01:24:50,200 --> 01:24:54,400
much even as soon as nt4 things started going downhill, they just lost

1538
01:24:54,400 --> 01:24:55,500
that concept.

1539
01:24:55,500 --> 01:24:58,500
That you need a clean direct API interface.

1540
01:24:59,100 --> 01:24:59,900
Easy way to tell.

1541
01:25:00,000 --> 01:25:05,200
What are the dependencies are and and it's just been a complete train

1542
01:25:05,200 --> 01:25:08,100
wreck since then, not to mention the fact that they added all these

1543
01:25:08,100 --> 01:25:10,800
other things like manifests, which are completely unnecessary.

1544
01:25:10,800 --> 01:25:12,600
And I don't even know why they decided to do it.

1545
01:25:12,700 --> 01:25:16,100
That just complicate the deployment complicate, the build dependencies

1546
01:25:16,100 --> 01:25:20,300
complicate the runtime dependencies in ways that have just made things

1547
01:25:20,300 --> 01:25:23,400
worse, and they never seem to go back and assess it and go.

1548
01:25:23,700 --> 01:25:24,600
Wait a minute.

1549
01:25:24,800 --> 01:25:27,400
The old way we did, this was actually always better.

1550
01:25:28,000 --> 01:25:29,800
All the stuff that we try to do is help has only been

1551
01:25:29,900 --> 01:25:33,400
Hurting maybe we should stop adding all this complexity on the things

1552
01:25:33,400 --> 01:25:35,500
that discussion never happens of course generally.

1553
01:25:36,300 --> 01:25:38,400
And so that's the thing that I was complaining about on Twitter.

1554
01:25:38,600 --> 01:25:41,700
It's super bothers me because Windows used to be the stable platform.

1555
01:25:41,800 --> 01:25:45,600
It used to be the place where stuff ran every revision, the your old

1556
01:25:45,600 --> 01:25:46,700
software still ran.

1557
01:25:47,700 --> 01:25:52,300
And now that is so far from the case, basically, even new software

1558
01:25:52,300 --> 01:25:56,100
almost guarantee ably won't run on a system, unless you run a VC

1559
01:25:56,100 --> 01:25:56,800
redistributable.

1560
01:25:56,800 --> 01:25:59,800
Install first, I mean, it's just a end of DirectX install.

1561
01:26:00,100 --> 01:26:03,100
So there's no such thing as like copying executable to Windows machine

1562
01:26:03,100 --> 01:26:07,000
and running it anymore, unless you're like me and are super super

1563
01:26:07,000 --> 01:26:09,500
tight about your dependencies and build stuff specifically so that

1564
01:26:09,500 --> 01:26:10,200
doesn't happen.

1565
01:26:10,400 --> 01:26:12,100
Almost all commercial stuff, I see.

1566
01:26:12,700 --> 01:26:16,900
Canyon cannot even run new on a Windows system, it has all sorts of

1567
01:26:16,900 --> 01:26:20,000
dependencies baked into it that you have to go get redistributed as

1568
01:26:20,000 --> 01:26:23,500
for and that's like what the game's installer or whatever does when

1569
01:26:23,500 --> 01:26:26,800
you initially run it, and that's just ridiculous, right?

1570
01:26:26,800 --> 01:26:28,500
It just doesn't make sense.

1571
01:26:28,800 --> 01:26:29,800
It's not a sustainable.

1572
01:26:29,900 --> 01:26:33,300
All way of running an operating system and we see it all the time as

1573
01:26:33,300 --> 01:26:37,500
stuff continues to fail and continues to be this whole ridiculous

1574
01:26:38,000 --> 01:26:40,200
morass of like, which version of this do you have?

1575
01:26:40,200 --> 01:26:42,600
And did you remember to install this and did you patch the blond and

1576
01:26:42,600 --> 01:26:42,800
it?

1577
01:26:42,800 --> 01:26:43,200
Right.

1578
01:26:44,000 --> 01:26:44,800
It's awful.

1579
01:26:45,700 --> 01:26:46,800
So I don't like that.

1580
01:26:47,100 --> 01:26:48,300
And that's why I'm handmade hero.

1581
01:26:48,300 --> 01:26:51,700
We were very, very careful to make sure that we didn't do any of those

1582
01:26:51,700 --> 01:26:52,200
things.

1583
01:26:52,800 --> 01:26:55,500
We don't use manifest, we don't use side by side assembly or any of

1584
01:26:55,500 --> 01:26:55,900
that stuff.

1585
01:26:55,900 --> 01:26:59,300
We intentionally made it so that it was a straightforward as possible.

1586
01:26:59,600 --> 01:26:59,800
So that

1587
01:27:00,000 --> 01:27:02,300
Almost any system, no matter what side by side, assemblies were

1588
01:27:02,300 --> 01:27:05,500
installed or what version of whatever you had was installed.

1589
01:27:05,600 --> 01:27:09,300
We would work and we have more to do along those lines that we should

1590
01:27:09,300 --> 01:27:10,100
probably do.

1591
01:27:10,100 --> 01:27:11,300
So we're not like perfect or anything yet.

1592
01:27:11,300 --> 01:27:14,900
But even from the outset, we tried very hard to not lean on any of

1593
01:27:14,900 --> 01:27:18,600
that stuff because it is very, very unreliable and extremely poorly

1594
01:27:18,600 --> 01:27:19,300
maintained.

1595
01:27:19,800 --> 01:27:22,900
So, hopefully, that gives you an idea of what I was trying to talk

1596
01:27:22,900 --> 01:27:23,500
about.

1597
01:27:25,000 --> 01:27:26,800
And there you go.

1598
01:27:46,300 --> 01:27:48,000
Seems to me nobody at Microsoft.

1599
01:27:48,000 --> 01:27:50,400
Has any idea about why Windows is still even working properly?

1600
01:27:51,000 --> 01:27:54,100
Well yeah, and I mean, I feel kind of bad, I don't know, you know, I

1601
01:27:54,100 --> 01:27:56,400
don't really know anyone who works on Windows anymore for the most

1602
01:27:56,400 --> 01:28:02,300
part, but I strongly suspect and I could be wrong.

1603
01:28:02,300 --> 01:28:05,000
But I strongly suspect that there are still some good Windows kernel

1604
01:28:05,000 --> 01:28:05,700
guys there.

1605
01:28:07,400 --> 01:28:14,300
And I honestly feel kind of sad for them because the windows kernel, I

1606
01:28:14,300 --> 01:28:18,000
don't know that much about how it's in today, but just back in the day

1607
01:28:18,000 --> 01:28:23,300
Windows NT kernel was pretty good and did a lot of smart things and so

1608
01:28:23,800 --> 01:28:26,700
I feel like people really kind of crud it up.

1609
01:28:27,800 --> 01:28:32,400
A good thing that people at Microsoft had made and I don't know if

1610
01:28:32,400 --> 01:28:37,400
they feel upset about that, but I feel upset on their behalf because

1611
01:28:37,700 --> 01:28:40,800
it is not true, that Microsoft is like a monolithically, stupid

1612
01:28:40,800 --> 01:28:41,400
entity.

1613
01:28:42,300 --> 01:28:43,300
That is not true.

1614
01:28:44,200 --> 01:28:47,300
There are, or at least were very smart people at Microsoft, who did

1615
01:28:47,300 --> 01:28:48,600
some very smart things.

1616
01:28:49,900 --> 01:28:57,400
And so, it's unfortunate that those people are kind of drowned out by

1617
01:28:57,700 --> 01:29:02,600
The mediocrity surrounding them, in that sense.

1618
01:29:03,000 --> 01:29:06,400
And it really makes what would have probably been a very good

1619
01:29:06,400 --> 01:29:11,300
operating system that could have lasted a long time, much worse.

1620
01:29:11,600 --> 01:29:12,300
Right?

1621
01:29:12,600 --> 01:29:17,800
And so I mean it's kind of an unfortunate lesson but probably a lesson

1622
01:29:17,800 --> 01:29:21,200
worth heating which is that, you know, your operating system is only

1623
01:29:21,200 --> 01:29:22,200
good as its weakest link.

1624
01:29:22,200 --> 01:29:24,600
So if you let the user layer,

1625
01:29:25,600 --> 01:29:29,800
Where everyone's working, get credit up by mediocre programming.

1626
01:29:30,600 --> 01:29:33,700
Then it strangles, in some sense.

1627
01:29:34,200 --> 01:29:37,400
Perhaps, some very good programming, done by, you know, you're Colonel

1628
01:29:37,400 --> 01:29:38,200
guys or whatever.

1629
01:29:38,200 --> 01:29:38,700
Right.

1630
01:29:39,000 --> 01:29:41,600
And so, you really do run into this this circumstance.

1631
01:29:41,600 --> 01:29:45,100
Where if you don't, if you don't really maintain the Integrity of your

1632
01:29:45,100 --> 01:29:48,500
operating system through the whole, you know, the whole stack.

1633
01:29:49,500 --> 01:29:53,700
Whoever of that stack are the are the lousy programmers.

1634
01:29:53,900 --> 01:29:58,000
That's how lousy your applications will actually be because no amount

1635
01:29:58,000 --> 01:29:59,800
of a great Colonel can make up for the

1636
01:30:00,000 --> 01:30:02,500
Fact that none of the software works because the dependencies are on

1637
01:30:02,700 --> 01:30:03,100
or whatever.

1638
01:30:03,100 --> 01:30:03,600
Right.

1639
01:30:03,800 --> 01:30:06,400
Nobody can fix the fact that the Windows registry is complete

1640
01:30:06,400 --> 01:30:09,300
nightmare like no doesn't I don't care how good the kernel is, it

1641
01:30:09,300 --> 01:30:13,000
can't reach in and change the fact that the registry is a complete and

1642
01:30:13,000 --> 01:30:14,400
utter nightmare, right?

1643
01:30:15,800 --> 01:30:19,800
And so that's, you know, it's a really tough thing and it is

1644
01:30:22,200 --> 01:30:25,300
Organizationally a really big problem, right?

1645
01:30:25,300 --> 01:30:27,400
Because if you were looking and saying, how do we do this better than

1646
01:30:27,400 --> 01:30:27,900
Microsoft?

1647
01:30:27,900 --> 01:30:31,900
You're like, well, you know it's a really big undertaking because it

1648
01:30:31,900 --> 01:30:36,500
means having such meticulous attention to detail at every stage of the

1649
01:30:36,500 --> 01:30:37,100
pipeline.

1650
01:30:37,300 --> 01:30:41,000
It's no wonder that nobody has really been able to come and do it

1651
01:30:41,000 --> 01:30:44,300
because if you need, you know, if you think you're going to build this

1652
01:30:44,300 --> 01:30:46,300
really big operating system with all these people

1653
01:30:47,600 --> 01:30:50,400
How are you going to make sure that none of those people are going to

1654
01:30:50,400 --> 01:30:51,300
crap it up, right?

1655
01:30:51,300 --> 01:30:55,000
Like it's real hard and so so yeah.

1656
01:30:56,400 --> 01:30:59,600
In some sense when I get angry about this sort of stuff to, I'm like I

1657
01:30:59,600 --> 01:31:03,700
said I'm kind of angry on behalf of the colonel guy because if Windows

1658
01:31:03,700 --> 01:31:09,000
was just universally awful and it had always been awful then you know

1659
01:31:09,000 --> 01:31:10,400
I'm not that upset, right?

1660
01:31:10,400 --> 01:31:13,200
It's like okay, it was an awful thing, it stayed awful, it's awful

1661
01:31:13,200 --> 01:31:14,800
now, whatever, right?

1662
01:31:14,900 --> 01:31:17,200
But I don't really believe that I

1663
01:31:17,300 --> 01:31:23,500
I really enjoyed using NT 351, I really did and I thought it was a

1664
01:31:23,500 --> 01:31:26,100
pretty darn good operating system, to be honest with you.

1665
01:31:26,500 --> 01:31:32,800
And so I feel like the reason that it saddens me quite a bit is I feel

1666
01:31:32,800 --> 01:31:36,500
like a lot of the changes that have been made to the Opry system over

1667
01:31:36,500 --> 01:31:37,200
time.

1668
01:31:37,900 --> 01:31:39,200
Have really taken something.

1669
01:31:39,200 --> 01:31:42,100
That was honestly, my preferred platform and made it really pretty

1670
01:31:42,100 --> 01:31:45,100
lousy today and

1671
01:31:46,900 --> 01:31:47,900
And that's too bad, right?

1672
01:31:47,900 --> 01:31:50,800
Because that's like losing a really good operating system instead of

1673
01:31:50,800 --> 01:31:51,900
just never having one.

1674
01:31:52,300 --> 01:31:55,300
And that feels a lot worse in some sense because, you know, it could

1675
01:31:55,300 --> 01:31:56,300
have been right?

1676
01:31:56,300 --> 01:31:59,800
You know, it could have been great and instead it's really pretty

1677
01:31:59,800 --> 01:32:00,300
lousy.

1678
01:32:15,700 --> 01:32:16,900
Let's see.

1679
01:32:23,900 --> 01:32:26,600
Isn't the huge amount of dependencies and inevitability of complex

1680
01:32:26,600 --> 01:32:29,300
software looking modern full OS for productivity desktop.

1681
01:32:30,700 --> 01:32:33,000
I don't think it is, I really don't.

1682
01:32:34,200 --> 01:32:37,200
And the reason that I don't think it is is because like I said, if you

1683
01:32:37,200 --> 01:32:42,100
go back to NT 351 and then you look at you know Windows today

1684
01:32:43,300 --> 01:32:46,100
If you look at the difference in capabilities of the operating system

1685
01:32:46,100 --> 01:32:50,300
layer, it's really pretty minor, right?

1686
01:32:50,300 --> 01:32:54,300
Like, if you take a look at the number of capabilities, the US has

1687
01:32:54,300 --> 01:32:56,500
gained versus the amount of complexity.

1688
01:32:56,500 --> 01:32:57,100
It is introduced.

1689
01:32:57,600 --> 01:32:59,900
It's staggering to see the difference between those two.

1690
01:33:00,000 --> 01:33:01,200
Things, right?

1691
01:33:01,500 --> 01:33:05,300
It's kind of like, they added, you know, a million extra complexity,

1692
01:33:05,400 --> 01:33:08,100
and got twice the functionality or something, right?

1693
01:33:08,300 --> 01:33:09,700
And you have to ask yourself

1694
01:33:11,300 --> 01:33:13,300
Do you really think that's inevitable?

1695
01:33:13,600 --> 01:33:18,700
Do you really think that there was no way to get 2x the functionality

1696
01:33:18,700 --> 01:33:22,900
of Windows 351 without making it like that much worse?

1697
01:33:23,000 --> 01:33:25,500
And I really don't believe that was true, right?

1698
01:33:25,500 --> 01:33:27,400
I believe that you could have done a much better job.

1699
01:33:27,500 --> 01:33:27,700
Yeah.

1700
01:33:27,700 --> 01:33:30,700
Maybe it couldn't be as good because it has a little bit more and

1701
01:33:30,700 --> 01:33:32,100
there's growing pains and all that stuff.

1702
01:33:32,100 --> 01:33:37,300
But no, I mean I think that they could have done better and I suspect

1703
01:33:37,300 --> 01:33:40,900
it's because they just didn't have, you know,

1704
01:33:41,800 --> 01:33:46,300
They had too many teams that were mediocre just doing whatever they

1705
01:33:46,300 --> 01:33:50,100
want and being allowed to ship it and that just proliferated the API

1706
01:33:50,100 --> 01:33:55,400
count and proliferated the API problems and they never had that kind

1707
01:33:55,400 --> 01:33:59,800
of tight control that maybe you know like the colonel team was

1708
01:33:59,800 --> 01:34:01,900
exercising when they were actually thinking about what they were

1709
01:34:01,900 --> 01:34:05,000
making and and shipping a decent API or whatever, right?

1710
01:34:05,400 --> 01:34:09,200
And so I think that you know, it's really that it's just a cultural.

1711
01:34:09,500 --> 01:34:10,900
That was a cultural problem.

1712
01:34:11,000 --> 01:34:15,800
L'm that if they had had a solution for it, we're, we're like shipping

1713
01:34:15,800 --> 01:34:19,000
and API at Microsoft was like a privilege, not something.

1714
01:34:19,000 --> 01:34:20,200
Just anyone could do.

1715
01:34:20,300 --> 01:34:23,600
And you really had to go through a battery of people who would just

1716
01:34:23,600 --> 01:34:28,200
pound on you to make sure you really needed to and that you did it

1717
01:34:28,200 --> 01:34:28,700
right.

1718
01:34:29,700 --> 01:34:32,100
If that had been the culture, I don't think we would have been in this

1719
01:34:32,100 --> 01:34:33,600
mess, right?

1720
01:34:33,600 --> 01:34:36,200
But that was not the culture of the culture was just like any old

1721
01:34:36,200 --> 01:34:37,900
teams could start up and ship these things.

1722
01:34:37,900 --> 01:34:40,900
If they got any political capital and then it's just n, you end up.

1723
01:34:41,100 --> 01:34:42,700
With eight billion of these things.

1724
01:34:43,200 --> 01:34:46,600
ActiveX indirect show and all these nightmares and they're just in the

1725
01:34:46,600 --> 01:34:47,600
API set.

1726
01:34:47,700 --> 01:34:49,600
There you go, like that's out there, right?

1727
01:34:49,700 --> 01:34:53,400
Someone thinks that a side assembly is a good idea and poops it out

1728
01:34:53,400 --> 01:34:54,100
calm.

1729
01:34:54,100 --> 01:34:59,700
All this stuff just gets you know, kind of pooped in there and I think

1730
01:34:59,700 --> 01:35:04,500
that if you don't have an organization, a systemic organizational way

1731
01:35:04,900 --> 01:35:09,100
that you restrict changes to the core feature set of the operating

1732
01:35:09,100 --> 01:35:10,900
system, only two people.

1733
01:35:11,000 --> 01:35:15,100
Who are extremely competent have API design experience and know

1734
01:35:15,100 --> 01:35:16,700
exactly what they are doing.

1735
01:35:18,900 --> 01:35:21,200
Then you end up with the situation we're in today.

1736
01:35:34,400 --> 01:35:39,500
Do you know that your channel runs ads for an Esports gambling site so

1737
01:35:39,500 --> 01:35:45,700
my I don't get to control what what channel adds, get run on my on my

1738
01:35:45,700 --> 01:35:50,500
feet obviously and I make no money from twitch at all.

1739
01:35:50,600 --> 01:35:52,600
I make no ad Revenue whatsoever.

1740
01:35:52,600 --> 01:35:54,100
So I am not running any ads.

1741
01:35:54,500 --> 01:35:55,500
That's just what they run.

1742
01:35:56,600 --> 01:35:59,900
And if you subscribe to Twitch, then you won't see.

1743
01:36:00,100 --> 01:36:00,500
Ads.

1744
01:36:00,900 --> 01:36:05,800
And so I'm okay with that because, you know, if you choose not to pay

1745
01:36:05,800 --> 01:36:08,100
for the service then you know, and they want to show you ads and

1746
01:36:08,100 --> 01:36:08,400
that's fine.

1747
01:36:08,400 --> 01:36:11,800
If they didn't give you a choice to subscribe and not see the ads.

1748
01:36:11,800 --> 01:36:14,700
I would probably be upset about that but since they give you that

1749
01:36:14,700 --> 01:36:16,000
choice, I think that's fine.

1750
01:36:16,100 --> 01:36:18,800
They don't charge much for the service and they are handling all of

1751
01:36:18,800 --> 01:36:20,900
the distribution and broadcasting of the series here.

1752
01:36:20,900 --> 01:36:22,400
So I'm fine with that.

1753
01:36:23,000 --> 01:36:23,800
It's a reasonable deal.

1754
01:36:30,600 --> 01:36:36,100
All right, I think I'm going to wrap it up.

1755
01:36:47,200 --> 01:36:47,800
Yeah.

1756
01:36:48,300 --> 01:36:49,500
All right, I think we're good.

1757
01:36:49,500 --> 01:36:50,700
I'm going to go ahead and wrap it up.

1758
01:36:51,300 --> 01:36:54,500
Got a good API rantin, they're always fun.

1759
01:36:55,500 --> 01:36:57,300
All right, everyone, thank you for joining me for another episode of

1760
01:36:57,300 --> 01:36:57,800
handmade here.

1761
01:36:57,800 --> 01:36:59,100
It's been a pleasure coding with you.

1762
01:36:59,100 --> 01:37:03,700
As always, if you want to follow along at home, you can always

1763
01:37:03,700 --> 01:37:05,400
pre-order the game and handmade here at Oregon.

1764
01:37:05,400 --> 01:37:07,700
It comes with the full source code every night after I'm done.

1765
01:37:07,700 --> 01:37:10,800
I upload it and you can download it and play around with it and

1766
01:37:10,800 --> 01:37:12,500
experiment with it to your heart's content.

1767
01:37:12,700 --> 01:37:16,600
Tent again, he could do that he made here at or you can also go there

1768
01:37:16,600 --> 01:37:20,100
to see about our forums which place you can ask questions about the

1769
01:37:20,100 --> 01:37:23,300
series if you're trying to follow along and you have some questions

1770
01:37:23,300 --> 01:37:27,800
about previous episodes stuff like that, it also has a annotate

1771
01:37:27,800 --> 01:37:30,700
episode guide which members of the community have been working on

1772
01:37:30,700 --> 01:37:33,400
which allows you to kind of jump around to thing's pretty cool.

1773
01:37:34,300 --> 01:37:38,000
And there's also ports to Mac and Linux and stuff like that community

1774
01:37:38,000 --> 01:37:38,600
members have done.

1775
01:37:38,600 --> 01:37:40,600
So if you're trying to follow along another platform at you need a

1776
01:37:40,600 --> 01:37:42,500
little bit of help, there's some source code there.

1777
01:37:42,600 --> 01:37:45,200
There for you, that you can probably get you going.

1778
01:37:45,700 --> 01:37:46,700
We also have patreon page.

1779
01:37:46,700 --> 01:37:49,600
If you want to support the video series, always much appreciated.

1780
01:37:49,700 --> 01:37:51,500
We also have a tweet bot, the tweets.

1781
01:37:51,500 --> 01:37:53,700
The schedule at use of you're trying to catch the show live.

1782
01:37:54,000 --> 01:37:55,300
That's the place to go.

1783
01:37:56,000 --> 01:37:57,900
We'll be back here next week on Monday.

1784
01:37:58,300 --> 01:38:03,200
To start taking a look at how we can maybe expand our asset system.

1785
01:38:03,200 --> 01:38:04,400
That's kind of working relatively.

1786
01:38:04,400 --> 01:38:08,300
Well, now, kind of expand that into something that can represent a

1787
01:38:08,300 --> 01:38:11,600
richer set of data using maybe some of those tags ideas that we put in

1788
01:38:11,600 --> 01:38:11,900
there.

1789
01:38:12,300 --> 01:38:12,500
And so,

1790
01:38:12,700 --> 01:38:15,100
We'll try to Port the hero over to that and do a couple of other

1791
01:38:15,100 --> 01:38:16,500
things that will sort of.

1792
01:38:16,500 --> 01:38:18,600
Let us see whether that's going to work or whether we need some of the

1793
01:38:18,600 --> 01:38:19,200
things in there.

1794
01:38:19,600 --> 01:38:22,000
So that's what we'll be doing next week, I hope you'll join me for

1795
01:38:22,000 --> 01:38:22,500
that.

1796
01:38:22,900 --> 01:38:25,600
Again, it's getting kind of fun to kind of knock, all these features

1797
01:38:25,600 --> 01:38:27,200
off of our engine checklist.

1798
01:38:27,800 --> 01:38:30,900
It's starting to get pretty respectable and I'm pretty pleased with

1799
01:38:30,900 --> 01:38:31,100
it.

1800
01:38:31,100 --> 01:38:32,800
So hopefully you are too.

1801
01:38:33,500 --> 01:38:37,200
And yeah, and I hope to see you back here, Monday until then have a

1802
01:38:37,200 --> 01:38:38,200
great weekend, everyone.

1803
01:38:38,200 --> 01:38:39,500
And I will see you later.

