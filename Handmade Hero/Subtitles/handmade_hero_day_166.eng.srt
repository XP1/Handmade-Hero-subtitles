1
00:00:00,000 --> 00:00:02,400
Birding start recording.

2
00:00:04,200 --> 00:00:04,900
Okay.

3
00:00:05,500 --> 00:00:07,700
Hello everyone, and welcome to handmade hero.

4
00:00:07,700 --> 00:00:10,200
The show we code a complete game live on stream.

5
00:00:10,400 --> 00:00:12,000
No engines, no libraries.

6
00:00:12,600 --> 00:00:13,700
It's just us here.

7
00:00:14,100 --> 00:00:18,800
Although as I do mention now post, Sean Barrett's Birthday, we did

8
00:00:18,800 --> 00:00:21,000
show how to integrate one of his libraries into the asset.

9
00:00:21,000 --> 00:00:24,900
Packer if you would like to use it there's an f-zero in there that you

10
00:00:24,900 --> 00:00:29,800
can go check out because like I said, many times people ask me what

11
00:00:30,000 --> 00:00:33,000
Could I use if I was going to use a library it would be a Sean Barrett

12
00:00:33,000 --> 00:00:33,500
library.

13
00:00:33,600 --> 00:00:35,800
And so I showed how to do that for people who are interested.

14
00:00:35,900 --> 00:00:40,500
Anyway, that said we are in the middle of making some updates to our

15
00:00:40,500 --> 00:00:47,200
asset system because there was some bugs in it, and I talked about

16
00:00:47,200 --> 00:00:48,300
yesterday that I want to fix.

17
00:00:49,100 --> 00:00:52,400
Just get them out of the way sooner rather than later, and we aren't

18
00:00:52,400 --> 00:00:53,200
really finished with that.

19
00:00:53,200 --> 00:00:55,800
We still got more work to do before we get the bugs out.

20
00:00:55,900 --> 00:00:59,700
And so I'd like to finish doing that today, if possible today is day

21
00:00:59,700 --> 00:00:59,800
one.

22
00:01:00,000 --> 00:01:03,000
66, which means that if you have pre-ordered the game on handmade hero

23
00:01:03,300 --> 00:01:06,700
dot org and would like to follow along with my coding you can unpack

24
00:01:06,700 --> 00:01:08,400
day, 165 source code.

25
00:01:09,100 --> 00:01:11,600
That's the thing I'm working with here.

26
00:01:11,600 --> 00:01:13,600
My friend that is what I am doing.

27
00:01:14,800 --> 00:01:18,500
So yeah, the problems that we have at the moment is that we were kind

28
00:01:18,500 --> 00:01:21,500
of right in the middle of something here and we haven't really

29
00:01:21,500 --> 00:01:21,800
finished.

30
00:01:21,800 --> 00:01:23,500
There's there's a couple things that we haven't done yet.

31
00:01:23,500 --> 00:01:28,500
So first of all we never you know we haven't actually implemented this

32
00:01:28,500 --> 00:01:29,800
generation ID concept, I

33
00:01:29,900 --> 00:01:32,200
Talked about yesterday which is something that can protect our assets

34
00:01:32,200 --> 00:01:33,200
from being evicted.

35
00:01:33,200 --> 00:01:38,100
It helps us, get out of the business of using the old locking concept

36
00:01:38,100 --> 00:01:41,500
for assets, which I wanted to get rid of and it also helps prevent

37
00:01:41,500 --> 00:01:42,000
bugs.

38
00:01:42,200 --> 00:01:47,600
Now that we have moved the asset eviction into the memory allocation

39
00:01:47,600 --> 00:01:51,000
part which can happen, anytime you try to use an asset.

40
00:01:51,000 --> 00:01:51,500
So

41
00:01:56,700 --> 00:01:57,800
We need to plant that.

42
00:01:58,400 --> 00:02:01,900
We also have some other problems, which is that we kind of need to

43
00:02:01,900 --> 00:02:03,600
extend this notion cure.

44
00:02:03,600 --> 00:02:07,600
The atomic compare exchange un 32, this little lock here.

45
00:02:08,400 --> 00:02:13,200
It's kind of a little optimistic lock sort of a guy who is in stit

46
00:02:13,200 --> 00:02:16,400
responsible for keeping us from accidentally modifying, the linked

47
00:02:16,400 --> 00:02:17,600
list on two threads at once.

48
00:02:18,100 --> 00:02:22,700
We got some problems that we have to address with that as well and

49
00:02:22,700 --> 00:02:26,300
that is that since the linked list involves

50
00:02:26,500 --> 00:02:31,000
Sentinel and involves other links in the list.

51
00:02:31,500 --> 00:02:35,300
It means that really nobody no two threads should ever be touching the

52
00:02:35,300 --> 00:02:37,400
linked list at the same time, right?

53
00:02:38,300 --> 00:02:41,700
And so really what we'd rather do here because there's actually in

54
00:02:41,700 --> 00:02:43,600
addition to the fact that we took the Sentinel, which would be a

55
00:02:43,600 --> 00:02:46,700
problem here and some people mentioned that on the forums, there's

56
00:02:46,700 --> 00:02:49,300
also something that nobody has mentioned yet but I least I don't think

57
00:02:49,300 --> 00:02:49,500
so.

58
00:02:49,500 --> 00:02:53,300
But it's also true is that we also just have stuff in here that

59
00:02:53,300 --> 00:02:55,200
touches the linked list, right?

60
00:02:55,600 --> 00:02:56,300
We've got

61
00:02:56,400 --> 00:02:59,100
We've got stuff that like fries and asset and freeing an asset.

62
00:02:59,100 --> 00:02:59,900
Also touches the

63
00:03:00,000 --> 00:03:00,800
That's right.

64
00:03:01,000 --> 00:03:05,700
So really what we want to do here is inside this, you know, code here

65
00:03:05,700 --> 00:03:06,800
that does linked list stuff.

66
00:03:06,800 --> 00:03:09,600
We really want to do is isolate the stuff that ever works that linked

67
00:03:09,600 --> 00:03:13,700
list and make sure that nobody's ever going to use that linked list in

68
00:03:13,700 --> 00:03:16,700
any way, unless they've got the lock, right?

69
00:03:16,700 --> 00:03:20,800
So we kind of want to just add the concept of this lock in so that any

70
00:03:20,800 --> 00:03:24,600
time anyone's doing something that is sensitive.

71
00:03:24,800 --> 00:03:27,400
We can just make sure that it's only happening on one thread at a time

72
00:03:27,400 --> 00:03:29,200
because again, that linked list data.

73
00:03:30,000 --> 00:03:34,300
Is you know, we did not write that in a lock.

74
00:03:34,300 --> 00:03:38,700
Freeway the linked list cannot be operated on two threads at once that

75
00:03:38,700 --> 00:03:42,800
data is can you know kind of has to be touched atomically?

76
00:03:48,200 --> 00:03:49,700
Right, so you can kind of see it here.

77
00:03:50,700 --> 00:03:55,800
We've got these two guys, and those are essentially the operations

78
00:03:55,800 --> 00:03:59,500
that we have the atomic at the very least, but we also have some of

79
00:03:59,500 --> 00:04:03,000
the things, you know, that we might want to think about when we're

80
00:04:03,000 --> 00:04:03,600
looking in here.

81
00:04:03,600 --> 00:04:05,800
Like we have a choir asset memory, right?

82
00:04:06,200 --> 00:04:09,500
And when we're doing choir asset memory, one of the things that's also

83
00:04:09,500 --> 00:04:13,100
worth looking at, is we pretty much want to make sure that

84
00:04:13,300 --> 00:04:16,600
No, two people are doing acquire asset memory at the same time either.

85
00:04:17,000 --> 00:04:20,600
Because this is also, you know, something that's that could be

86
00:04:20,800 --> 00:04:22,500
contended in some way, right?

87
00:04:22,500 --> 00:04:25,100
I mean, if you think about what's happening here, when you do acquire

88
00:04:25,100 --> 00:04:30,000
assets memory, you're going to have situations where people are

89
00:04:30,000 --> 00:04:31,900
merging stuff and all these other sorts of things.

90
00:04:32,300 --> 00:04:34,800
And so, we actually have a number of things that if we really wanted

91
00:04:34,800 --> 00:04:39,200
to open this up and allow multiple threads to be doing whatever they

92
00:04:39,200 --> 00:04:43,100
want with the asset system, it's going to be pretty delicate, right?

93
00:04:43,200 --> 00:04:47,400
We're going to have it's going to be you know, it's going to be a

94
00:04:47,400 --> 00:04:48,600
little tricky, right?

95
00:04:49,200 --> 00:04:52,300
And so really the only things that we can choose to do, there are

96
00:04:52,300 --> 00:04:55,700
either limit these things to only happening on one thread at a time or

97
00:04:55,900 --> 00:04:56,400
accepting.

98
00:04:56,400 --> 00:05:00,700
The fact that we are going to take a look around actually doing them.

99
00:05:00,700 --> 00:05:04,700
And I don't necessarily know that there's a right answer to that

100
00:05:04,700 --> 00:05:08,300
without actually trying to do some profiling or, you know, having an

101
00:05:08,300 --> 00:05:11,300
opinion about what actually is going to happen.

102
00:05:12,400 --> 00:05:15,300
But if you take a look at some of the stuff that works here, right?

103
00:05:15,300 --> 00:05:18,900
You can kind of see most of the time we're in a situation where

104
00:05:18,900 --> 00:05:23,500
everything's okay and would be working, you know, without having to

105
00:05:23,500 --> 00:05:28,900
worry about anything in that, you know, without having to worry about

106
00:05:28,900 --> 00:05:32,200
multi-threaded stuff too much because like, for example, when we're

107
00:05:32,200 --> 00:05:35,600
doing stuff, like loading things, I think most of this stuff is

108
00:05:35,600 --> 00:05:36,600
relatively safe.

109
00:05:36,600 --> 00:05:37,300
Now, I guess what?

110
00:05:37,300 --> 00:05:40,600
I'm not sure about is like when we do begin to ask with memory, for

111
00:05:40,600 --> 00:05:42,000
example, and we're doing like load

112
00:05:42,400 --> 00:05:43,200
That sort of stuff.

113
00:05:43,500 --> 00:05:43,800
I guess.

114
00:05:43,800 --> 00:05:46,600
I don't actually know if that stuff is protected.

115
00:05:46,600 --> 00:05:48,900
So like we should probably take a quick look at these.

116
00:05:48,900 --> 00:05:52,500
I'd like to just get a bit of a assessment there because the rest of

117
00:05:52,500 --> 00:05:54,900
this stuff is is fine, right?

118
00:05:55,000 --> 00:05:56,500
Right up until we get to here.

119
00:05:56,900 --> 00:05:59,200
So, it's basically like a choir asset memory

120
00:06:00,000 --> 00:06:02,600
Add us at her to list that are touching things, that kind of like

121
00:06:02,600 --> 00:06:04,000
linked together, right?

122
00:06:04,000 --> 00:06:06,500
And so those are going to be threading problems, right?

123
00:06:08,800 --> 00:06:10,400
If we want to allow them to do that.

124
00:06:15,100 --> 00:06:15,700
but,

125
00:06:17,400 --> 00:06:19,100
I don't know about begin past with memory.

126
00:06:20,200 --> 00:06:23,100
I would like to know a little bit more about that one because I don't

127
00:06:23,100 --> 00:06:25,700
remember what we were thinking about exactly when we made it.

128
00:06:26,000 --> 00:06:27,300
So I kind of want to make sure.

129
00:06:27,800 --> 00:06:28,000
Yeah.

130
00:06:28,000 --> 00:06:30,300
So if you take, if you take a look at beginning tasked with memory,

131
00:06:30,300 --> 00:06:33,200
you've kind of got a situation there where it's also, it's in a

132
00:06:33,200 --> 00:06:36,700
similar kind of, it's in a similar, kind of state.

133
00:06:37,400 --> 00:06:42,500
And so, when I think about this guy, it kind of feels to me.

134
00:06:44,700 --> 00:06:49,100
You know, it feels to me like, if you're already on a background task,

135
00:06:49,200 --> 00:06:52,700
I don't feel like the background tasks should then spawn a background

136
00:06:52,700 --> 00:06:54,000
task to load something.

137
00:06:54,200 --> 00:06:54,800
Right?

138
00:06:54,900 --> 00:06:58,100
I feel like that's just kind of getting a little bit ridiculous,

139
00:06:58,100 --> 00:06:58,600
right?

140
00:06:58,700 --> 00:07:03,500
So it seems to me that the more you know useful thing probably to do

141
00:07:03,500 --> 00:07:06,700
here would be to make it so that we don't have to make this

142
00:07:06,700 --> 00:07:09,800
multi-threaded like only the main thread would like kick these guys

143
00:07:09,800 --> 00:07:13,600
off, seems like a bit of a smarter thing to do that's just my

144
00:07:13,600 --> 00:07:14,200
assumption.

145
00:07:14,500 --> 00:07:15,200
Right?

146
00:07:17,000 --> 00:07:19,800
We don't have to again, we can have begin test of memory.

147
00:07:19,800 --> 00:07:23,500
Also take a lock because it just needs to search over this list.

148
00:07:23,500 --> 00:07:27,500
So for example, it could just do a thing where it quick takes a lock.

149
00:07:27,500 --> 00:07:31,700
Then does it's you know, it's searching and then on takes a lock, we

150
00:07:31,700 --> 00:07:35,400
could totally do that but I'm not sure again how thread crazy we

151
00:07:35,400 --> 00:07:38,600
really want to be with a lot of the stuff because again, threaded

152
00:07:38,600 --> 00:07:42,500
programming is always kind of a bit of a nightmare because it's a lot

153
00:07:42,500 --> 00:07:44,200
more complicated than single-threaded coding and so

154
00:07:44,300 --> 00:07:48,000
The more of it that you add kind of the more pain and suffering, you

155
00:07:48,000 --> 00:07:53,000
are going to to, you're going to feel that make sense.

156
00:07:54,800 --> 00:07:59,200
So if you can you would like to keep your things relatively segregated

157
00:07:59,300 --> 00:08:02,200
such that the number of things that actually have to kind of talk to

158
00:08:02,200 --> 00:08:06,400
each other and synchronize with each other is as minimal as possible.

159
00:08:11,900 --> 00:08:12,500
So yeah.

160
00:08:13,200 --> 00:08:18,300
So I do wonder if the task oriented thing is really the smartest thing

161
00:08:18,800 --> 00:08:19,400
to do.

162
00:08:20,100 --> 00:08:24,500
And the reason that I wonder that is that it kind of feels like to me

163
00:08:24,800 --> 00:08:30,300
if that maybe what we should do here is it is depending on who is

164
00:08:30,300 --> 00:08:33,299
actually issuing, this load bitmap, whether or not it should be

165
00:08:33,299 --> 00:08:34,500
spawned in the background.

166
00:08:34,900 --> 00:08:39,299
I feel like it's kind of something that's, you know, worth analyzing a

167
00:08:39,299 --> 00:08:39,900
little bit.

168
00:08:41,000 --> 00:08:46,300
So the place that that it gets called right the place that that load

169
00:08:46,300 --> 00:08:47,400
bitmap gets called.

170
00:08:47,500 --> 00:08:52,200
Take a look here is I believe any time someone tries to use a bitmap

171
00:08:52,600 --> 00:08:55,100
that they can't find that it can't find, right?

172
00:08:55,100 --> 00:08:55,900
And it'll do that.

173
00:08:56,600 --> 00:08:59,300
So when we're actually doing that load bitmap call

174
00:09:00,000 --> 00:09:03,400
I feel like what we would want to do is say okay if the render if this

175
00:09:03,400 --> 00:09:08,000
render group was a render group that's meant to sort of be the main

176
00:09:08,000 --> 00:09:13,300
line main thread render group, then sure spawn a thread, no problem.

177
00:09:14,100 --> 00:09:17,400
But I think what we would rather do for everybody else is say, you

178
00:09:17,400 --> 00:09:20,300
know what, let's not actually do that.

179
00:09:20,500 --> 00:09:24,400
For anyone who you know is, is going to be sort of on one of the

180
00:09:24,400 --> 00:09:27,800
peripheral threats because you know, that thread can just all waiting

181
00:09:27,800 --> 00:09:29,000
for the asset that is trying to load.

182
00:09:29,000 --> 00:09:29,800
It doesn't have to do.

183
00:09:30,000 --> 00:09:32,400
Do an overlap kind of a thing, right?

184
00:09:33,100 --> 00:09:36,700
That to me seems a little bit more sane, seems a little bit more like,

185
00:09:36,700 --> 00:09:39,100
what I would expect to have happen.

186
00:09:39,400 --> 00:09:43,500
And so, you know, to me that just feels a little bit better.

187
00:09:43,700 --> 00:09:47,200
So, you know, I'm thinking it's something like this, you know, it

188
00:09:47,200 --> 00:09:50,400
would do sort of a get bitmap call right?

189
00:09:50,400 --> 00:09:52,900
And if it gets back a bitmap it pushes the bitmap.

190
00:09:53,700 --> 00:09:58,800
What I might say is you know okay if you don't have a bitmap you know,

191
00:09:59,500 --> 00:09:59,900
maybe

192
00:10:00,200 --> 00:10:05,500
It would load that in like so and kind of force the bitmap to be

193
00:10:05,500 --> 00:10:08,500
loaded if that makes sense.

194
00:10:08,900 --> 00:10:13,800
By using some kind of a, like a way of saying, hey I need you to load.

195
00:10:13,800 --> 00:10:17,100
I definitely want you to load this bitmap in, right?

196
00:10:17,100 --> 00:10:20,700
I want you to to force the load to happen at this time, right?

197
00:10:21,500 --> 00:10:25,300
And so we could do something here that something like, you know,

198
00:10:26,000 --> 00:10:26,900
background.

199
00:10:29,000 --> 00:10:30,200
Renders in background.

200
00:10:32,600 --> 00:10:36,500
If that was what was happening, then we avoid kind of that that ever

201
00:10:36,500 --> 00:10:38,600
having that happen, right?

202
00:10:39,200 --> 00:10:42,000
So, we'll and we'll also assert here, right?

203
00:10:42,000 --> 00:10:43,600
That that that's not the case.

204
00:10:44,200 --> 00:10:48,000
Like so yeah, something like this.

205
00:10:56,200 --> 00:10:57,200
So, that's what I'm thinking.

206
00:10:57,800 --> 00:11:00,600
So, that way we can we can do, we can force it to load the bitmap.

207
00:11:00,600 --> 00:11:03,700
We could also say that they're, you know, this thing could potentially

208
00:11:03,700 --> 00:11:04,900
return the bitmap directly.

209
00:11:04,900 --> 00:11:07,400
I don't know if it's probably not really worth it and we'd like it to

210
00:11:07,400 --> 00:11:09,700
go through the get bitmap path anyway to make sure it gets marked and

211
00:11:09,700 --> 00:11:10,600
all those other things.

212
00:11:11,400 --> 00:11:15,800
So anyway, that's what I think we would probably want to do and and

213
00:11:15,800 --> 00:11:18,600
that way we can force the bitmap load and in here.

214
00:11:18,600 --> 00:11:21,100
I guess what I would say is we should have something that's kind of

215
00:11:21,100 --> 00:11:22,800
like you know a Boolean

216
00:11:23,800 --> 00:11:27,800
We do little bit map, which is like immediate, right?

217
00:11:27,900 --> 00:11:31,100
And so know, normally when you call it you would call it with with

218
00:11:31,100 --> 00:11:32,000
with false.

219
00:11:32,700 --> 00:11:36,700
But if you call it with true, then it won't do the task based load,

220
00:11:36,800 --> 00:11:37,400
right?

221
00:11:37,800 --> 00:11:43,300
So basically this thing here is going to like assume 0, something like

222
00:11:43,300 --> 00:11:43,800
this.

223
00:11:44,600 --> 00:11:51,100
And then what we would do is we would say, okay if the this is an

224
00:11:51,100 --> 00:11:53,200
immediate call our say, not an immediate call.

225
00:11:54,400 --> 00:11:58,200
Then we would go ahead and do begin to ask with memory write something

226
00:11:58,200 --> 00:11:58,700
like this.

227
00:12:01,000 --> 00:12:06,700
And, you know, assuming that either, we are immediate or we have a

228
00:12:06,700 --> 00:12:11,700
task, we would go ahead with our attempt, right?

229
00:12:12,300 --> 00:12:15,900
So if we come in here, we then do all this sort of stuff.

230
00:12:15,900 --> 00:12:16,800
The way we normally would.

231
00:12:16,800 --> 00:12:19,300
This is something that's going to have to get locked again because

232
00:12:19,300 --> 00:12:21,700
that's going to be contended.

233
00:12:21,900 --> 00:12:25,500
And then what we would want to do here is say alright, either, we're

234
00:12:25,500 --> 00:12:28,300
going to add it in the case of the task, right?

235
00:12:28,300 --> 00:12:30,000
We're going to go ahead and add it on here.

236
00:12:31,000 --> 00:12:37,800
Either we're going to add it or we're just going to execute the load

237
00:12:37,800 --> 00:12:40,500
asset work essentially directly.

238
00:12:40,800 --> 00:12:41,600
Right.

239
00:12:42,500 --> 00:12:46,400
So if we take a look, I think we could actually do that relatively

240
00:12:46,400 --> 00:12:46,900
easily.

241
00:12:47,000 --> 00:12:50,600
If we take a look at what load asset work actually does, you can see

242
00:12:50,600 --> 00:12:53,800
that like the interior of it is pretty straightforward, right?

243
00:12:53,800 --> 00:12:57,200
So you could imagine us having a little version of this here.

244
00:12:57,700 --> 00:13:00,200
That's a little more straightforward something.

245
00:13:00,400 --> 00:13:04,300
Thing that would just do this part of it, right?

246
00:13:04,300 --> 00:13:05,300
Something like this.

247
00:13:07,900 --> 00:13:12,800
And so that's going to be like load asset work immediate or directly

248
00:13:13,000 --> 00:13:14,800
something like that, right?

249
00:13:15,300 --> 00:13:18,600
And that thing would get past all the stuff that it actually needs

250
00:13:18,600 --> 00:13:20,800
here like whatever these things are, right?

251
00:13:20,900 --> 00:13:26,500
So that would get past the file handle that would get past the offset.

252
00:13:28,700 --> 00:13:29,900
And the size.

253
00:13:29,900 --> 00:13:32,500
And again, all I'm doing here is making it so that I can call this

254
00:13:32,500 --> 00:13:32,800
thing.

255
00:13:32,800 --> 00:13:36,300
Oh, whoops, that's pasting that into the wrong place.

256
00:13:37,500 --> 00:13:38,700
Not always so good.

257
00:13:40,300 --> 00:13:40,500
Yeah.

258
00:13:40,500 --> 00:13:44,000
So we got the offset, the size, the destination, like so.

259
00:13:44,900 --> 00:13:54,300
So let's go ahead and handle offset size destination, right?

260
00:13:56,700 --> 00:14:00,000
And that is it.

261
00:14:00,000 --> 00:14:02,600
Fixed up for the asset in the final state.

262
00:14:02,600 --> 00:14:04,900
Looks like so get rid of the size to the destination.

263
00:14:05,400 --> 00:14:09,600
So we've got the asset and the final State there they are, right?

264
00:14:10,100 --> 00:14:11,300
So there's the asset.

265
00:14:13,000 --> 00:14:14,500
And there's the final state.

266
00:14:16,200 --> 00:14:21,900
Okay, so if we wanted to do that directly, we just go ahead and call

267
00:14:21,900 --> 00:14:22,600
that here.

268
00:14:22,700 --> 00:14:26,900
So no change to this particular part of the function, right?

269
00:14:30,700 --> 00:14:31,300
There we go.

270
00:14:33,700 --> 00:14:39,600
And that would just kind of do that work there inside the sort of

271
00:14:39,600 --> 00:14:40,500
deferred call back.

272
00:14:40,500 --> 00:14:41,000
Right.

273
00:14:41,400 --> 00:14:43,500
But what that lets us do now as well?

274
00:14:43,700 --> 00:14:45,200
Is that lets us go.

275
00:14:45,200 --> 00:14:48,200
Okay, you know if we didn't want to do that, right?

276
00:14:48,200 --> 00:14:57,000
If task was not actually set up and said we could do it a little bit

277
00:14:57,000 --> 00:14:57,500
differently.

278
00:14:57,500 --> 00:14:59,800
I'm not sure why that asset.

279
00:15:00,000 --> 00:15:04,900
To list is there specifically like before this thing I have to look

280
00:15:04,900 --> 00:15:06,700
and see if there's some kind of reason for it.

281
00:15:08,300 --> 00:15:09,400
Let's see there we go.

282
00:15:10,600 --> 00:15:13,400
So basically what I'm saying here is that like you know if we're going

283
00:15:13,400 --> 00:15:16,700
to do load asset work directly, now what we could do is we could just

284
00:15:16,700 --> 00:15:21,000
do all of these things the exact same way, right?

285
00:15:21,300 --> 00:15:25,700
So the final state is s uploaded the final destination.

286
00:15:25,700 --> 00:15:28,000
In fact, you know what, we could do to, we could do this even a little

287
00:15:28,000 --> 00:15:29,800
bit more ridiculously

288
00:15:30,000 --> 00:15:30,100
Lee.

289
00:15:30,200 --> 00:15:31,900
We could just say, oh, okay.

290
00:15:32,300 --> 00:15:38,800
We've got the work like so and we are going to set it all up like

291
00:15:38,800 --> 00:15:39,300
this.

292
00:15:39,800 --> 00:15:43,000
I don't know why I didn't do this to begin with in fact now that I'm

293
00:15:43,000 --> 00:15:46,500
thinking about it, it was pretty stupid for me to not do it this way

294
00:15:46,500 --> 00:15:50,400
to begin with, but you know, what can I do?

295
00:15:50,400 --> 00:15:54,600
Sometimes you do things that are dumb, because then what you can do is

296
00:15:54,600 --> 00:15:58,500
you can just say like, you know oh we've got to push work here, right?

297
00:15:59,700 --> 00:16:03,000
We're like, you know, this is our, this is our task work.

298
00:16:03,600 --> 00:16:09,200
So we'll just go ahead and do start ass, work equals work.

299
00:16:09,800 --> 00:16:12,900
And in this case, we just pull them out.

300
00:16:13,000 --> 00:16:19,200
Like so, but we could just pass the actual pointer if we wanted to

301
00:16:19,600 --> 00:16:22,300
which would have saved me the trouble of doing all the junk that I

302
00:16:22,300 --> 00:16:25,000
just did, which is why I said that I was pretty dumb.

303
00:16:25,300 --> 00:16:26,600
For example, right?

304
00:16:26,600 --> 00:16:28,200
You just do that.

305
00:16:29,000 --> 00:16:33,300
You had a clue, which I didn't, but there you go.

306
00:16:33,900 --> 00:16:36,700
So then, you know, you'd come back up here and you done do your

307
00:16:36,700 --> 00:16:42,100
stupidity, rather slowly, something like this, where you could then

308
00:16:42,100 --> 00:16:45,000
go, oh hey, you know, all those things that I took out before just

309
00:16:45,000 --> 00:16:45,600
kidding.

310
00:16:46,400 --> 00:16:49,600
My joke was a little in joke that I had.

311
00:16:50,000 --> 00:16:52,800
We all had a good time about it.

312
00:16:52,800 --> 00:16:55,800
We all laughed and it was great.

313
00:16:56,600 --> 00:16:57,800
Everyone loved it.

314
00:16:59,700 --> 00:17:02,100
and looks like, this is actually happening now

315
00:17:03,400 --> 00:17:03,900
Right.

316
00:17:04,800 --> 00:17:09,300
So they're yeah and so now that we can get rid of this kind of passing

317
00:17:09,300 --> 00:17:11,900
festival and there we go.

318
00:17:12,800 --> 00:17:13,700
So yeah.

319
00:17:13,700 --> 00:17:17,400
So that's a little bit more again, just kind of pushing it sort of

320
00:17:17,400 --> 00:17:18,900
slowly into that direction.

321
00:17:19,800 --> 00:17:21,099
What else do we have here?

322
00:17:21,099 --> 00:17:29,000
So, whoops, at entry tasks work like so, just get that cleaned up a

323
00:17:29,000 --> 00:17:29,800
little bit there.

324
00:17:30,100 --> 00:17:32,400
Okay, so yeah.

325
00:17:32,400 --> 00:17:33,000
So now if you

326
00:17:33,200 --> 00:17:36,700
You look at what's happening in here, you can kind of see that.

327
00:17:36,700 --> 00:17:39,200
We have the asset header.

328
00:17:39,200 --> 00:17:40,500
Add acid here to list stuff.

329
00:17:47,600 --> 00:17:49,500
And these sorts of things, right?

330
00:17:52,200 --> 00:17:57,400
I don't know how much we care about making the sound stuff work

331
00:17:57,400 --> 00:17:58,100
properly.

332
00:18:00,000 --> 00:18:01,700
Threaded, because I don't think anyone ever does that.

333
00:18:01,700 --> 00:18:04,800
We could always sort of think about doing that.

334
00:18:04,800 --> 00:18:06,800
Maybe a little bit more in the future.

335
00:18:06,800 --> 00:18:10,200
But point being, if you take a look at what's happening.

336
00:18:10,200 --> 00:18:14,800
Now, if you're doing this sort of that Acquire, if you're doing the

337
00:18:14,800 --> 00:18:17,300
immediate version of this, which is what would be happening on

338
00:18:17,300 --> 00:18:18,300
separate threads.

339
00:18:18,300 --> 00:18:23,600
Then what we really have is we just have to worry about these these

340
00:18:23,600 --> 00:18:27,500
things here as being the things that actually need to happen.

341
00:18:27,500 --> 00:18:29,800
Sort of inside of a

342
00:18:30,000 --> 00:18:30,700
Lock, right?

343
00:18:30,700 --> 00:18:34,600
We want to be able to lock to the acquire asset memory for this guy,

344
00:18:35,200 --> 00:18:37,900
and then we want to do this this stuff here, right?

345
00:18:40,300 --> 00:18:45,700
So what would be nice obviously is if we could do just take the lock

346
00:18:45,700 --> 00:18:50,000
once and then do both of these two things, I don't know if how

347
00:18:50,000 --> 00:18:52,400
realistic that is, I suspect, that's pretty realistic.

348
00:18:52,500 --> 00:18:54,400
I feel like a choir asset memory.

349
00:18:54,800 --> 00:18:59,200
Never happens in a case where you wouldn't add asset header to list.

350
00:18:59,300 --> 00:19:02,300
You can see that it happens in both cases when the asset memory is

351
00:19:02,300 --> 00:19:03,100
acquired.

352
00:19:03,300 --> 00:19:06,600
So it seems to me like, perhaps we could just make that happen

353
00:19:06,900 --> 00:19:08,300
directly meaning.

354
00:19:08,500 --> 00:19:12,900
As soon as the asset memory is acquired, the asset could get added to

355
00:19:12,900 --> 00:19:13,500
the list.

356
00:19:13,500 --> 00:19:19,100
And I think that is probably a good idea because that way you could do

357
00:19:19,100 --> 00:19:21,000
all of your locking at once.

358
00:19:21,000 --> 00:19:23,500
And so if we were to coming here, for example, right?

359
00:19:23,700 --> 00:19:27,500
And we were to say, all right, there's the asset index, there's the

360
00:19:27,500 --> 00:19:30,300
size, there's the asset.

361
00:19:31,700 --> 00:19:32,300
Right?

362
00:19:34,400 --> 00:19:38,400
I think that is probably what we would have preferred have happened

363
00:19:39,500 --> 00:19:40,000
before.

364
00:19:40,000 --> 00:19:44,300
So if we just got rid of that, that would probably be better, right?

365
00:19:44,700 --> 00:19:46,800
And I think that's what we would want.

366
00:19:46,800 --> 00:19:50,200
That way, that law can only be taken that lack of route would be taken

367
00:19:50,200 --> 00:19:55,900
when time and then all the work would be done at the same point,

368
00:19:55,900 --> 00:19:56,500
right?

369
00:19:57,500 --> 00:19:57,900
Yeah.

370
00:19:58,200 --> 00:19:58,600
Oops.

371
00:19:58,700 --> 00:19:59,600
That was the wrong thing.

372
00:20:00,100 --> 00:20:00,900
I didn't mean to push.

373
00:20:01,600 --> 00:20:01,900
Hawaii.

374
00:20:01,900 --> 00:20:02,400
Put it there.

375
00:20:02,500 --> 00:20:03,900
I wanted to acquire asset memory.

376
00:20:04,700 --> 00:20:10,900
Yeah, so in here we would come out the result, their acquire asset

377
00:20:10,900 --> 00:20:15,200
memory, the problem with that, I guess is that it doesn't quite know

378
00:20:15,600 --> 00:20:19,500
what the asset index is and it does need to know what the asset index

379
00:20:19,500 --> 00:20:19,700
is.

380
00:20:19,700 --> 00:20:21,300
So we'd have to add that in here.

381
00:20:21,700 --> 00:20:25,000
So we'd have to do like a choir asset memory and it would have to then

382
00:20:25,000 --> 00:20:28,500
take an asset index at the end, but that's not really a big deal

383
00:20:28,500 --> 00:20:29,600
because we always know what it is.

384
00:20:29,600 --> 00:20:30,700
We're doing require memory

385
00:20:31,500 --> 00:20:34,400
so, when we get that Acquire asset memory back,

386
00:20:37,100 --> 00:20:40,200
I guess I don't know why we don't just treat it as an asset memory

387
00:20:40,200 --> 00:20:40,500
header.

388
00:20:40,500 --> 00:20:42,400
Always because that actually is what it is.

389
00:20:43,700 --> 00:20:45,000
So that's kind of another weird thing.

390
00:20:45,000 --> 00:20:47,300
I guess we wanted to make it so that it could have done multiple

391
00:20:47,300 --> 00:20:47,600
things.

392
00:20:47,600 --> 00:20:48,800
Maybe I'm not really sure.

393
00:20:49,500 --> 00:20:50,700
I don't actually know why.

394
00:20:51,700 --> 00:20:53,500
I don't actually know why that would be the case.

395
00:20:53,500 --> 00:20:56,700
It's a good question, but I think we could probably change this pretty

396
00:20:56,700 --> 00:20:57,900
safely to say, okay?

397
00:20:58,200 --> 00:20:59,800
Actually it always returns a massacre.

398
00:21:00,000 --> 00:21:07,000
I had her right and so when we do result in here, we would just go

399
00:21:07,000 --> 00:21:13,000
ahead and and yeah and make this.

400
00:21:13,000 --> 00:21:13,400
I don't know why.

401
00:21:13,400 --> 00:21:15,800
That was a, you ate star, that doesn't really make much sense.

402
00:21:15,800 --> 00:21:20,300
Because asset memory header was a void, so that was not necessary, but

403
00:21:20,300 --> 00:21:21,700
I guess that's just what was happening.

404
00:21:22,200 --> 00:21:23,000
And that's fine.

405
00:21:24,100 --> 00:21:27,900
So yeah, so that seems reasonable.

406
00:21:29,100 --> 00:21:29,900
And then down here

407
00:21:30,000 --> 00:21:32,700
here, when we do, add us at header to list,

408
00:21:35,500 --> 00:21:39,000
We would know that we're adding this asset memory header itself.

409
00:21:39,500 --> 00:21:42,400
So let me take a look at which one that is ADD.

410
00:21:43,700 --> 00:21:44,600
I want to take a look at that.

411
00:21:44,800 --> 00:21:49,300
Add asset memory to list her to list.

412
00:21:50,400 --> 00:21:53,900
So it just it gets the memory header, as the first thing, it does, and

413
00:21:53,900 --> 00:21:57,600
it uses the acid and extra that, and then it sets some things, right?

414
00:21:57,800 --> 00:21:59,400
And add asset header to list.

415
00:21:59,400 --> 00:22:01,900
Only happens ever in one place, right?

416
00:22:02,100 --> 00:22:05,400
It only happens there, so really, we should probably just get rid of

417
00:22:05,400 --> 00:22:06,500
this thing.

418
00:22:09,600 --> 00:22:10,600
Kind of in its entirety.

419
00:22:10,600 --> 00:22:15,700
I guess really, what should happen is this should come up here right?

420
00:22:16,100 --> 00:22:17,100
And this should happen.

421
00:22:18,200 --> 00:22:18,700
Right.

422
00:22:18,900 --> 00:22:19,800
It should do this.

423
00:22:20,900 --> 00:22:24,600
So it should be, you know, if the results exceeded which, you know, it

424
00:22:24,600 --> 00:22:26,900
pretty much is guaranteed to always do.

425
00:22:28,100 --> 00:22:32,100
We could almost just sort the result here, then we're going to do this

426
00:22:32,100 --> 00:22:33,500
stuff, right.

427
00:22:34,400 --> 00:22:38,300
And we know what the size is, because there it is, right?

428
00:22:38,400 --> 00:22:43,600
So really we just need that that was all we actually needed.

429
00:22:43,900 --> 00:22:46,400
Nothing too complicated there.

430
00:22:46,900 --> 00:22:47,900
And so when we do,

431
00:22:48,000 --> 00:22:50,700
This, we would just pass the ID value.

432
00:22:50,900 --> 00:22:53,400
And then when this guy does it down here, right?

433
00:22:53,600 --> 00:23:00,100
It would also pass the ID value, and that is pretty much that, right?

434
00:23:00,100 --> 00:23:02,600
That's, that's all we would really need to have happen there.

435
00:23:03,800 --> 00:23:08,000
So, we need to go do that render background stuff obviously, but yeah,

436
00:23:08,000 --> 00:23:08,600
that's fine.

437
00:23:09,400 --> 00:23:10,000
So let's see.

438
00:23:10,000 --> 00:23:14,200
So now our total size in this case, I guess is not allowed to actually

439
00:23:14,200 --> 00:23:17,300
be a memory index, so I guess this has to be just a regular size.

440
00:23:17,300 --> 00:23:17,800
Is that true?

441
00:23:18,000 --> 00:23:19,700
Ooh, it does appear to be true.

442
00:23:20,700 --> 00:23:21,900
Let's see what else we got.

443
00:23:22,000 --> 00:23:24,500
And so there we go.

444
00:23:25,500 --> 00:23:27,500
Insert asset header at front.

445
00:23:29,700 --> 00:23:32,300
And so now we would have, is basically, we need to take the lock on

446
00:23:32,300 --> 00:23:32,800
this guy.

447
00:23:32,800 --> 00:23:35,100
And then we would need to take the lock on the other guy.

448
00:23:35,100 --> 00:23:41,200
Now, you know, the the other guy is pretty harmless.

449
00:23:41,400 --> 00:23:44,700
This guy is pretty harmful, I guess I would say

450
00:23:48,300 --> 00:23:49,400
so, in some sense,

451
00:23:51,600 --> 00:23:55,000
You know, really you might want a more fine-grained lock here.

452
00:23:55,100 --> 00:23:57,800
So the reason I say that is because we take a look at all the stuff

453
00:23:57,800 --> 00:23:59,700
that this guy has to do is pretty substantial.

454
00:24:00,200 --> 00:24:04,300
If you take a look at what has to happen with the other linked list

455
00:24:04,300 --> 00:24:07,000
stuff, it's really not that complicated.

456
00:24:07,000 --> 00:24:11,800
And so you know that that is one reason that would argue against sort

457
00:24:11,800 --> 00:24:14,500
of bothering to do what I'm doing here, which is like, putting them

458
00:24:14,500 --> 00:24:16,800
into a single lock and it's like, maybe they should just have their

459
00:24:16,800 --> 00:24:19,300
own separate locks because of the difference between those two.

460
00:24:19,300 --> 00:24:22,900
Because basically, this is an incredibly small amount of code move

461
00:24:22,900 --> 00:24:23,100
header.

462
00:24:23,100 --> 00:24:26,200
To front is like really pretty irrelevant, right?

463
00:24:26,200 --> 00:24:27,900
Move header to front, looks like that.

464
00:24:30,500 --> 00:24:32,700
It's really, really kind of boring, right?

465
00:24:33,100 --> 00:24:36,300
And insert asset header up front.

466
00:24:36,300 --> 00:24:40,300
It's this little, you know, it's so it's so droll, it's almost not

467
00:24:40,300 --> 00:24:41,000
even worth mentioning.

468
00:24:41,000 --> 00:24:44,100
Its this is the entirety of the code, right?

469
00:24:44,700 --> 00:24:50,900
And so, you know, locking this guy up so that he can't keep doing this

470
00:24:51,300 --> 00:24:57,800
while this other guy is doing this whole huge Ridiculousness.

471
00:24:58,000 --> 00:24:59,500
We're looking for blocks and all these

472
00:24:59,600 --> 00:25:01,400
Of the sorts of things, right?

473
00:25:02,000 --> 00:25:05,600
That seems less good to me.

474
00:25:07,500 --> 00:25:08,300
Does that make sense?

475
00:25:09,900 --> 00:25:13,900
I'm hoping that makes some sense to people and so really it seems like

476
00:25:13,900 --> 00:25:16,900
what you would want to do throughout this thing is like try to get

477
00:25:16,900 --> 00:25:18,800
that try to get that lock.

478
00:25:20,500 --> 00:25:21,300
For the outside.

479
00:25:21,300 --> 00:25:24,000
But that's just my that's just my thinking.

480
00:25:24,600 --> 00:25:25,100
For the moment.

481
00:25:25,100 --> 00:25:26,600
We could try doing it with a regular lock.

482
00:25:26,600 --> 00:25:33,300
We could just do something where we're like, okay, you know, begin you

483
00:25:33,300 --> 00:25:36,800
know, asset lock something like this, right?

484
00:25:37,600 --> 00:25:39,400
And and then we would do

485
00:25:41,800 --> 00:25:43,100
And asset lock.

486
00:25:45,800 --> 00:25:48,000
Write something like that.

487
00:25:48,800 --> 00:25:51,300
And the same thing would happen out here.

488
00:25:52,600 --> 00:25:54,900
Right, we do a begin a set lock.

489
00:25:57,400 --> 00:25:59,500
And then we would do an end asset lock.

490
00:26:03,400 --> 00:26:03,900
Right.

491
00:26:06,700 --> 00:26:10,800
So yeah, so you could do something like this where we would lock

492
00:26:10,800 --> 00:26:14,900
around those guys and we will take a look at that in a second and

493
00:26:14,900 --> 00:26:15,800
that's all fine.

494
00:26:16,600 --> 00:26:17,200
But

495
00:26:24,500 --> 00:26:25,700
You know, looking at it.

496
00:26:25,700 --> 00:26:31,200
So kind of the thing that I am a little worried about, right, is what

497
00:26:31,200 --> 00:26:36,300
we would like to do is we would like to have a way when we're doing

498
00:26:36,300 --> 00:26:37,200
this locking.

499
00:26:37,500 --> 00:26:40,900
You know, if we're checking to see something about whether like an

500
00:26:40,900 --> 00:26:46,200
asset is loaded or not, right that can sort of go away at any time,

501
00:26:46,600 --> 00:26:47,200
right?

502
00:26:47,500 --> 00:26:50,100
And so, you know,

503
00:26:52,600 --> 00:26:56,500
We almost need to do something more like this, where we say, we're

504
00:26:56,500 --> 00:26:58,400
going to sort of take the lock, right?

505
00:26:58,400 --> 00:26:59,800
We then

506
00:27:00,000 --> 00:27:02,300
To see whether the asset is loaded.

507
00:27:05,800 --> 00:27:09,400
Right, and then we would do the end asset lock here.

508
00:27:11,600 --> 00:27:12,300
Sort of thing.

509
00:27:14,000 --> 00:27:14,700
It's not fabulous.

510
00:27:14,700 --> 00:27:17,700
I'm kind of playing around with this that make sense just to see what

511
00:27:17,700 --> 00:27:18,200
I want to do.

512
00:27:19,200 --> 00:27:23,200
So when you come in here you're going to try and get this this asset

513
00:27:23,200 --> 00:27:24,000
whatever it is.

514
00:27:24,500 --> 00:27:29,600
You begin the lock you check to see what the situation is and then you

515
00:27:29,600 --> 00:27:32,800
know you see if you can actually do whatever it is you want to do you

516
00:27:32,800 --> 00:27:34,000
wouldn't do this, right?

517
00:27:34,000 --> 00:27:37,700
You just do this sort of thing, so you'd say like okay, I'm the only

518
00:27:37,700 --> 00:27:42,100
person who's allowed to access that state variable the state list at

519
00:27:42,100 --> 00:27:42,900
this point.

520
00:27:43,600 --> 00:27:46,700
So then you start, you take a look at what the state is.

521
00:27:46,900 --> 00:27:48,700
You you know, something like this.

522
00:27:52,300 --> 00:27:52,900
Right?

523
00:27:53,000 --> 00:27:54,100
You take a look at what the state is.

524
00:27:54,100 --> 00:27:58,400
Assuming it's loaded, you go ahead and modify the list, you set up the

525
00:27:58,400 --> 00:28:04,600
generation ID and then you use set the state to to whatever it needs

526
00:28:04,600 --> 00:28:05,000
to be.

527
00:28:05,300 --> 00:28:05,700
Right?

528
00:28:06,300 --> 00:28:07,100
What was this?

529
00:28:08,000 --> 00:28:10,000
This was just, that doesn't even need to happen, right?

530
00:28:10,000 --> 00:28:13,600
It's really just that all were talking about is is doing the move

531
00:28:13,600 --> 00:28:14,900
headed to front thing, right?

532
00:28:16,200 --> 00:28:17,300
That's all we're talking about.

533
00:28:18,600 --> 00:28:21,300
So you take the asset lock, you check to see if it's loaded.

534
00:28:21,300 --> 00:28:25,700
Assuming it is, you do the move to front and then afterwards, you you

535
00:28:25,700 --> 00:28:27,300
exit, right?

536
00:28:28,300 --> 00:28:31,800
And you wouldn't need to do this anymore because the asset, the lock

537
00:28:32,100 --> 00:28:34,800
would presumably do that, right?

538
00:28:36,100 --> 00:28:36,500
Yeah.

539
00:28:36,700 --> 00:28:39,900
Well, yeah, so anyway,

540
00:28:42,300 --> 00:28:44,700
That would be that and we'd have one here.

541
00:28:44,700 --> 00:28:47,900
So we would want something like that, which just guarantees that these

542
00:28:47,900 --> 00:28:51,400
two things always happen that way.

543
00:28:51,400 --> 00:28:54,200
Now, I want to make sure I'm just going to take a look at remove as a

544
00:28:54,200 --> 00:28:55,800
header from list, right?

545
00:28:56,400 --> 00:28:56,800
Yeah.

546
00:28:56,800 --> 00:28:58,900
And, and move header to front as well.

547
00:28:59,900 --> 00:29:01,900
Yeah, you can kind of see that.

548
00:29:01,900 --> 00:29:03,500
That doesn't get used anywhere either.

549
00:29:04,000 --> 00:29:07,100
So it would really be something where it's going to be up in here.

550
00:29:07,100 --> 00:29:09,100
So, you know, it's something like this.

551
00:29:10,600 --> 00:29:11,900
Got that asset header.

552
00:29:12,700 --> 00:29:15,500
So it would be something like this, right?

553
00:29:15,700 --> 00:29:18,300
Putting that in there, trying to get things down to us.

554
00:29:18,300 --> 00:29:21,700
The smallest possible set of things to look at basically.

555
00:29:22,300 --> 00:29:27,100
So there's the result, there's the result, remove the S editor from

556
00:29:27,100 --> 00:29:30,600
list, then we would assert it at the front like so

557
00:29:32,300 --> 00:29:35,100
Remove acid header from list.

558
00:29:37,200 --> 00:29:41,100
And so, these two guys would be the entirety of the work that gets

559
00:29:41,100 --> 00:29:44,400
done outside there, so it would look like that.

560
00:29:44,800 --> 00:29:45,400
There we go.

561
00:29:47,000 --> 00:29:47,600
Yeah.

562
00:29:47,700 --> 00:29:51,200
And so that's let's see how I feel about that.

563
00:29:51,500 --> 00:29:54,700
Again, like I said multiplayer program was always kind of annoying but

564
00:29:54,700 --> 00:29:55,800
how you know, what do you do?

565
00:29:57,400 --> 00:29:57,900
so anyway,

566
00:30:00,100 --> 00:30:02,300
We go ahead and get the asset we say.

567
00:30:02,300 --> 00:30:06,100
All right, let's optimistically take that lock their.

568
00:30:07,000 --> 00:30:09,200
So we'll just kind of spin on here till we can get.

569
00:30:09,200 --> 00:30:11,600
It will move the thing to the front.

570
00:30:11,600 --> 00:30:12,100
If it's loaded.

571
00:30:12,100 --> 00:30:15,100
Otherwise we'll just pass through it immediately release it right?

572
00:30:16,500 --> 00:30:17,100
All good.

573
00:30:18,100 --> 00:30:20,400
And that's the only place that that really, ever gets done that

574
00:30:20,400 --> 00:30:23,200
happens on, but that would happen on both sounds and bitmaps.

575
00:30:23,700 --> 00:30:27,400
In case we ever do, want sounds to be a thing in the future.

576
00:30:28,200 --> 00:30:29,800
And again, that's that's just touching.

577
00:30:30,000 --> 00:30:34,500
That list, which, you know, anyone could be touching, you know, at the

578
00:30:34,500 --> 00:30:35,400
same time, basically.

579
00:30:35,400 --> 00:30:38,100
So that's why I wanted to to block that off.

580
00:30:38,100 --> 00:30:39,700
Now, begin asset.

581
00:30:39,700 --> 00:30:44,000
Lock also, what happened here on acquire assets memory, which is the

582
00:30:44,000 --> 00:30:46,400
other thing that that does this kind of work.

583
00:30:46,800 --> 00:30:49,700
It basically has to look through that same, you know, kind of another

584
00:30:49,700 --> 00:30:54,300
one of those lists that keeps all the free store stuff so that's all

585
00:30:54,300 --> 00:30:54,800
good.

586
00:30:54,900 --> 00:30:57,400
And then after it's done, it would release it.

587
00:30:57,500 --> 00:30:59,800
Taking a look here at

588
00:31:00,000 --> 00:31:01,600
What the other things do?

589
00:31:03,500 --> 00:31:04,900
Yeah.

590
00:31:04,900 --> 00:31:07,200
Taking a look at what the other things do.

591
00:31:07,800 --> 00:31:09,000
I feel like, really?

592
00:31:09,000 --> 00:31:12,700
Now, as you can see, they don't really do anything other than call a

593
00:31:12,700 --> 00:31:18,100
choir asset memory, and potentially push a task on, which is again all

594
00:31:18,100 --> 00:31:18,700
fine.

595
00:31:19,500 --> 00:31:21,700
Since I don't think there's anything else that would have to happen

596
00:31:21,700 --> 00:31:25,000
there, I think that's all good, right?

597
00:31:26,400 --> 00:31:29,800
We're checking against asset State loaded since

598
00:31:29,900 --> 00:31:33,800
We're only care about the fact that something can move something to

599
00:31:33,800 --> 00:31:34,800
unloaded.

600
00:31:36,600 --> 00:31:39,100
The only place that can really happen, right?

601
00:31:39,600 --> 00:31:42,400
Is is when we actually free stuff, right?

602
00:31:42,400 --> 00:31:46,200
So the only place that can really happen is in here when we evict

603
00:31:46,200 --> 00:31:48,200
stuff and that's inside the lock as well.

604
00:31:48,200 --> 00:31:51,500
So in theory, as long as something was equal to a state loaded, it

605
00:31:51,500 --> 00:31:54,600
could never go to unload it again, except for some other piece of

606
00:31:54,600 --> 00:31:55,300
others in the lock.

607
00:31:55,300 --> 00:31:56,200
So we wouldn't have to worry about that.

608
00:31:56,200 --> 00:31:59,600
So I think that's a little bit better now.

609
00:32:00,000 --> 00:32:05,000
My assumption, don't quote me on it, of course, but but that is my

610
00:32:05,000 --> 00:32:05,600
assumption.

611
00:32:06,300 --> 00:32:10,900
All right, so if we go ahead and do in here, something to actually

612
00:32:10,900 --> 00:32:15,000
make the asset lock thing happen, what does that look like?

613
00:32:15,600 --> 00:32:21,700
Again, this is just going to be a pretty pretty brain-dead little

614
00:32:21,700 --> 00:32:22,200
lock.

615
00:32:22,400 --> 00:32:25,000
It's just going to be something that sits there and Spins to try and

616
00:32:25,000 --> 00:32:26,000
get access.

617
00:32:26,600 --> 00:32:29,800
And again, this is only for a situation that would be

618
00:32:29,900 --> 00:32:32,400
Pretty lightweight, which is why I'm a little worried about the fact

619
00:32:32,400 --> 00:32:34,700
that the allocator would be behind it because the allocator is not

620
00:32:34,700 --> 00:32:35,500
very efficient.

621
00:32:35,800 --> 00:32:38,000
But again, you know, that's something that we would start to tackle

622
00:32:38,000 --> 00:32:41,200
once we have profiles and actually know that, you know, what's a

623
00:32:41,200 --> 00:32:43,300
problem and how are things working in that sort of stuff.

624
00:32:44,400 --> 00:32:47,600
But in order to do that, what I would want to do is I'd want to have

625
00:32:47,600 --> 00:32:52,100
some way of, you know you know, just having a lock here, it would

626
00:32:52,100 --> 00:32:57,500
literally just be a thing that was like, lock right operation lock or

627
00:32:57,500 --> 00:32:59,800
something like this and then what we would want to

628
00:33:00,000 --> 00:33:04,200
Say okay, the operation lock always has to be set to 0, so we need to

629
00:33:04,200 --> 00:33:06,700
just do something where we spin.

630
00:33:08,000 --> 00:33:17,600
Like so, and right and when we're doing the spinning, jenny and asset

631
00:33:17,600 --> 00:33:18,700
lock is pretty easy.

632
00:33:18,700 --> 00:33:20,600
We just set the operation lock 20.

633
00:33:20,600 --> 00:33:24,500
That's that's really all we would need to do, right?

634
00:33:25,100 --> 00:33:29,300
But in this case, we need to do something where as we do our spinning.

635
00:33:31,600 --> 00:33:36,600
I keep forgetting we don't need this because the the Acquire The

636
00:33:36,900 --> 00:33:39,000
Exchange actually does it for us.

637
00:33:39,600 --> 00:33:43,400
So all we would do here is say okay we want to do an atomic compare

638
00:33:43,400 --> 00:33:49,200
exchange to you know with our lock we want to make sure that we get

639
00:33:49,200 --> 00:33:50,500
back the right thing.

640
00:33:50,500 --> 00:33:55,900
So we're just basically saying okay you know assuming that that we

641
00:33:55,900 --> 00:33:59,400
actually that actually worked we'll stop trying right?

642
00:34:00,100 --> 00:34:01,200
And normally what you would do

643
00:34:01,400 --> 00:34:05,000
Here is you'd potentially put your thread to sleep if you couldn't get

644
00:34:05,000 --> 00:34:07,500
it and you thought it was going to be while we're not going to do that

645
00:34:07,500 --> 00:34:10,400
because we tend to only have as many threads as there are cores.

646
00:34:10,500 --> 00:34:13,100
We don't ever want these locks to actually take very long so they kind

647
00:34:13,100 --> 00:34:15,500
of just want to sit there hammering on them, as often as possible for

648
00:34:15,500 --> 00:34:19,900
the most part, that's what we would actually like to see happen

649
00:34:21,900 --> 00:34:25,600
because so probably we really don't want to do anything else.

650
00:34:25,699 --> 00:34:26,500
Particularly fancy there.

651
00:34:26,500 --> 00:34:29,699
Now I'm going to go ahead and check because I always forget the order

652
00:34:29,699 --> 00:34:30,800
of the parameters here.

653
00:34:31,400 --> 00:34:33,699
So there's that value that we're setting, right?

654
00:34:33,699 --> 00:34:37,000
There's the operation lock, that's a new value, we want and then

655
00:34:37,000 --> 00:34:41,199
there's the expected value and we want to see that we get back a zero.

656
00:34:41,199 --> 00:34:45,199
If we don't get back a zero, then that means there's already one in

657
00:34:45,199 --> 00:34:49,000
there and if there was already a one in there, that means someone else

658
00:34:49,000 --> 00:34:49,900
has a lock.

659
00:34:50,300 --> 00:34:53,500
So we don't want to do anything at that point.

660
00:34:53,900 --> 00:34:56,699
So we only want to actually stop trying to take the lock.

661
00:34:59,200 --> 00:35:01,000
Until after right?

662
00:35:01,300 --> 00:35:02,300
So that's what we want to do.

663
00:35:03,400 --> 00:35:04,100
So I don't know.

664
00:35:04,100 --> 00:35:08,400
That seems like that's mostly what I was thinking again, we'll have to

665
00:35:08,400 --> 00:35:12,300
take a closer look at it because multi-threading multi-threading code

666
00:35:12,300 --> 00:35:13,000
is hard.

667
00:35:13,000 --> 00:35:13,900
Let's go shopping.

668
00:35:16,500 --> 00:35:17,000
But yeah.

669
00:35:17,400 --> 00:35:20,200
So in here, all I need to do to finish up.

670
00:35:20,200 --> 00:35:23,500
What we were doing is say, okay, you know, in here, there's going to

671
00:35:23,500 --> 00:35:26,800
be a thing called renders and backgrounds, renters and backgrounds

672
00:35:26,800 --> 00:35:27,900
going to be set to false.

673
00:35:28,400 --> 00:35:33,200
By default, but remember exactly what the function is that creates

674
00:35:33,200 --> 00:35:36,900
things here, let's take a look there.

675
00:35:36,900 --> 00:35:40,400
Allocate render group and so assets should be locked.

676
00:35:40,400 --> 00:35:45,800
Should actually now be renders in background, right?

677
00:35:45,900 --> 00:35:47,300
That's what we actually want.

678
00:35:47,500 --> 00:35:48,600
Render some background.

679
00:35:48,700 --> 00:35:50,100
Oops, that's not good.

680
00:35:52,400 --> 00:35:53,000
What happened.

681
00:35:53,000 --> 00:35:53,600
There we go.

682
00:35:54,300 --> 00:35:55,300
Printers in background.

683
00:35:56,000 --> 00:35:57,900
And so, what I want to do here is say,

684
00:35:58,100 --> 00:35:59,600
renders in background equals renders and

685
00:36:00,000 --> 00:36:07,700
And so, and I think that's it, that's probably all that we really

686
00:36:07,700 --> 00:36:09,100
needed in here.

687
00:36:09,300 --> 00:36:15,100
You can kind of see, whoever says, if we go up here, to allocate

688
00:36:15,100 --> 00:36:18,100
render group, if you go up to allocate render group, you can see that

689
00:36:18,200 --> 00:36:20,900
the ground chunks, all say that already because they were doing that,

690
00:36:20,900 --> 00:36:23,000
they're passing that is whether they should walk or not.

691
00:36:23,300 --> 00:36:24,900
So that's just renders and background.

692
00:36:25,300 --> 00:36:28,600
And these guys don't render in background, which is exactly what we

693
00:36:28,600 --> 00:36:29,900
want to have happen, right?

694
00:36:30,000 --> 00:36:30,400
Right.

695
00:36:30,700 --> 00:36:33,400
And so that seems all pretty normal.

696
00:36:34,100 --> 00:36:40,200
So now when we just have to finish up, let's see here.

697
00:36:40,200 --> 00:36:42,000
How many that's it load fit map.

698
00:36:42,700 --> 00:36:48,300
Now when we call load bitmap we need to actually have in here since

699
00:36:48,300 --> 00:36:49,800
there's that immediate parameter.

700
00:36:50,100 --> 00:36:53,200
We need to actually have that in here, right immediate

701
00:36:55,600 --> 00:36:58,600
Prefetch bitmap, you really probably don't need that.

702
00:36:58,600 --> 00:37:00,900
Obviously, it's not going to be immediate if you're trying to show

703
00:37:00,900 --> 00:37:01,600
prefetch.

704
00:37:02,300 --> 00:37:04,200
So that's fine, right?

705
00:37:05,200 --> 00:37:10,500
So inside push bitmap, cure, we want to do an immediate here.

706
00:37:10,800 --> 00:37:13,700
We don't write that makes sense.

707
00:37:14,500 --> 00:37:16,900
So, so off we go, right?

708
00:37:18,100 --> 00:37:20,300
And and I think that's just about it.

709
00:37:21,100 --> 00:37:23,600
So I don't know that was a bit of a, you know,

710
00:37:23,800 --> 00:37:26,900
Kind of spamming a bit there, you know, expand it out a little bit,

711
00:37:28,200 --> 00:37:31,100
but let's, let's start taking a look and see, you know, where we've

712
00:37:31,400 --> 00:37:35,200
where we've got to we don't have any catastrophic bugs at the moment,

713
00:37:35,200 --> 00:37:35,400
right?

714
00:37:35,400 --> 00:37:36,200
We're still running.

715
00:37:37,000 --> 00:37:39,700
But like I said with multi-threaded code, you really don't really know

716
00:37:39,700 --> 00:37:40,600
if you're coated it, right?

717
00:37:40,600 --> 00:37:43,000
Until you actually dig down into a little bit.

718
00:37:44,100 --> 00:37:47,100
So I would say it's a little premature to declare any kind of Victory.

719
00:37:47,900 --> 00:37:51,600
I don't know how much we want to really investigate it at the moment

720
00:37:51,600 --> 00:37:53,600
because like I said, I think this is maybe something we want.

721
00:37:53,800 --> 00:37:55,000
Kind of weight a little bit on.

722
00:37:55,500 --> 00:37:57,300
But I did want to kind of have something in there.

723
00:37:57,300 --> 00:38:02,300
That was at least a plausible argument for how this thing could be

724
00:38:02,300 --> 00:38:04,900
multi thread safe, so that when we go to lock it down a little bit

725
00:38:04,900 --> 00:38:09,100
more, when we have some debug visualizations, that sort of stuff and

726
00:38:09,100 --> 00:38:11,500
can sort of maybe compartmentalize the code a little bit.

727
00:38:11,500 --> 00:38:15,600
There we aren't finding that like we just wrote this horribly awful

728
00:38:15,600 --> 00:38:17,600
thing that that could never possibly work.

729
00:38:17,600 --> 00:38:17,800
Right?

730
00:38:17,800 --> 00:38:20,900
So we want something that's at least plausibly going to work there.

731
00:38:21,700 --> 00:38:22,000
Okay.

732
00:38:22,000 --> 00:38:22,800
So let's

733
00:38:24,400 --> 00:38:27,700
Let's continue on just a little bit more, just to finish up a few more

734
00:38:27,700 --> 00:38:31,600
of these things here, which is we have not actually finished the

735
00:38:31,600 --> 00:38:34,000
generation ID thing, which is the other thing that I said that I

736
00:38:34,000 --> 00:38:34,800
wanted to do.

737
00:38:34,900 --> 00:38:38,100
And like I said, we've got about 20 minutes left, I guess because

738
00:38:38,100 --> 00:38:40,000
that's I was very long, pretty stream.

739
00:38:41,000 --> 00:38:44,000
So yeah, we've got got 20 more minutes.

740
00:38:44,700 --> 00:38:45,600
So let's take a look.

741
00:38:47,700 --> 00:38:51,100
See if we can't get that in so we at least have this stuff sort of

742
00:38:51,400 --> 00:38:52,600
nominally in place.

743
00:38:53,800 --> 00:38:56,200
All right, so what have we got here?

744
00:38:57,400 --> 00:38:58,800
This is gone, right?

745
00:38:58,800 --> 00:38:59,600
That's out of there.

746
00:39:01,500 --> 00:39:02,000
Goodbye.

747
00:39:03,300 --> 00:39:04,200
So we've got that.

748
00:39:04,200 --> 00:39:07,700
We now have this generation ID, the generation ID was the thing that I

749
00:39:07,700 --> 00:39:12,500
was saying would allow us to kind of set some kind of indication, you

750
00:39:12,500 --> 00:39:13,700
know of what was happening.

751
00:39:13,700 --> 00:39:17,500
You know, when this guy was getting used right?

752
00:39:17,500 --> 00:39:24,900
And so that we had some, you know, nominal notion of which generation

753
00:39:24,900 --> 00:39:26,500
ideas couldn't could not be freed.

754
00:39:26,500 --> 00:39:30,800
So let's take a look at what would be involved in tracking that

755
00:39:30,800 --> 00:39:33,100
obviously, in order to track that we

756
00:39:33,400 --> 00:39:39,300
Need the generation ID to sort of be, you know, to be known by the

757
00:39:39,300 --> 00:39:42,700
render group so that anytime a render group is using an ascetic can

758
00:39:42,700 --> 00:39:46,300
set that thing properly, right?

759
00:39:46,500 --> 00:39:49,800
So what we need to do here is we need to in the place where you set

760
00:39:49,800 --> 00:39:54,300
the generation ID, we need to now start actually thinking about what

761
00:39:54,300 --> 00:39:56,600
that generation ID would actually be.

762
00:39:57,000 --> 00:40:00,600
So when we call get asset, we have two things.

763
00:40:00,600 --> 00:40:03,200
We have an you know, the ID of the

764
00:40:03,300 --> 00:40:07,500
A thing we're getting and then also the generation ID of the thing.

765
00:40:08,200 --> 00:40:10,800
You know, that that was requesting it, right?

766
00:40:10,800 --> 00:40:17,600
Like so makes sense and so that will kind of push push things back.

767
00:40:18,800 --> 00:40:19,200
Oops.

768
00:40:19,600 --> 00:40:23,400
Nice tidy that'll push things back so we can kind of see who's calling

769
00:40:23,400 --> 00:40:25,900
that again using the comparator kind of guide you to the right place.

770
00:40:26,400 --> 00:40:29,500
So in here we could just say oh whatever the generation ID is of this

771
00:40:29,500 --> 00:40:32,800
render group, same thing here, right?

772
00:40:32,800 --> 00:40:33,200
Whatever the

773
00:40:33,400 --> 00:40:35,300
And ideas of the surrender group.

774
00:40:36,500 --> 00:40:37,500
No big deal.

775
00:40:38,500 --> 00:40:41,700
And so now all we have to do is actually have one of those generation

776
00:40:41,700 --> 00:40:44,900
IDs in the render group itself.

777
00:40:45,000 --> 00:40:51,200
And as far as the sound is concerned, not really sure what the easiest

778
00:40:51,200 --> 00:40:57,200
way to do that is, but I guess we'll kind of what kind of have to do

779
00:40:57,200 --> 00:40:57,600
it.

780
00:40:58,300 --> 00:41:00,800
Well, to kind of play that by ear a little bit, we'll probably have to

781
00:41:00,800 --> 00:41:05,300
get a generation ID every time we issue one of these things, right?

782
00:41:05,300 --> 00:41:06,100
We'll probably have to do.

783
00:41:06,300 --> 00:41:11,200
Something like right here where we access a generation ID, right?

784
00:41:11,700 --> 00:41:12,700
So yeah.

785
00:41:12,700 --> 00:41:14,500
So that's roughly what we're talking about.

786
00:41:14,500 --> 00:41:17,500
So if I have a generation ID here and maybe I'll switch that

787
00:41:17,500 --> 00:41:17,800
generation.

788
00:41:17,800 --> 00:41:20,200
I need to be a struct as well, just so we can keep them straight.

789
00:41:20,200 --> 00:41:23,000
So it's not just a u-32 that's flying around and get some extra type,

790
00:41:23,000 --> 00:41:25,700
checking from the compiler, which is usually a good thing.

791
00:41:28,400 --> 00:41:32,200
So I guess what we'd say here is a new generation ID.

792
00:41:33,000 --> 00:41:35,700
Something like this, we pass the assets in.

793
00:41:36,300 --> 00:41:37,700
Like so, right?

794
00:41:39,000 --> 00:41:41,100
And and the same thing would be true here.

795
00:41:41,100 --> 00:41:46,400
So every time we do one of these, like allocate render group things,

796
00:41:46,900 --> 00:41:51,500
this render group, every time it gets allocated is going to do thing

797
00:41:51,500 --> 00:41:51,800
work.

798
00:41:51,800 --> 00:41:55,900
It's a generation ID, New Generation ID from the assets, right?

799
00:41:56,600 --> 00:41:59,800
And go to do,

800
00:42:00,000 --> 00:42:02,300
Raishin ID like so.

801
00:42:04,400 --> 00:42:07,600
So, that's, you know, that's how that goes.

802
00:42:07,700 --> 00:42:10,000
I'm actually gonna set that right at the top, to be honest with you,

803
00:42:10,700 --> 00:42:13,300
we're going to go ahead and just going to make that be right on up

804
00:42:13,300 --> 00:42:13,600
there.

805
00:42:13,900 --> 00:42:17,200
Although, I suppose it should come technically a little bit after the

806
00:42:17,200 --> 00:42:20,600
assets itself, since that's who it's actually calling.

807
00:42:21,000 --> 00:42:21,700
So that's fine.

808
00:42:22,000 --> 00:42:25,400
All right, so something like this, where we just have a way of getting

809
00:42:25,400 --> 00:42:29,300
you generation ideas and then those generation IDs our past.

810
00:42:29,400 --> 00:42:29,900
And if

811
00:42:30,000 --> 00:42:31,700
I go into handmade asset.

812
00:42:34,300 --> 00:42:38,200
What I want to do here is make it so that people can get one of these

813
00:42:38,200 --> 00:42:39,500
generation IDs, right?

814
00:42:39,500 --> 00:42:40,700
Any time that they want.

815
00:42:40,700 --> 00:42:44,700
So you can get a generation ID by calling New Generation ID, you pass

816
00:42:44,700 --> 00:42:49,100
it the assets and it will go ahead and make one of those for you.

817
00:42:49,800 --> 00:42:55,600
So, if I, if I have the, the game assets here, game assets, we have

818
00:42:55,600 --> 00:42:59,700
something in here that's like, okay, you know, we want that S ID.

819
00:42:59,700 --> 00:43:02,200
I want to keep it away from the operation La Crosse with you.

820
00:43:02,200 --> 00:43:03,500
So that the cache line is different.

821
00:43:04,200 --> 00:43:07,500
Nothing is actually probably matters, all that much, but I'm going to

822
00:43:07,500 --> 00:43:09,500
go ahead and say that there's just one up here, that's like the

823
00:43:09,500 --> 00:43:11,100
generation ID, right?

824
00:43:11,600 --> 00:43:15,400
Or the Next Generation ID, Star Trek, the Next Generation ID.

825
00:43:16,100 --> 00:43:20,300
And then what I'm going to do is I'm going to say, all right, anytime

826
00:43:20,300 --> 00:43:23,900
you want one of these, it's just the generation ID + +, right?

827
00:43:24,000 --> 00:43:24,800
And return, a result.

828
00:43:24,800 --> 00:43:28,000
Now, unfortunately, I can't just do that directly because if these

829
00:43:28,000 --> 00:43:31,900
things are kind of, like I was saying, going to be issued for multiple

830
00:43:31,900 --> 00:43:33,200
threads potentially,

831
00:43:33,900 --> 00:43:37,900
Then we kind of have this problem where every time that you're going

832
00:43:37,900 --> 00:43:41,200
to do this, you could potentially get the same generation ID from two

833
00:43:41,200 --> 00:43:43,000
different people and that might be bad.

834
00:43:43,000 --> 00:43:45,100
We want everyone to have a unique generation ID.

835
00:43:45,100 --> 00:43:46,700
We want to be monotonically increasing.

836
00:43:47,000 --> 00:43:50,700
So what I really want here is I want to be able to do an atomic

837
00:43:50,700 --> 00:43:52,200
increment, right?

838
00:43:52,700 --> 00:43:56,100
And there's two ways that we could do an atomic increment one, is we

839
00:43:56,100 --> 00:43:58,600
could just do an atomic compare Exchange in a loop but that seems

840
00:43:58,600 --> 00:44:03,000
unnecessary because really there already is one of these, which is

841
00:44:04,900 --> 00:44:06,600
Atomic increment.

842
00:44:06,700 --> 00:44:13,000
That's actually already a thing that processors let you do already, so

843
00:44:13,000 --> 00:44:16,200
you can do like an interlocked increment.

844
00:44:17,900 --> 00:44:21,300
Like so and just to give us a little more flexibility.

845
00:44:21,300 --> 00:44:24,200
I might do an atomic add, right?

846
00:44:24,600 --> 00:44:32,100
So we have you in 32 value like so or add end which basically just

847
00:44:32,100 --> 00:44:36,400
takes one thing and adds it to another, but it does it in a way that's

848
00:44:36,400 --> 00:44:37,800
guaranteed to be Atomic.

849
00:44:38,100 --> 00:44:41,100
So we know that we won't get that race condition where two people are

850
00:44:41,100 --> 00:44:42,700
accessing the value at the same time and end up.

851
00:44:42,700 --> 00:44:45,100
Not actually implementing it twice only incrementing it once because

852
00:44:45,100 --> 00:44:46,800
they both read the same value, incremented it

853
00:44:46,900 --> 00:44:48,300
And wrote it back, right?

854
00:44:48,400 --> 00:44:51,000
So, you know, they both read five, they both, incremented 26 in both

855
00:44:51,000 --> 00:44:53,500
wrote it back, it was supposed to be one of them gets five.

856
00:44:53,500 --> 00:44:56,100
One of them, get 6, and it ends up at 7:00 instead, both of them got

857
00:44:56,100 --> 00:44:58,400
five in both wrote six, which ain't no good, right?

858
00:45:00,000 --> 00:45:00,700
We want to do that.

859
00:45:00,700 --> 00:45:01,600
We could do that.

860
00:45:02,000 --> 00:45:06,100
We just do something like this where the assets Next Generation ID

861
00:45:06,500 --> 00:45:10,100
gets passed in like so and then it does that interlocked add.

862
00:45:10,100 --> 00:45:13,600
Now the problem with interlocked ADD is that, I never remember whether

863
00:45:13,600 --> 00:45:15,900
it returns because it changes on different platforms.

864
00:45:17,000 --> 00:45:22,400
Whether the macro is defined to return the old value or the new value

865
00:45:22,400 --> 00:45:25,600
because I believe it's different, the function Returns the result,

866
00:45:25,700 --> 00:45:29,200
okay, so it's returning the new value so this is actually correct.

867
00:45:30,000 --> 00:45:32,500
But what's going to happen here in a second, right?

868
00:45:32,800 --> 00:45:39,100
Is we're going to have something like this on lunatics, the operating

869
00:45:39,100 --> 00:45:44,800
system for Europeans and what we want to do is we want to be able to

870
00:45:44,800 --> 00:45:47,800
do sink Val, probably add or something, right?

871
00:45:47,800 --> 00:45:51,100
Because I'm just going by what, you know, this, this is stuff that

872
00:45:51,100 --> 00:45:53,700
people who report to other platforms sent us like, could you do that?

873
00:45:54,200 --> 00:45:56,200
And think Val underscore something is that?

874
00:45:56,200 --> 00:45:58,300
There's, there's a sink Val ad or something like that, right?

875
00:45:58,300 --> 00:45:59,100
It's like sink.

876
00:46:00,200 --> 00:46:01,000
Val.

877
00:46:02,000 --> 00:46:04,700
Add something like this sink Val increment.

878
00:46:05,900 --> 00:46:06,900
I don't know.

879
00:46:08,800 --> 00:46:12,400
Let's see, there's there is a set of these.

880
00:46:14,200 --> 00:46:15,200
There we go, sink.

881
00:46:15,200 --> 00:46:16,300
Fetch an ad.

882
00:46:16,800 --> 00:46:17,700
That's what we want.

883
00:46:17,700 --> 00:46:19,600
I believe sync.

884
00:46:19,600 --> 00:46:22,100
Fetch and add and return.

885
00:46:22,100 --> 00:46:23,800
See, you see how they get you?

886
00:46:24,200 --> 00:46:26,500
It Returns the previous result.

887
00:46:26,500 --> 00:46:29,800
So if you were just like do deter, you know, and you did that, you're

888
00:46:29,800 --> 00:46:33,700
very sad Panda because now, your code doesn't work, but it turns out,

889
00:46:35,700 --> 00:46:36,700
Let me just do that, right?

890
00:46:36,700 --> 00:46:40,700
You can do the actual operation because it Returns the previous value.

891
00:46:41,000 --> 00:46:43,700
That's all you really need to make sure that you get the right

892
00:46:43,700 --> 00:46:44,000
results.

893
00:46:44,000 --> 00:46:44,900
So we still can do it.

894
00:46:44,900 --> 00:46:48,800
I think people who are running on links right now, you feel free to

895
00:46:48,800 --> 00:46:53,200
tell me tomorrow when you go to build, if that's if that keeps working

896
00:46:53,200 --> 00:46:56,100
for you, hopefully it will.

897
00:46:57,300 --> 00:46:57,700
Ya.

898
00:46:58,600 --> 00:47:00,500
What's wrong with my interlocked ad?

899
00:47:01,500 --> 00:47:06,000
What, what is wrong with my interlock add interlocked?

900
00:47:07,300 --> 00:47:07,800
Add.

901
00:47:10,400 --> 00:47:11,600
Somebody want to tell me why?

902
00:47:11,600 --> 00:47:12,300
Oh, it's right there.

903
00:47:12,300 --> 00:47:12,700
Even

904
00:47:13,600 --> 00:47:13,900
Good luck.

905
00:47:13,900 --> 00:47:14,600
Dad.

906
00:47:14,800 --> 00:47:15,900
I just looked at it.

907
00:47:16,900 --> 00:47:18,300
Why am I not getting that?

908
00:47:18,300 --> 00:47:19,400
Did we not?

909
00:47:20,500 --> 00:47:24,900
Why is interlocked compare exchange available, but not interlock dad

910
00:47:25,200 --> 00:47:28,000
interlocked pair exchange.

911
00:47:28,100 --> 00:47:30,400
I didn't make that an intrinsic, did I?

912
00:47:38,100 --> 00:47:39,200
A little strange, isn't it?

913
00:47:39,500 --> 00:47:40,100
Wouldn't you say?

914
00:47:41,300 --> 00:47:42,400
Wouldn't you say would you say?

915
00:47:42,500 --> 00:47:44,100
I don't know if you would or if you wouldn't

916
00:47:45,500 --> 00:47:46,400
but it's a little odd.

917
00:47:51,600 --> 00:47:53,000
Yeah.

918
00:47:54,600 --> 00:47:56,100
Yeah.

919
00:47:57,400 --> 00:47:57,900
Well

920
00:48:00,000 --> 00:48:00,900
See if we could find out.

921
00:48:00,900 --> 00:48:01,300
Why?

922
00:48:02,900 --> 00:48:06,100
Maybe, maybe they just isn't a.

923
00:48:06,600 --> 00:48:07,700
I'm just scared version of it.

924
00:48:07,700 --> 00:48:08,600
I don't think so though.

925
00:48:11,100 --> 00:48:14,500
Maybe we have to clear it in terms of car sells interlock compare

926
00:48:14,500 --> 00:48:15,600
exchange.

927
00:48:15,900 --> 00:48:16,300
Oops.

928
00:48:18,200 --> 00:48:20,700
normally, I have to declare these myself because I don't actually

929
00:48:20,700 --> 00:48:22,300
linked with any of these things, but

930
00:48:23,700 --> 00:48:26,600
I'm not sure why we were able to do interlock compare exchange, just

931
00:48:26,600 --> 00:48:31,400
fine and nobody else, which is a little bit weird one has to admit.

932
00:48:32,600 --> 00:48:35,000
Well, you don't have to admit it if you don't want to.

933
00:48:37,300 --> 00:48:42,200
Let's see here blah blah blah.

934
00:48:45,700 --> 00:48:51,800
interlocked variable access interlocked API compiler, intrinsics

935
00:48:54,100 --> 00:48:54,800
Hello.

936
00:48:56,500 --> 00:48:57,700
Hello.

937
00:48:59,700 --> 00:49:00,800
I clicked on you.

938
00:49:01,000 --> 00:49:01,900
Did you not hear me?

939
00:49:02,700 --> 00:49:03,500
I'm clicking.

940
00:49:07,700 --> 00:49:08,600
Boy, that web speed.

941
00:49:08,600 --> 00:49:09,000
Huh.

942
00:49:09,000 --> 00:49:09,700
All right, there we go.

943
00:49:12,200 --> 00:49:13,100
Let's take a look.

944
00:49:13,900 --> 00:49:16,000
X 64, MB intrinsics list.

945
00:49:16,900 --> 00:49:17,900
No rush there.

946
00:49:18,900 --> 00:49:20,400
You know, take your time.

947
00:49:20,900 --> 00:49:22,300
It's not like we're trying to do a stream here.

948
00:49:24,000 --> 00:49:32,600
so let's see, let's see what we've got interlocked and and and

949
00:49:34,400 --> 00:49:39,000
It's like a exchange interlock, decrement interlock exchanges.

950
00:49:39,000 --> 00:49:42,200
You for interlocked exchange ad?

951
00:49:44,000 --> 00:49:44,900
Okay.

952
00:49:46,300 --> 00:49:48,000
well, let's take a look at that, then

953
00:49:50,700 --> 00:49:53,500
Provide compiler support with blah blah blah blah.

954
00:49:54,300 --> 00:49:56,100
Travis initial value.

955
00:49:56,100 --> 00:49:57,600
Oh, look at this.

956
00:49:57,900 --> 00:49:58,400
We can get it.

957
00:49:58,400 --> 00:49:59,800
The same on both one.

958
00:50:01,500 --> 00:50:03,800
Well, the real point to buy the ad in parameter.

959
00:50:04,500 --> 00:50:07,200
Look at that, look at that.

960
00:50:07,300 --> 00:50:09,100
Now, ours won't be different.

961
00:50:09,900 --> 00:50:10,500
That's cool.

962
00:50:10,500 --> 00:50:13,800
So they like unify their intrinsics, well, you don't see that happen,

963
00:50:13,800 --> 00:50:17,800
very often things actually get better with a new release, that never

964
00:50:17,800 --> 00:50:18,400
happens.

965
00:50:18,700 --> 00:50:22,100
Like how did we luck out there interlocked exchange?

966
00:50:22,400 --> 00:50:24,600
Add Plus at, and

967
00:50:26,000 --> 00:50:26,900
Like so.

968
00:50:28,100 --> 00:50:28,800
Lovely.

969
00:50:30,600 --> 00:50:34,600
So, I believe that is actually giving us our generation IDs now.

970
00:50:36,300 --> 00:50:40,800
And so, in theory, you know, if we go in to get bitmap now we would

971
00:50:40,800 --> 00:50:43,100
see that's no good.

972
00:50:43,500 --> 00:50:46,800
We would see the generation ID, be something reasonable, right?

973
00:50:46,800 --> 00:50:51,300
And it is and hopefully, you know, if we take a look at what comes

974
00:50:51,300 --> 00:50:55,400
back, that thing is stamped with our generation ID which it is right.

975
00:50:55,400 --> 00:50:56,600
And so that's pretty good.

976
00:50:57,900 --> 00:50:59,800
Everyone's pretty happy about that, you know?

977
00:51:00,000 --> 00:51:01,100
Go right.

978
00:51:02,500 --> 00:51:03,600
So that's all good.

979
00:51:04,300 --> 00:51:07,000
Nothing particularly strange happening there.

980
00:51:07,800 --> 00:51:12,500
And so now all we really have to do to be honest is make sure that we

981
00:51:12,500 --> 00:51:15,900
don't evict anything that has a generation ID.

982
00:51:15,900 --> 00:51:17,800
That's still in Flight, right?

983
00:51:18,000 --> 00:51:19,400
That's really all we have to do.

984
00:51:19,800 --> 00:51:23,500
And so when we are in here and we're evicting assets, actually

985
00:51:23,500 --> 00:51:28,300
probably the easiest way to do that is just to keep a little list of

986
00:51:28,300 --> 00:51:31,000
which things are actually in Flight that that might actually be

987
00:51:31,000 --> 00:51:31,800
easiest.

988
00:51:32,400 --> 00:51:34,200
And worrying about retire and order or any of that stuff.

989
00:51:34,200 --> 00:51:37,100
Since there's so few renderers that can actually be inflated time.

990
00:51:37,100 --> 00:51:39,900
You know, we're talking about less than 16 at any given time for sure.

991
00:51:40,200 --> 00:51:44,600
Probably far less than 16 most of the time because we don't have that

992
00:51:44,600 --> 00:51:45,600
many task that's been up.

993
00:51:45,600 --> 00:51:46,500
We don't have many cores.

994
00:51:46,500 --> 00:51:50,500
So there shouldn't be sitting out there doing rendering anyway, so

995
00:51:50,500 --> 00:51:54,300
when we're doing that, you know, when we when we're going to delete an

996
00:51:54,300 --> 00:51:57,800
asset we could look to see if it's a state is loaded.

997
00:51:58,400 --> 00:51:59,900
And also we could say

998
00:52:00,900 --> 00:52:10,400
And asset generation ID generation is completed.

999
00:52:11,300 --> 00:52:14,900
Generation has completed.

1000
00:52:15,800 --> 00:52:17,500
I know what you guys think about that?

1001
00:52:18,300 --> 00:52:21,400
Hopefully you like it and or love it.

1002
00:52:22,500 --> 00:52:24,000
And or like love it.

1003
00:52:25,500 --> 00:52:26,700
Oh, I'm starting to see something cool.

1004
00:52:26,700 --> 00:52:29,900
We could do here too but maybe not quite on this stream.

1005
00:52:30,500 --> 00:52:33,000
Anyway, so up on handmade asset,

1006
00:52:34,800 --> 00:52:36,100
Inside game assets.

1007
00:52:36,800 --> 00:52:43,700
We just do something like in-flight generation or in-flight

1008
00:52:44,400 --> 00:52:48,000
Generations, write something like that.

1009
00:52:51,000 --> 00:52:52,800
I guess that wouldn't actually be in-game assets.

1010
00:52:52,800 --> 00:52:53,200
What it?

1011
00:52:53,300 --> 00:52:54,100
I guess it would be.

1012
00:52:54,300 --> 00:52:54,700
Yeah.

1013
00:52:55,400 --> 00:52:56,700
Inflight Generations.

1014
00:53:00,600 --> 00:53:01,300
Yeah.

1015
00:53:04,800 --> 00:53:07,100
it's going to be a little tricky because this actually

1016
00:53:10,100 --> 00:53:13,400
this actually wants to be kind of a little bit protected as well but

1017
00:53:13,400 --> 00:53:14,000
that's okay.

1018
00:53:14,800 --> 00:53:19,000
So anyway, we've got in-flight generations and that's going to have a

1019
00:53:19,000 --> 00:53:19,700
little thing here.

1020
00:53:19,700 --> 00:53:25,600
That's like you know, Generations, flight, generation count, write

1021
00:53:25,800 --> 00:53:27,800
something like this, right?

1022
00:53:28,800 --> 00:53:32,800
And so all we would do here is when we initialize those game assets,

1023
00:53:35,100 --> 00:53:39,200
I guess we, when we actually do that initialization, I guess we just

1024
00:53:40,900 --> 00:53:41,800
clear it ever.

1025
00:53:41,800 --> 00:53:43,600
We do not sow in here.

1026
00:53:43,600 --> 00:53:47,700
I would like to do a thing where we do assets.

1027
00:53:49,200 --> 00:53:50,000
Next Generation.

1028
00:53:50,000 --> 00:53:58,200
I'd equals zero Assets in Flight, generation, count, equals 0, and

1029
00:53:58,200 --> 00:53:59,800
then we're done, right?

1030
00:54:00,300 --> 00:54:02,500
And so generation ID.

1031
00:54:04,100 --> 00:54:10,100
When we do new generation ID, I guess we'd kind of make this a little

1032
00:54:10,100 --> 00:54:10,600
bit.

1033
00:54:12,900 --> 00:54:13,600
You know what?

1034
00:54:14,700 --> 00:54:17,400
If we make, if we actually do this in one step two, we don't really

1035
00:54:17,400 --> 00:54:18,200
even need the.

1036
00:54:18,400 --> 00:54:19,900
We don't even need the atomic add.

1037
00:54:20,200 --> 00:54:21,200
Now that I think about it.

1038
00:54:22,300 --> 00:54:28,300
because what we could do is we could just do begin asset lock and

1039
00:54:28,300 --> 00:54:34,500
asset lock around those to basically say all right the result is the

1040
00:54:34,500 --> 00:54:37,600
next-generation ID we increment it

1041
00:54:39,500 --> 00:54:44,200
And then, what we do is we say, well, we should also do a little

1042
00:54:44,200 --> 00:54:45,100
assertion in here.

1043
00:54:47,200 --> 00:54:47,700
Right.

1044
00:54:48,500 --> 00:54:51,900
But all we're doing here is saying, okay, assert that, the Assets in

1045
00:54:51,900 --> 00:54:52,200
Flight.

1046
00:54:52,200 --> 00:54:56,900
Generation count is less than the number that we're ever allowed to

1047
00:54:56,900 --> 00:54:59,100
have in Flight Generations.

1048
00:55:01,500 --> 00:55:02,700
So we start that, that's true.

1049
00:55:02,900 --> 00:55:04,200
Assuming that that is true.

1050
00:55:04,800 --> 00:55:07,400
We then just go ahead and put that in here.

1051
00:55:09,200 --> 00:55:09,700
Right?

1052
00:55:10,000 --> 00:55:14,700
So we say okay, the in-flight generation count is going to be

1053
00:55:18,500 --> 00:55:19,000
Sets.

1054
00:55:21,900 --> 00:55:22,300
So,

1055
00:55:25,300 --> 00:55:29,400
That way, we just store these guys in the little array, right?

1056
00:55:29,900 --> 00:55:32,600
And then all we have to do is, you know, if we did that now, we'd

1057
00:55:32,600 --> 00:55:34,200
immediately blow that out.

1058
00:55:34,900 --> 00:55:35,300
Oops.

1059
00:55:38,400 --> 00:55:41,100
Like we should immediately hit that assertion right?

1060
00:55:45,000 --> 00:55:46,300
Generation has completed also.

1061
00:55:46,300 --> 00:55:50,600
I suppose has to be an actual called somebody actually implements

1062
00:55:52,300 --> 00:55:52,800
header.

1063
00:55:55,100 --> 00:55:55,600
We go.

1064
00:55:57,000 --> 00:56:00,600
So we have generation has completed and that's got to be inside

1065
00:56:00,600 --> 00:56:02,600
handmade asset as well.

1066
00:56:14,900 --> 00:56:15,400
Okay.

1067
00:56:17,500 --> 00:56:20,500
And since that's only ever called inside the lock, it's safe for us to

1068
00:56:20,500 --> 00:56:23,700
go ahead and make this sort of

1069
00:56:28,600 --> 00:56:31,600
Damn iterate over this array and just go.

1070
00:56:31,600 --> 00:56:34,200
Okay, double check that this guy.

1071
00:56:35,700 --> 00:56:38,900
Is or is not still in Flight, right?

1072
00:56:41,900 --> 00:56:46,400
And so, in order to do that, all I have to do is go through sort of

1073
00:56:46,400 --> 00:56:48,300
the indices

1074
00:56:50,900 --> 00:56:53,500
Of all of the generations that are in Flight here which can only be a

1075
00:56:53,500 --> 00:56:53,900
few.

1076
00:56:55,900 --> 00:56:56,300
Oops.

1077
00:57:00,400 --> 00:57:02,200
So we've got those in Flight Generations.

1078
00:57:03,700 --> 00:57:04,300
If?

1079
00:57:06,700 --> 00:57:07,700
Like the check ID.

1080
00:57:09,500 --> 00:57:15,100
If I find it in the list, then the result is true.

1081
00:57:16,200 --> 00:57:16,700
Right.

1082
00:57:19,500 --> 00:57:21,000
Oh sorry there's all this false.

1083
00:57:21,000 --> 00:57:22,100
I guess it's the other way around.

1084
00:57:23,100 --> 00:57:27,100
The generation has been completed if it's not in the list, right?

1085
00:57:27,400 --> 00:57:31,100
So the only thing that I need to do now to finish that up is I need to

1086
00:57:31,100 --> 00:57:34,400
change this so that the new generation ID thing.

1087
00:57:34,900 --> 00:57:39,300
There's basically like a begin generation, right?

1088
00:57:39,700 --> 00:57:41,100
And an end generation

1089
00:57:44,300 --> 00:57:45,500
And generation.

1090
00:57:46,700 --> 00:57:47,300
Like so.

1091
00:57:48,900 --> 00:57:49,900
Pretty straightforward.

1092
00:57:50,900 --> 00:57:58,200
And that would take the Jen patient ID and it would do generation has

1093
00:57:58,200 --> 00:57:59,200
completed.

1094
00:58:01,200 --> 00:58:05,500
It would do exactly the same thing here and all its going to do is

1095
00:58:05,500 --> 00:58:08,600
remove that guy, right?

1096
00:58:08,700 --> 00:58:12,200
So it's going to go through here, it's going to say if equals the

1097
00:58:12,200 --> 00:58:16,700
generation ID then it just needs to collapse list by 1, right?

1098
00:58:17,400 --> 00:58:18,100
And break.

1099
00:58:18,100 --> 00:58:25,300
So it's going to go like, okay, the whichever one were on here, we

1100
00:58:25,300 --> 00:58:29,200
would like to swap it with the count, right?

1101
00:58:30,400 --> 00:58:31,100
Like so.

1102
00:58:33,700 --> 00:58:35,300
Like this.

1103
00:58:36,200 --> 00:58:36,700
Right.

1104
00:58:36,700 --> 00:58:40,600
So I'm just going to say, okay we're going to erase this one, the one

1105
00:58:40,600 --> 00:58:41,300
that's in the slot.

1106
00:58:41,700 --> 00:58:43,700
So the one we found that's equal to this one.

1107
00:58:43,700 --> 00:58:47,400
We're just going to then decrement the count by one and take whatever

1108
00:58:47,400 --> 00:58:49,600
was in that final slot and put it here, right?

1109
00:58:49,600 --> 00:58:54,900
That's it, nothing particularly fancy, that's all there is to it and

1110
00:58:54,900 --> 00:58:59,100
then we don't actually have a results to return.

1111
00:58:59,500 --> 00:59:00,200
So that's fine.

1112
00:59:00,200 --> 00:59:01,100
Right.

1113
00:59:01,400 --> 00:59:02,500
All right.

1114
00:59:02,500 --> 00:59:06,200
So in allocate render group I guess the thing that I

1115
00:59:06,300 --> 00:59:08,900
Don't really know is what gets rid of the render groups.

1116
00:59:10,600 --> 00:59:12,900
Been a long time since I wrote any of this code.

1117
00:59:15,000 --> 00:59:17,800
So I don't actually know that we always get rid of our render groups.

1118
00:59:18,900 --> 00:59:23,300
I assume that we do, but I guess we probably don't.

1119
00:59:23,300 --> 00:59:25,800
We've never really had to do that before, right?

1120
00:59:25,800 --> 00:59:27,500
I don't think there was really any shutdown.

1121
00:59:27,500 --> 00:59:29,200
They were free, right?

1122
00:59:29,400 --> 00:59:31,100
They never had to be blocked.

1123
00:59:31,100 --> 00:59:33,000
They never had to be like blocked out before.

1124
00:59:33,900 --> 00:59:36,300
So for example in foul ground chunk, you know, here comes the render

1125
00:59:36,300 --> 00:59:42,000
group, we do all this stuff with it you can see right.

1126
00:59:44,800 --> 00:59:49,400
Like so I guess decide what I pushed, buffer sizes, blah blah blah.

1127
00:59:49,400 --> 00:59:50,900
So that does all this stuff.

1128
00:59:52,900 --> 00:59:56,500
Yeah, it does, it's little ad thing get this code.

1129
00:59:56,500 --> 00:59:57,600
Now could be written.

1130
00:59:57,700 --> 00:59:59,800
This was written very protectively, we could

1131
01:00:00,000 --> 01:00:01,400
Will be do most of that stuff.

1132
01:00:01,400 --> 01:00:05,800
Now directly, we were, like, actually doing all the assets tough on

1133
01:00:05,800 --> 01:00:06,600
one thread.

1134
01:00:06,900 --> 01:00:11,800
If you take a look at it, but that stuff now we could do on multiple

1135
01:00:11,800 --> 01:00:12,800
threads, through wanted to.

1136
01:00:13,700 --> 01:00:20,000
But anyway, yeah, it pretty much never really ended that stuff, right?

1137
01:00:20,000 --> 01:00:23,800
Render group to Output, was it de facto the end?

1138
01:00:24,400 --> 01:00:24,900
Right?

1139
01:00:26,800 --> 01:00:29,800
So yeah, so I guess we can just make render

1140
01:00:30,000 --> 01:00:32,000
ER, two output be the thing that ends it

1141
01:00:33,800 --> 01:00:36,700
It means you can't render to the same render group to two different

1142
01:00:36,700 --> 01:00:37,200
things.

1143
01:00:37,600 --> 01:00:40,800
So we would have to kind of change that eventually if you wanted to.

1144
01:00:41,700 --> 01:00:43,700
But, you know, that would probably be fine too.

1145
01:00:43,700 --> 01:00:46,000
If we, you know, that's something we could cross that bridge when we

1146
01:00:46,000 --> 01:00:46,700
come to it.

1147
01:00:47,400 --> 01:00:51,000
But rendered group to Output, right?

1148
01:00:55,900 --> 01:01:00,200
Grouped output and tiled render group to Output.

1149
01:01:03,700 --> 01:01:05,300
Would end it right about here.

1150
01:01:07,700 --> 01:01:08,800
so,

1151
01:01:12,000 --> 01:01:14,400
I think I want a separate end call.

1152
01:01:14,400 --> 01:01:15,900
Just looking at the way this works.

1153
01:01:16,200 --> 01:01:17,800
I feel like we want an end call.

1154
01:01:20,100 --> 01:01:23,300
So I think we want something like finish render group, you know I'm

1155
01:01:23,300 --> 01:01:28,100
saying, just looks like the right thing to do there to me.

1156
01:01:28,500 --> 01:01:30,500
I'm just going to say it seems, right.

1157
01:01:32,700 --> 01:01:33,200
I don't know.

1158
01:01:34,000 --> 01:01:38,000
Result goes push struct Arena render group.

1159
01:01:41,600 --> 01:01:43,100
It just seems kind of odd.

1160
01:01:43,100 --> 01:01:43,600
Yeah.

1161
01:01:45,200 --> 01:01:46,500
That just seems kind of odd.

1162
01:01:48,800 --> 01:01:51,900
This one makes sense because hey it already got cleaned up in this one

1163
01:01:52,500 --> 01:01:55,700
and I guess we are, it's already inside a memory thing, so yeah, well

1164
01:01:56,200 --> 01:01:59,300
yeah, I guess so, I guess that's just how that goes anyway.

1165
01:01:59,700 --> 01:02:01,200
So if we have finished render group

1166
01:02:04,400 --> 01:02:06,500
And then we just takes whatever the render group is.

1167
01:02:09,200 --> 01:02:14,900
That's just going to do the end generation group Assets, Group

1168
01:02:15,800 --> 01:02:17,800
generation ID, right?

1169
01:02:17,800 --> 01:02:19,200
Assuming that it actually exists.

1170
01:02:20,200 --> 01:02:20,700
Like so,

1171
01:02:24,300 --> 01:02:25,000
That's fine.

1172
01:02:28,200 --> 01:02:30,900
The render group to Output.

1173
01:02:32,300 --> 01:02:32,900
Right.

1174
01:02:35,000 --> 01:02:36,200
But that kind of thing.

1175
01:02:38,200 --> 01:02:39,400
We've got one more thing to do.

1176
01:02:39,400 --> 01:02:42,900
There we go, let's get this in here, right?

1177
01:02:43,300 --> 01:02:48,000
We've kind of got one other thing to do there which is that where we

1178
01:02:48,000 --> 01:02:55,100
do this whole like assets missing thing right in the film ground

1179
01:02:55,100 --> 01:02:59,600
Chunk, we don't really need to do anymore because we're it since it's

1180
01:02:59,600 --> 01:02:59,800
a me.

1181
01:03:00,000 --> 01:03:03,100
It'll never have any assets missing, right?

1182
01:03:03,200 --> 01:03:07,000
So we never have to do if all resources present thing.

1183
01:03:08,300 --> 01:03:10,400
That's just not a thing, right?

1184
01:03:10,500 --> 01:03:11,900
That's not an issue.

1185
01:03:12,300 --> 01:03:14,900
So we can just assert that, that's true.

1186
01:03:15,300 --> 01:03:17,700
And that way we do not, we, you know, we always know that it will get

1187
01:03:17,700 --> 01:03:20,500
added as a task and finished, right?

1188
01:03:21,100 --> 01:03:22,100
So I think that's good.

1189
01:03:24,500 --> 01:03:27,200
Begin generation and generation.

1190
01:03:28,300 --> 01:03:29,800
You should ID assets.

1191
01:03:30,400 --> 01:03:35,500
So this is just, you know, all the sounds here and presumably, nobody

1192
01:03:36,000 --> 01:03:38,100
needs to do anything after that.

1193
01:03:44,300 --> 01:03:50,100
So yeah, so now in theory and I can only stress that enough, only in

1194
01:03:50,100 --> 01:03:56,000
theory, we've implemented something that fixes the bug from before.

1195
01:03:56,000 --> 01:04:00,000
But only in Theory without some testing, we have no idea.

1196
01:04:00,000 --> 01:04:03,500
If this works properly, it's purely conjecture.

1197
01:04:04,200 --> 01:04:06,800
And there are probably other bugs lurking in there.

1198
01:04:06,800 --> 01:04:08,700
So this is more of a to be continued.

1199
01:04:09,100 --> 01:04:10,200
But again,

1200
01:04:10,400 --> 01:04:13,300
Because we knew that there were problems with it.

1201
01:04:13,300 --> 01:04:16,700
I felt like it was better to at least address them structurally for

1202
01:04:16,700 --> 01:04:20,300
now because we want to try to get all of our stuff structurally.

1203
01:04:20,300 --> 01:04:21,000
Correct.

1204
01:04:21,200 --> 01:04:25,400
As we wrap up the engine code, we do not want to have stuff that we

1205
01:04:25,400 --> 01:04:29,700
know is structurally wrong, but that's different from saying that,

1206
01:04:29,700 --> 01:04:33,900
then saying that we have actually fixed it all properly because that

1207
01:04:33,900 --> 01:04:36,600
will only come with some testing down the line.

1208
01:04:38,300 --> 01:04:39,100
But there we go.

1209
01:04:39,600 --> 01:04:40,200
So at least we're

1210
01:04:40,300 --> 01:04:44,500
I kind of, you know, we're a little bit, little bit little bit more,

1211
01:04:44,500 --> 01:04:48,900
sure that things could be made to work properly with the structure

1212
01:04:48,900 --> 01:04:50,600
that we have now.

1213
01:04:51,500 --> 01:04:54,100
All right, so I'm going to go ahead and go to the Q&A.

1214
01:05:00,100 --> 01:05:00,900
See here.

1215
01:05:08,300 --> 01:05:11,500
yeah, if you have questions about what we're doing,

1216
01:05:17,900 --> 01:05:19,800
yeah, if you have questions about what we're doing,

1217
01:05:29,700 --> 01:05:30,200
Let's see.

1218
01:05:30,500 --> 01:05:34,400
So first of all, yeah, well so for Atomic ad, I'm just going to get

1219
01:05:34,400 --> 01:05:34,900
rid of it.

1220
01:05:36,300 --> 01:05:37,200
Because we don't need it.

1221
01:05:37,700 --> 01:05:41,200
Atomic, add does not need to happen so we can stay with just the time.

1222
01:05:41,200 --> 01:05:42,100
I compare exchange.

1223
01:05:43,600 --> 01:05:45,600
These don't cast value to long star for sync.

1224
01:05:45,600 --> 01:05:47,400
Fetch an ad, it will generate the wrong code.

1225
01:05:47,400 --> 01:05:49,200
On 64-bit Linux OSX.

1226
01:05:52,500 --> 01:05:54,300
What about this one?

1227
01:05:57,900 --> 01:05:59,900
well, okay, so I think we're fine as long as we

1228
01:06:00,000 --> 01:06:00,900
Do you think fetchin?

1229
01:06:00,900 --> 01:06:04,000
Add then which I don't really want to do because we don't want to add

1230
01:06:04,000 --> 01:06:05,800
an additional dependency there if we don't have to.

1231
01:06:05,800 --> 01:06:09,200
So if we can get away with using, only one sinc function, that's kind

1232
01:06:09,200 --> 01:06:09,600
of nice.

1233
01:06:10,200 --> 01:06:12,200
That means we only ever need that on any platform.

1234
01:06:19,100 --> 01:06:21,700
What's the advantage of calling load bitmaps from other threads?

1235
01:06:21,700 --> 01:06:23,200
Wouldn't it be better to just have Push pit.

1236
01:06:23,200 --> 01:06:26,000
Matt fail when called from of the thread so that there are no assets

1237
01:06:26,000 --> 01:06:27,200
missing from the ground chunks.

1238
01:06:27,200 --> 01:06:30,100
And so that all the bitmap memory could be acquired on the main

1239
01:06:30,100 --> 01:06:30,600
thread.

1240
01:06:30,800 --> 01:06:33,200
The grand trunk should probably wait one frame to have their assets

1241
01:06:33,200 --> 01:06:35,400
loaded if they are prefetched ahead of time.

1242
01:06:36,400 --> 01:06:40,000
The reason is because I feel like it's not that I feel like it won't

1243
01:06:40,000 --> 01:06:43,100
be that hard to debug the multi-threaded code when it comes time to do

1244
01:06:43,100 --> 01:06:43,400
it.

1245
01:06:45,000 --> 01:06:47,900
And it's just kind of nice to know we can render from separate threads

1246
01:06:49,200 --> 01:06:50,900
without having it be a big deal.

1247
01:06:51,000 --> 01:06:53,100
Like it seemed like it was kind of the thing that was okay.

1248
01:06:53,100 --> 01:06:54,900
I mean we're just taking a lock there, that's fine.

1249
01:06:54,900 --> 01:06:59,100
It's not a huge deal because it's just like an ink and assuming and

1250
01:06:59,100 --> 01:07:02,500
you doing a couple quick things and then getting out, right?

1251
01:07:03,700 --> 01:07:06,300
So it's really the only thing that concerns me about it mostly is the

1252
01:07:06,300 --> 01:07:11,300
memory allocator because that thing's kind of slow and so that's that

1253
01:07:11,300 --> 01:07:13,800
thing but but that's the thing that I think we have to rewrite to be

1254
01:07:13,800 --> 01:07:14,200
much faster.

1255
01:07:14,400 --> 01:07:17,600
Anyway, so that may be fine as well because we eventually, like I

1256
01:07:17,600 --> 01:07:19,900
said, when we wrote it as like, we're going to do something better

1257
01:07:19,900 --> 01:07:21,600
here further down the line.

1258
01:07:21,600 --> 01:07:22,000
So

1259
01:07:23,500 --> 01:07:24,600
Is it get every vote online.

1260
01:07:24,600 --> 01:07:26,600
If so, how does one gain access right now?

1261
01:07:26,600 --> 01:07:29,500
It is online but you can only gain access if you're a maintainer of a

1262
01:07:29,500 --> 01:07:36,100
main Port, the general access is coming very shortly but it's not

1263
01:07:36,100 --> 01:07:37,000
quite ready yet.

1264
01:07:37,500 --> 01:07:39,600
So it's not quite ready to be in the wild.

1265
01:07:40,900 --> 01:07:41,600
But it's coming.

1266
01:07:41,800 --> 01:07:43,700
I was actually working on that right before the stream.

1267
01:07:45,200 --> 01:07:48,000
Basically, it's just a question of getting the web stuff all set up

1268
01:07:48,000 --> 01:07:50,100
to, like, authenticate people and stuff like that.

1269
01:07:55,900 --> 01:07:59,300
Who is man, the black, will you get rid of standard NT?

1270
01:08:00,700 --> 01:08:05,200
Potentially, although you don't really have to worry too much about

1271
01:08:05,200 --> 01:08:08,200
standard and because it doesn't bring any real code into your thing.

1272
01:08:08,200 --> 01:08:11,100
It's not like using a library like standard in is just a header.

1273
01:08:11,200 --> 01:08:13,600
You can include it even if you don't include the standard Library, if

1274
01:08:13,600 --> 01:08:16,000
you want to, it's not too hard to do that.

1275
01:08:16,100 --> 01:08:20,899
So we could get rid of it eventually just for fun, but it's not like

1276
01:08:21,100 --> 01:08:24,399
like we want to get rid of like, you know, sine and cosine this stuff

1277
01:08:24,399 --> 01:08:24,800
because those

1278
01:08:25,000 --> 01:08:27,300
Actual pieces of code and we'd like to replace them with our own.

1279
01:08:27,600 --> 01:08:30,800
So that part of the C runtime Library, we actually want to replace

1280
01:08:31,300 --> 01:08:34,300
standard in T is really not that useful because it's there isn't any

1281
01:08:34,300 --> 01:08:38,100
actual code it's just a couple type deaths so that's not really a

1282
01:08:38,100 --> 01:08:40,700
problem but we could also replace it if we wanted to

1283
01:08:42,600 --> 01:08:45,800
Is volatile actually needed in your compare and exchange.

1284
01:08:46,399 --> 01:08:48,399
You're talking about this volatile.

1285
01:08:50,700 --> 01:08:54,700
It doesn't really matter since it's an inline it really doesn't matter

1286
01:08:54,700 --> 01:08:56,500
because the sink Val compare and swap.

1287
01:08:56,500 --> 01:08:58,300
It will become a volatile here.

1288
01:08:58,300 --> 01:08:59,000
I believe.

1289
01:08:59,100 --> 01:08:59,899
So I don't

1290
01:09:00,000 --> 01:09:00,700
Matters.

1291
01:09:01,800 --> 01:09:08,000
I don't think it matters particularly much there because this this is

1292
01:09:08,000 --> 01:09:13,100
the actual operation and it's declared as volatile.

1293
01:09:13,399 --> 01:09:16,200
This, this will treat it as volatile I believe.

1294
01:09:17,300 --> 01:09:20,300
So yeah, I don't I don't think you actually need the volatile there.

1295
01:09:20,899 --> 01:09:22,000
It's more.

1296
01:09:22,399 --> 01:09:24,200
It's more like a thing that just is telling you.

1297
01:09:24,200 --> 01:09:27,000
Hey by the way, this value is going to get treated as volatile just

1298
01:09:27,000 --> 01:09:29,800
you know, but you could delete it and it wouldn't

1299
01:09:30,000 --> 01:09:32,000
I don't think we have any would make no difference whatsoever.

1300
01:09:37,300 --> 01:09:40,800
How difficult would it be to have the letter particles fall

1301
01:09:40,800 --> 01:09:42,899
independently of the hero?

1302
01:09:50,500 --> 01:09:52,700
Probably pretty trivial.

1303
01:09:55,900 --> 01:09:59,900
I mean all you would do is just have an ad end, right?

1304
01:09:59,900 --> 01:10:03,500
Like you're talking about if you don't want them to move when where

1305
01:10:03,500 --> 01:10:04,300
the heroes moving.

1306
01:10:06,600 --> 01:10:10,100
So, you know, if you want to do that right?

1307
01:10:10,300 --> 01:10:15,100
Then you just want to know what the camera move was between the last

1308
01:10:15,100 --> 01:10:16,600
frame and this frame for the particle.

1309
01:10:18,100 --> 01:10:22,900
So like when you're updating the protocol and you're in here, you

1310
01:10:22,900 --> 01:10:25,500
would just put that motion in here that

1311
01:10:25,700 --> 01:10:26,900
There's a little bit.

1312
01:10:29,100 --> 01:10:29,400
Right?

1313
01:10:29,400 --> 01:10:32,900
You do you just you'd have this, right?

1314
01:10:32,900 --> 01:10:34,900
You'd have camera displacement.

1315
01:10:38,400 --> 01:10:40,700
And you subtract the camera, displacement from everything you did

1316
01:10:40,700 --> 01:10:41,100
here.

1317
01:10:41,100 --> 01:10:44,200
And then when you updated particles, you Dad the camera displacement,

1318
01:10:45,500 --> 01:10:46,000
right?

1319
01:10:46,900 --> 01:10:47,300
So,

1320
01:10:50,800 --> 01:10:51,400
See here.

1321
01:10:56,600 --> 01:10:59,300
Let's see, I don't remember what we did.

1322
01:10:59,300 --> 01:11:00,200
All hits your here.

1323
01:11:02,600 --> 01:11:07,100
Basically, at the very end after you compute the protocol P, all this

1324
01:11:07,100 --> 01:11:08,100
stuff, right?

1325
01:11:08,600 --> 01:11:11,400
You would you would also displaced by the camera.

1326
01:11:11,400 --> 01:11:15,900
So, pretty much when you probably right up on load actually, so I

1327
01:11:15,900 --> 01:11:18,200
would probably say you would want to do it here.

1328
01:11:18,200 --> 01:11:23,100
Where you uncreation, you, you negate them on the first Loop through

1329
01:11:23,100 --> 01:11:24,200
on particle index.

1330
01:11:25,000 --> 01:11:29,700
You would do you would do particle p.

1331
01:11:34,400 --> 01:11:35,900
Let's equals camera displacement.

1332
01:11:36,900 --> 01:11:37,700
Something like this.

1333
01:11:43,100 --> 01:11:45,300
And then what you need to do is you just need to make sure that

1334
01:11:45,300 --> 01:11:46,000
particle camera.

1335
01:11:46,000 --> 01:11:50,900
Displacement is actually something that you know, like like what it is

1336
01:11:51,000 --> 01:11:51,300
right?

1337
01:11:51,300 --> 01:11:55,300
You need to know how that actually was going to to happen.

1338
01:11:55,600 --> 01:11:57,800
So you need to take where the camera was last time and where the

1339
01:11:57,800 --> 01:11:59,000
camera was this time.

1340
01:12:00,200 --> 01:12:04,500
And so, you know, probably the easiest way to do that would be to have

1341
01:12:04,500 --> 01:12:07,000
some kind of a notion of where that was.

1342
01:12:07,500 --> 01:12:09,800
So for example, inside the game state,

1343
01:12:12,900 --> 01:12:13,400
You know.

1344
01:12:15,600 --> 01:12:18,000
Here's the camera P, right?

1345
01:12:18,200 --> 01:12:20,500
You just have a last camera P probably would be.

1346
01:12:20,500 --> 01:12:24,000
The easiest thing to do would be my guess, right?

1347
01:12:24,000 --> 01:12:28,400
It's, you know, we'd have to think about this a little more depending

1348
01:12:28,400 --> 01:12:29,600
on how we want to do it.

1349
01:12:29,600 --> 01:12:31,300
But like something like this right?

1350
01:12:31,300 --> 01:12:31,800
Last camera.

1351
01:12:31,800 --> 01:12:37,800
P like so and then you would just do like okay, you know, last camera

1352
01:12:37,800 --> 01:12:41,800
P was canopy, you know, this sort of thing.

1353
01:12:42,700 --> 01:12:43,300
Right.

1354
01:12:51,900 --> 01:12:52,800
Something like that.

1355
01:12:56,900 --> 01:13:01,600
And I think if we actually okay that is not obviously not quite right.

1356
01:13:02,000 --> 01:13:07,400
I think if you actually compute that correctly that would be fine,

1357
01:13:07,500 --> 01:13:07,600
right?

1358
01:13:07,600 --> 01:13:11,900
Because then when the camera moves, the particles would move with it.

1359
01:13:12,300 --> 01:13:16,900
So, yeah, particle P should be protesters.

1360
01:13:16,900 --> 01:13:18,100
Why was that?

1361
01:13:18,100 --> 01:13:19,200
What's the problem there?

1362
01:13:21,000 --> 01:13:24,200
Hey Murphy subtract some Center.

1363
01:13:24,200 --> 01:13:26,300
Oh, that's not quite what I wanted.

1364
01:13:27,500 --> 01:13:28,900
Let me let me take that back.

1365
01:13:29,500 --> 01:13:30,500
I want that.

1366
01:13:30,500 --> 01:13:33,400
Actually, I actually want the full displacement of the two.

1367
01:13:34,000 --> 01:13:39,000
So we would do, you know, gamestate camera P, like that.

1368
01:13:39,200 --> 01:13:44,500
And we do this, I guess would actually be what we do the game straight

1369
01:13:44,500 --> 01:13:46,400
camera p and game State lab shampoo.

1370
01:13:46,400 --> 01:13:48,700
So we'd actually do it in the in the full.

1371
01:13:49,700 --> 01:13:50,600
The full thing.

1372
01:13:54,400 --> 01:13:57,500
I think that would give us the displacement on a given frame that,

1373
01:13:57,500 --> 01:13:57,900
right?

1374
01:14:02,300 --> 01:14:03,000
Or not.

1375
01:14:08,700 --> 01:14:10,200
Sorry, I'm kind of just talking this together.

1376
01:14:19,400 --> 01:14:21,100
Almost correct.

1377
01:14:21,800 --> 01:14:29,900
Oh, well, there's one other thing that we'd have to do, right?

1378
01:14:30,900 --> 01:14:31,400
Yeah.

1379
01:14:31,900 --> 01:14:34,300
So there is one of the things that we'd have to do that.

1380
01:14:34,300 --> 01:14:38,200
I forgot about which is the fact that we're doing sort of our alerian

1381
01:14:38,200 --> 01:14:43,100
thing, the or alerian stuff would have to actually be on a grid that

1382
01:14:43,100 --> 01:14:44,000
mood with the screen.

1383
01:14:44,000 --> 01:14:45,800
So that part actually would be a little

1384
01:14:46,000 --> 01:14:50,500
Here, it's not hugely tough, but that would definitely be a little

1385
01:14:50,500 --> 01:14:51,700
trickier, right?

1386
01:14:52,400 --> 01:14:57,700
So basically like the part where you actually do account for Stuff,

1387
01:14:57,700 --> 01:14:59,200
based on the

1388
01:15:00,000 --> 01:15:02,300
Based on the cell right?

1389
01:15:03,700 --> 01:15:09,600
Select dispersion this stuff like that dispersion, that part ain't

1390
01:15:09,600 --> 01:15:11,000
going to cut it, right?

1391
01:15:11,100 --> 01:15:15,600
That part is is problematic because the grid right now doesn't

1392
01:15:15,600 --> 01:15:19,400
understand how to do that stuff, if that makes sense.

1393
01:15:20,100 --> 01:15:23,900
Yeah, so yeah.

1394
01:15:23,900 --> 01:15:26,800
So it's not, it wouldn't be too hard but there's a bunch of things

1395
01:15:26,800 --> 01:15:29,800
that we would have to do, like the, the why?

1396
01:15:30,100 --> 01:15:34,000
You remember, the Y is kind of hacked, so that's why I like, right

1397
01:15:34,000 --> 01:15:35,800
now, if I move up or down, right?

1398
01:15:35,800 --> 01:15:39,300
It's not gonna do the proper thing because it's just using Y equals

1399
01:15:39,300 --> 01:15:44,100
zero as a, you know, as a displacement off of a hero which isn't going

1400
01:15:44,100 --> 01:15:44,900
to quite work.

1401
01:15:45,300 --> 01:15:47,800
So, right now we're, you know, we're almost there.

1402
01:15:48,100 --> 01:15:51,900
You wouldn't require very much more if you want it to just kind of be

1403
01:15:51,900 --> 01:15:52,300
there.

1404
01:15:55,700 --> 01:15:58,000
Yeah, but that's just really happy.

1405
01:15:58,000 --> 01:15:59,800
You would have to do something if you're

1406
01:16:00,000 --> 01:16:01,300
Actually do this for real.

1407
01:16:01,400 --> 01:16:04,400
I'm going to back these out because I these are not quite exactly.

1408
01:16:04,400 --> 01:16:06,500
You know, this is not exactly what you would want to be doing.

1409
01:16:07,200 --> 01:16:09,800
You'd want to do something a little bit more realistic, especially if

1410
01:16:09,800 --> 01:16:10,800
you want to keep that or Larry.

1411
01:16:10,800 --> 01:16:17,900
And in there that's a little bit of a more important, more important

1412
01:16:17,900 --> 01:16:18,400
bit.

1413
01:16:22,400 --> 01:16:22,800
There we go.

1414
01:16:25,600 --> 01:16:29,700
What was that / so just place?

1415
01:16:29,700 --> 01:16:33,300
So yeah, so thinking about a little bit more.

1416
01:16:33,300 --> 01:16:33,600
Yeah.

1417
01:16:33,600 --> 01:16:38,300
If you wanted to actually have it be independent of the hero, the part

1418
01:16:38,300 --> 01:16:41,800
of the system as it is now the or Larry imparts the harder part

1419
01:16:41,800 --> 01:16:44,600
because since you have that grid that you're using for simulation, you

1420
01:16:44,600 --> 01:16:49,000
have to make that grid move along around the world properly because

1421
01:16:49,000 --> 01:16:50,800
you can't simulate the grid everywhere.

1422
01:16:50,800 --> 01:16:53,800
So you can't just have it be throughout the whole world because it'd

1423
01:16:53,800 --> 01:16:54,300
be too expensive.

1424
01:16:54,300 --> 01:16:55,400
So you have

1425
01:16:55,600 --> 01:16:57,800
Make sure that you would just kind of aligned it roughly to where the

1426
01:16:57,800 --> 01:17:01,900
screen is and kind of move it around with you, so it's going to that

1427
01:17:01,900 --> 01:17:03,300
would take a little bit of work.

1428
01:17:05,800 --> 01:17:07,100
That would definitely be a little bit of work.

1429
01:17:20,500 --> 01:17:21,000
Steven last.

1430
01:17:21,000 --> 01:17:23,700
Don't you need to move all ground, chunk work into the separate thread

1431
01:17:23,700 --> 01:17:24,300
at the moment?

1432
01:17:24,300 --> 01:17:27,100
It looks like it's only actually doing render to Output in the task.

1433
01:17:27,200 --> 01:17:30,800
Yeah, I mean, we don't have to move it there but we now probably

1434
01:17:30,800 --> 01:17:33,700
could, if that makes sense previously.

1435
01:17:33,700 --> 01:17:37,100
We weren't doing that because we didn't the rest of the stuff wasn't

1436
01:17:37,100 --> 01:17:37,800
thread safe.

1437
01:17:38,500 --> 01:17:39,100
I don't know that.

1438
01:17:39,100 --> 01:17:42,600
We want to add that complexity like week that gives us flexibility the

1439
01:17:42,600 --> 01:17:45,900
fact that that's not happening right now that those are only happening

1440
01:17:45,900 --> 01:17:48,300
from one thread is kind of nice, right?

1441
01:17:52,500 --> 01:17:56,500
I mean in some sense, you could say that if we leave it this way it

1442
01:17:56,500 --> 01:17:59,500
gives us the ability to back out the the locks

1443
01:18:00,100 --> 01:18:02,700
It gives us the ability to get rid of the locks that are in there

1444
01:18:02,700 --> 01:18:04,200
right now, right?

1445
01:18:05,100 --> 01:18:09,200
Because it means that the generation ID stuff is the only stuff that

1446
01:18:09,200 --> 01:18:11,500
has to be correct.

1447
01:18:11,500 --> 01:18:13,100
Be locked, right?

1448
01:18:13,500 --> 01:18:15,100
And that's kind of a nice option.

1449
01:18:15,300 --> 01:18:17,700
So I'm not going to move it in there until we actually need to because

1450
01:18:17,700 --> 01:18:19,900
it gives us some options that we wouldn't otherwise have

1451
01:18:24,000 --> 01:18:27,000
Why are using usage for instead of size t for buffer sizes?

1452
01:18:30,100 --> 01:18:30,800
I guess.

1453
01:18:30,800 --> 01:18:33,300
Where is that?

1454
01:18:33,500 --> 01:18:34,600
Where are you saying that?

1455
01:18:34,600 --> 01:18:35,300
Exactly.

1456
01:18:35,400 --> 01:18:36,800
Which one are you talking about?

1457
01:18:37,700 --> 01:18:40,900
It may just be an oversight, if that's the case.

1458
01:18:41,200 --> 01:18:44,700
I think we use memory index for a lot of them so that we can control

1459
01:18:44,700 --> 01:18:47,500
what it actually is, if that makes sense.

1460
01:18:49,500 --> 01:18:51,400
In memory index is a size T.

1461
01:18:51,900 --> 01:18:57,200
So in a lot of cases, that's actually what it is, right?

1462
01:18:59,400 --> 01:19:02,000
So like this is not a you 64.

1463
01:19:02,000 --> 01:19:03,000
It's the size t.

1464
01:19:22,700 --> 01:19:23,400
Alger add.

1465
01:19:23,400 --> 01:19:24,400
Why are using Windows?

1466
01:19:24,700 --> 01:19:28,000
We use Windows because that's what all games ship on.

1467
01:19:28,400 --> 01:19:32,200
Basically, you know, games are consoles and windows.

1468
01:19:32,200 --> 01:19:35,100
There really isn't any other place unless you're talking maybe about

1469
01:19:35,100 --> 01:19:35,600
mobile.

1470
01:19:36,700 --> 01:19:37,700
Consoles, windows and mobile.

1471
01:19:37,700 --> 01:19:41,100
You might say there are no game sold on Windows and Mac.

1472
01:19:41,200 --> 01:19:44,400
That's just that's, that's not like opinion.

1473
01:19:44,400 --> 01:19:46,900
That's just, you know,

1474
01:19:48,300 --> 01:19:50,800
That's just the reality if that makes sense.

1475
01:19:51,200 --> 01:19:56,500
So if you kind of go and you take a look at that,

1476
01:19:58,200 --> 01:20:03,700
What what it looks like you know those are that's the sad reality of

1477
01:20:03,700 --> 01:20:04,100
it.

1478
01:20:04,800 --> 01:20:09,300
Ain't nobody buying no games on on Mac or Linux, unfortunately, wish

1479
01:20:09,300 --> 01:20:11,200
they did, right?

1480
01:20:11,300 --> 01:20:12,800
I'd love to see these numbers invert.

1481
01:20:12,800 --> 01:20:20,800
I'd love to see this number be 95 and and this number be 0.89 percent,

1482
01:20:20,800 --> 01:20:22,500
but that's, that's not the reality.

1483
01:20:22,500 --> 01:20:25,700
So, so if you want to program games, you got a program on Windows,

1484
01:20:26,100 --> 01:20:27,400
unless you're programming on like, a

1485
01:20:27,900 --> 01:20:30,300
Or or, you know, your your mobile game.

1486
01:20:30,700 --> 01:20:35,100
But if it's doing a PC game, which is what handmade hero is, you're on

1487
01:20:35,100 --> 01:20:35,600
Windows.

1488
01:20:35,600 --> 01:20:39,400
Now, we do everything, cross-platform, obviously handmade hero.

1489
01:20:39,400 --> 01:20:43,600
So like, you know, people have already ported it to all sorts of other

1490
01:20:43,600 --> 01:20:44,300
platforms.

1491
01:20:44,300 --> 01:20:46,300
Someone to the PS4 Port.

1492
01:20:46,300 --> 01:20:47,800
Someone did a Vita Port already.

1493
01:20:47,800 --> 01:20:49,200
Someone did a macports.

1494
01:20:49,200 --> 01:20:50,500
We did a Linux Port already.

1495
01:20:50,600 --> 01:20:53,500
So we make it really easy to do the port's because we architected it

1496
01:20:53,500 --> 01:20:57,200
well for that, but in terms of what your primary development platform

1497
01:20:57,200 --> 01:20:57,700
has to be it.

1498
01:20:57,900 --> 01:20:59,900
it pretty much has to be Windows because you want to

1499
01:21:00,100 --> 01:21:03,500
The running in testing, the game is often as possible on the primary

1500
01:21:03,500 --> 01:21:03,900
platform.

1501
01:21:03,900 --> 01:21:06,400
You're playing to ship on, that's the easiest way to make sure that

1502
01:21:06,400 --> 01:21:08,900
you don't have a lot of platform bugs and stuff like that, right?

1503
01:21:20,200 --> 01:21:21,100
Steven last.

1504
01:21:21,100 --> 01:21:23,800
I only ask because for now it seems like you'll be stalling for that

1505
01:21:23,800 --> 01:21:25,600
load bitmap on the main thread.

1506
01:21:26,400 --> 01:21:27,700
Oh, that's a good point.

1507
01:21:28,100 --> 01:21:31,200
Actually, we kind of did that prematurely.

1508
01:21:31,800 --> 01:21:35,100
So I suppose technically infill ground chunk.

1509
01:21:38,700 --> 01:21:39,200
Yeah.

1510
01:21:40,500 --> 01:21:44,500
That would stall while we load the asset, which is not awesome.

1511
01:21:46,600 --> 01:21:47,500
That's a good point.

1512
01:21:49,600 --> 01:21:50,900
That's a good point.

1513
01:21:52,900 --> 01:21:55,800
Hmm, I'm not sure what we want to do about that.

1514
01:21:55,800 --> 01:21:56,500
Exactly.

1515
01:22:09,200 --> 01:22:11,600
I mean I suppose we could try moving it all to the other thread.

1516
01:22:12,800 --> 01:22:14,000
Kind of risky, right?

1517
01:22:15,900 --> 01:22:16,800
But we could try it.

1518
01:22:19,700 --> 01:22:20,800
Just go Hog Wild.

1519
01:22:23,600 --> 01:22:26,400
I guess it would help us find bugs to and the other in the in the push

1520
01:22:26,400 --> 01:22:29,600
bitmap stuff that I just said that we should do, right?

1521
01:22:32,400 --> 01:22:33,300
Yeah, we could try it.

1522
01:22:33,900 --> 01:22:35,200
So if you're going to do that,

1523
01:22:41,400 --> 01:22:43,000
if we do, fill ground chunk work.

1524
01:22:45,500 --> 01:22:46,900
I guess we really would just

1525
01:22:48,200 --> 01:22:53,600
put all the, I mean, basically, the entire thing would go in there,

1526
01:22:54,100 --> 01:22:54,600
right?

1527
01:22:54,700 --> 01:22:57,200
I mean, literally, actually everything the whole thing.

1528
01:23:00,700 --> 01:23:01,600
Is that correct?

1529
01:23:03,200 --> 01:23:04,500
Cuz yeah.

1530
01:23:07,800 --> 01:23:09,600
I think, literally everything wood.

1531
01:23:12,100 --> 01:23:13,000
Let's take a look here.

1532
01:23:14,300 --> 01:23:15,300
so,

1533
01:23:27,300 --> 01:23:30,300
I think maybe not that one last one though.

1534
01:23:30,700 --> 01:23:34,000
I think maybe this still wants to be there just so it's gets recorded

1535
01:23:34,000 --> 01:23:35,900
as being in a particular location.

1536
01:23:39,800 --> 01:23:42,900
So I think that wants to say everything else.

1537
01:23:43,500 --> 01:23:46,800
Not so much, so yeah.

1538
01:23:48,100 --> 01:23:50,100
So let's see, what does this actually need?

1539
01:23:51,400 --> 01:23:52,200
Because I don't know.

1540
01:23:53,400 --> 01:23:58,500
so, let's see, we need the trance State assets,

1541
01:24:02,100 --> 01:24:05,100
We need what was actually passed to fill ground chunk.

1542
01:24:06,800 --> 01:24:07,500
Ground buffer.

1543
01:24:07,500 --> 01:24:08,800
Star ground buffer.

1544
01:24:10,900 --> 01:24:12,800
And then World position chunk P.

1545
01:24:13,600 --> 01:24:18,000
I guess we just passed those things in, and let it have a party.

1546
01:24:20,300 --> 01:24:21,000
Just gamestate.

1547
01:24:21,000 --> 01:24:22,200
Get used in here anywhere.

1548
01:24:24,800 --> 01:24:27,000
Just a chunk Doom in m is really it.

1549
01:24:30,400 --> 01:24:30,900
Right.

1550
01:24:32,500 --> 01:24:33,700
So we could try it.

1551
01:24:34,000 --> 01:24:34,900
You could try it.

1552
01:24:34,900 --> 01:24:35,800
This is dangerous.

1553
01:24:35,800 --> 01:24:36,600
What we're doing here.

1554
01:24:37,400 --> 01:24:41,200
It's a little bit dangerous, you know, just a little bit.

1555
01:24:48,400 --> 01:24:49,200
All right.

1556
01:24:50,900 --> 01:24:51,600
There we go.

1557
01:24:53,600 --> 01:24:57,000
so, work state

1558
01:24:58,400 --> 01:24:59,400
Ground buffer.

1559
01:25:03,500 --> 01:25:04,500
Jumpy.

1560
01:25:12,200 --> 01:25:12,800
Here we go.

1561
01:25:20,900 --> 01:25:30,500
So work game State just came State work, buffer around buffer work p

1562
01:25:30,500 --> 01:25:31,100
spunky.

1563
01:25:33,100 --> 01:25:36,800
And yeah, trance state.

1564
01:25:41,100 --> 01:25:42,100
Transient State.

1565
01:25:42,100 --> 01:25:44,800
Oh, that's the assets needs that work?

1566
01:25:45,600 --> 01:25:46,500
Translate

1567
01:25:48,800 --> 01:25:49,200
Oops.

1568
01:25:54,500 --> 01:25:55,200
Here we go.

1569
01:26:01,000 --> 01:26:04,300
So, just grab Mike that I guess.

1570
01:26:07,500 --> 01:26:08,400
Task.

1571
01:26:09,700 --> 01:26:10,900
Is work tasks.

1572
01:26:12,700 --> 01:26:14,300
And that's worth going to state.

1573
01:26:17,100 --> 01:26:18,500
We're trying state.

1574
01:26:23,100 --> 01:26:24,300
and these are just

1575
01:26:25,600 --> 01:26:26,300
just that.

1576
01:26:28,000 --> 01:26:29,500
So I don't know what this is going to do.

1577
01:26:31,200 --> 01:26:32,800
Yeah, probably something like that.

1578
01:26:35,600 --> 01:26:36,800
So, let's take a look.

1579
01:26:38,000 --> 01:26:39,600
Allocate render group.

1580
01:26:40,900 --> 01:26:42,400
Phil ground chunk work.

1581
01:26:50,300 --> 01:26:51,500
Push size.

1582
01:26:52,500 --> 01:26:52,900
Size.

1583
01:26:52,900 --> 01:26:53,700
88.

1584
01:26:55,100 --> 01:26:56,500
What is actually?

1585
01:26:58,800 --> 01:26:59,800
is it the arena of the

1586
01:27:00,000 --> 01:27:01,300
Nina's uninitialized.

1587
01:27:04,200 --> 01:27:06,300
Why is the arena uninitialized?

1588
01:27:07,400 --> 01:27:09,200
Did we not fill out the task?

1589
01:27:10,600 --> 01:27:12,200
We did not fill out the task.

1590
01:27:14,400 --> 01:27:15,300
That would do it.

1591
01:27:15,500 --> 01:27:17,600
Work fast.

1592
01:27:24,200 --> 01:27:27,200
Assert not renders in background.

1593
01:27:33,400 --> 01:27:37,100
So we did a load bitmap call with immediate set to true.

1594
01:27:37,100 --> 01:27:39,400
We then failed to get a bitmap

1595
01:27:41,000 --> 01:27:45,400
Which is not fabulous to say the least.

1596
01:27:47,200 --> 01:27:48,800
And this is a renders in background.

1597
01:27:49,000 --> 01:27:51,500
How did we fail would be the interesting question?

1598
01:27:52,900 --> 01:27:55,400
But that was good that actually tested that code path which we had

1599
01:27:55,400 --> 01:27:56,200
never done before.

1600
01:27:58,300 --> 01:27:59,900
So let's let's take a look at that.

1601
01:28:13,300 --> 01:28:14,700
Very interesting.

1602
01:28:17,900 --> 01:28:23,700
so if we have two people, right, who both hit this thing at the same

1603
01:28:23,700 --> 01:28:24,400
time,

1604
01:28:26,700 --> 01:28:32,100
Then they can't necessarily guarantee that they'll get it, right?

1605
01:28:33,200 --> 01:28:34,600
Which is kind of interesting.

1606
01:28:38,700 --> 01:28:39,700
That's pretty cool.

1607
01:28:40,000 --> 01:28:41,700
That's a pretty cool race condition.

1608
01:28:41,700 --> 01:28:43,500
You have to admit, right?

1609
01:28:43,600 --> 01:28:47,000
This is why I was saying like, yeah, you know, do we really want to do

1610
01:28:47,000 --> 01:28:47,300
this?

1611
01:28:50,100 --> 01:28:51,600
Do you really want to do it multi-threaded, or do?

1612
01:28:51,600 --> 01:28:53,700
We always want to leave those things in the same thread?

1613
01:28:53,800 --> 01:28:55,300
I don't know, it's handmade here.

1614
01:28:55,300 --> 01:28:57,900
We're supposed to be doing things a little harder than you would

1615
01:28:57,900 --> 01:29:00,600
normally maybe make them so, why not?

1616
01:29:02,900 --> 01:29:06,700
But yeah, so you saw kind of what happened there and get asset kind of

1617
01:29:06,700 --> 01:29:08,100
have that nastiness where

1618
01:29:10,500 --> 01:29:16,900
Sorry in you I guess it's in use bitmap or get bitmap or whatever it

1619
01:29:16,900 --> 01:29:17,400
shouldn't be.

1620
01:29:17,400 --> 01:29:17,600
Wait.

1621
01:29:17,600 --> 01:29:18,600
Wait why isn't here?

1622
01:29:20,100 --> 01:29:20,500
Where is it?

1623
01:29:20,500 --> 01:29:21,400
Oh, it's in the renderer.

1624
01:29:21,500 --> 01:29:22,300
I'm a banker.

1625
01:29:22,800 --> 01:29:23,300
Here we go.

1626
01:29:26,000 --> 01:29:27,000
Use bitmap.

1627
01:29:31,500 --> 01:29:32,500
Or push bitmap.

1628
01:29:38,000 --> 01:29:38,600
There it is.

1629
01:29:39,600 --> 01:29:41,300
So inside push bitmap, right?

1630
01:29:41,400 --> 01:29:45,000
It's taking a look at, if the renters in background, then it tries to

1631
01:29:45,000 --> 01:29:50,100
force the load, but it can't actually guarantee that that's true.

1632
01:29:52,200 --> 01:29:55,800
Because if two people call this at the exact same time, only one of

1633
01:29:55,800 --> 01:29:58,000
them will actually succeed, right?

1634
01:29:58,000 --> 01:29:59,200
Only one of them.

1635
01:30:00,000 --> 01:30:03,300
Will actually succeed in getting the asset if that makes sense.

1636
01:30:04,200 --> 01:30:06,300
So, you know, if I come in here, oops.

1637
01:30:08,700 --> 01:30:12,800
To load bitmap to people on the stomach compare exchange hit it.

1638
01:30:12,800 --> 01:30:17,400
Only one of them is able to actually take the queued, right?

1639
01:30:17,500 --> 01:30:20,700
And so that person is the one who actually will load it and the other

1640
01:30:20,700 --> 01:30:25,100
person will return before it before it's actually loaded, right?

1641
01:30:25,700 --> 01:30:30,500
So this person would have to, you know, stall, essentially a person,

1642
01:30:30,900 --> 01:30:35,600
the person who didn't get to do to do the load, right?

1643
01:30:36,900 --> 01:30:38,200
So we do something like

1644
01:30:38,400 --> 01:30:40,900
No, you something like this?

1645
01:30:48,600 --> 01:30:53,000
So if we were unable to do the atomic compare exchange, you would just

1646
01:30:53,000 --> 01:30:55,500
spin lock on the load.

1647
01:30:56,400 --> 01:31:01,600
I'm assuming, you know, while it's not equal to cute.

1648
01:31:02,100 --> 01:31:08,300
The only thing is, we do allow you to get an asset State unloaded,

1649
01:31:08,400 --> 01:31:13,500
which is presumably if you could not actually get a task, you know,

1650
01:31:13,500 --> 01:31:15,500
that kind of makes me wonder.

1651
01:31:21,100 --> 01:31:25,500
That kind of makes me wonder if we should just always do it, right?

1652
01:31:27,900 --> 01:31:33,500
Meaning hey if we couldn't get a background task, maybe we should just

1653
01:31:33,500 --> 01:31:34,200
load the thing.

1654
01:31:36,100 --> 01:31:36,700
Right.

1655
01:31:40,200 --> 01:31:41,700
I don't know, maybe not.

1656
01:31:41,700 --> 01:31:45,200
I guess you just want to not have it that frame potentially.

1657
01:31:46,300 --> 01:31:50,700
But anyway, while the thing is cued, you would want to wait here.

1658
01:31:53,000 --> 01:31:54,400
You'd want to wait here to get it cute.

1659
01:31:54,400 --> 01:31:57,300
So you'd want to do something like, you know, okay, I tried to load

1660
01:31:57,300 --> 01:31:57,500
it.

1661
01:31:57,500 --> 01:32:02,800
I couldn't load it so I'm just going to spin until it skewed State

1662
01:32:02,800 --> 01:32:03,500
goes away.

1663
01:32:03,900 --> 01:32:05,200
So I basically say, you know,

1664
01:32:08,600 --> 01:32:09,600
You know, this sort of thing.

1665
01:32:13,900 --> 01:32:14,500
Right.

1666
01:32:15,100 --> 01:32:18,100
But the problem is, you know, the compiler doesn't know that it has to

1667
01:32:18,100 --> 01:32:19,200
reload that every time.

1668
01:32:19,700 --> 01:32:23,000
So we would have to do something like this where we would tell it

1669
01:32:23,000 --> 01:32:29,000
first that it's a volatile, but it's a volatile load, right?

1670
01:32:30,000 --> 01:32:36,100
So we need to do something like asset State Star State.

1671
01:32:38,400 --> 01:32:42,800
Equals s estate, volatile star asset state.

1672
01:32:44,200 --> 01:32:44,600
You know.

1673
01:32:46,600 --> 01:32:51,400
Walt skewed do absolutely nothing, right.

1674
01:33:00,200 --> 01:33:00,700
Hmm.

1675
01:33:00,700 --> 01:33:04,900
So we're working but sadly.

1676
01:33:05,200 --> 01:33:08,800
We are not rendering the correct bitmaps.

1677
01:33:09,200 --> 01:33:12,000
It's like our are chunks are wrong or something, right?

1678
01:33:15,500 --> 01:33:17,200
Which actually, I think I know what that is.

1679
01:33:17,200 --> 01:33:19,500
We probably set it in the wrong order, right?

1680
01:33:27,100 --> 01:33:29,700
Junk P equals chunk p.

1681
01:33:31,500 --> 01:33:34,800
Oh wait, we set that as a pointer.

1682
01:33:34,800 --> 01:33:35,600
That's no good.

1683
01:33:36,600 --> 01:33:37,600
That's, that's wrong.

1684
01:33:38,800 --> 01:33:40,200
That's not, that's not good at all.

1685
01:33:43,500 --> 01:33:44,100
Right.

1686
01:33:45,100 --> 01:33:45,400
Yeah.

1687
01:33:50,000 --> 01:33:51,900
So that's more like, that's not like that.

1688
01:33:57,400 --> 01:34:00,200
That was accessing some random garbage, so that's no good.

1689
01:34:00,700 --> 01:34:01,100
There we go.

1690
01:34:08,900 --> 01:34:14,400
So yeah, I don't know, like I said at this point, we just don't have

1691
01:34:14,400 --> 01:34:16,700
very much in the way of debug Vis so I don't really know how well

1692
01:34:16,700 --> 01:34:17,400
that's working.

1693
01:34:19,500 --> 01:34:20,100
But yeah.

1694
01:34:20,300 --> 01:34:24,400
So right like I'm going to put to do in there because I don't know.

1695
01:34:24,400 --> 01:34:27,300
Like it's kind of like that was a question on the string that I just

1696
01:34:27,600 --> 01:34:29,100
you know, in one of that thing for us.

1697
01:34:29,100 --> 01:34:31,700
So we didn't really have a chance to sort of think it through so I was

1698
01:34:32,000 --> 01:34:36,800
But you do, do we want to have a more?

1699
01:34:38,200 --> 01:34:48,100
Coherent story here for what happens when 24 slowed people hit the

1700
01:34:48,100 --> 01:34:52,700
load at the same time, right?

1701
01:34:54,100 --> 01:34:54,500
I don't know.

1702
01:34:59,400 --> 01:35:02,300
How difficult would would it be to make this boot alone in a Raspberry

1703
01:35:02,300 --> 01:35:03,400
Pi or something like that?

1704
01:35:03,400 --> 01:35:04,800
Well we're going to find out someday.

1705
01:35:11,700 --> 01:35:13,100
Load asset work for you.

1706
01:35:13,100 --> 01:35:16,300
64 is not equal to size T.

1707
01:35:16,300 --> 01:35:19,900
So load asset work you're talking about.

1708
01:35:22,400 --> 01:35:22,900
This.

1709
01:35:24,500 --> 01:35:25,200
These guys.

1710
01:35:26,900 --> 01:35:28,400
Is that what that we're talking about?

1711
01:35:30,900 --> 01:35:35,000
So the reason for that is really just because these are filed, these

1712
01:35:35,000 --> 01:35:37,300
are based on the file API, right?

1713
01:35:38,500 --> 01:35:42,800
And so we were just forcing you 64 is 4 file for the file API.

1714
01:35:43,100 --> 01:35:44,500
Technically you could.

1715
01:35:44,500 --> 01:35:46,800
Yeah you could change it to a size T because obviously you wouldn't go

1716
01:35:46,800 --> 01:35:50,400
to allocate enough memory on 32-bit in order to fit anything bigger

1717
01:35:50,400 --> 01:35:50,800
than that.

1718
01:35:50,800 --> 01:35:53,100
But that's that's why that's a size.

1719
01:35:53,200 --> 01:35:54,300
That's why it's easier before.

1720
01:36:08,800 --> 01:36:12,400
We're dedicating one thread to asset loaded, which has an atomic Cube,

1721
01:36:12,400 --> 01:36:13,500
be a bad idea.

1722
01:36:14,800 --> 01:36:19,100
I don't know that it would be a bad idea, it might be an okay idea,

1723
01:36:20,000 --> 01:36:20,500
right?

1724
01:36:22,300 --> 01:36:25,000
I mean things are a little complicated in the asset system and the

1725
01:36:25,000 --> 01:36:27,800
asset like thread management thing at the moment.

1726
01:36:28,100 --> 01:36:31,300
And so it might be that like considering a slightly different design.

1727
01:36:31,300 --> 01:36:33,800
Like oh we just have everything on this one Q or something.

1728
01:36:33,800 --> 01:36:34,300
Right?

1729
01:36:35,100 --> 01:36:35,900
Might be good.

1730
01:36:36,300 --> 01:36:36,700
You know.

1731
01:36:36,700 --> 01:36:37,400
It's hard to say

1732
01:36:38,200 --> 01:36:44,000
So, yeah, I mean, without investigating other designs at the moment,

1733
01:36:44,100 --> 01:36:44,800
it's hard to say.

1734
01:36:47,900 --> 01:36:51,400
That's sort of something that would have to be investigated a little

1735
01:36:51,400 --> 01:36:52,000
more in depth.

1736
01:37:17,000 --> 01:37:17,800
All right.

1737
01:37:20,500 --> 01:37:22,200
Looks like that's the end of it.

1738
01:37:26,300 --> 01:37:28,000
Looks like that's the end of it.

1739
01:37:40,600 --> 01:37:41,500
I'm going to wind it down.

1740
01:37:48,200 --> 01:37:50,300
Okay, thank you, everyone for joining me for another episode of

1741
01:37:50,300 --> 01:37:50,800
handmade hero.

1742
01:37:50,800 --> 01:37:51,900
It's been a pleasure coding with you.

1743
01:37:51,900 --> 01:37:55,100
As always, we did some restructuring of the asset system, whether it's

1744
01:37:55,100 --> 01:37:55,600
better or worse.

1745
01:37:55,600 --> 01:37:56,100
Now, I don't know.

1746
01:37:56,100 --> 01:38:01,800
It's hard to say, we kind of our kind of feeling our way through how

1747
01:38:01,800 --> 01:38:04,900
we want the multi, threaded stuff in there, to work exactly the asset

1748
01:38:04,900 --> 01:38:05,200
systems.

1749
01:38:05,200 --> 01:38:08,600
Obviously, the most complicated thing in terms of threading that we

1750
01:38:08,600 --> 01:38:13,200
have in handmade hero and in fact, it's probably going to remain the

1751
01:38:13,200 --> 01:38:15,700
most complicated thing that we have in hand made here are probably

1752
01:38:15,700 --> 01:38:17,400
forever because

1753
01:38:17,500 --> 01:38:20,600
Scott multi-threading and also memory management which is something

1754
01:38:20,600 --> 01:38:23,000
that most of the code just doesn't need.

1755
01:38:24,100 --> 01:38:26,700
And so, it's kind of a Nexus of a couple of tricky problems and I

1756
01:38:26,700 --> 01:38:28,900
suspect that we'll have to spend more time on it later as well.

1757
01:38:30,100 --> 01:38:32,100
But it's good now and again, to just kind of go through and go.

1758
01:38:32,100 --> 01:38:36,100
Okay, let's play around with architecture, see how it goes, see if we

1759
01:38:36,100 --> 01:38:39,000
can improve some things fixing things and we did get rid of the

1760
01:38:39,000 --> 01:38:42,000
concept of locking assets which is kind of nice as well.

1761
01:38:42,400 --> 01:38:46,500
And we also added the ability now to do multi-threaded asset requests,

1762
01:38:46,500 --> 01:38:47,300
which might come in handy.

1763
01:38:47,500 --> 01:38:50,000
might not maybe that just opened up a can of worms that we'd rather

1764
01:38:50,000 --> 01:38:53,700
just not do and so maybe we won't do that in the future but that's

1765
01:38:53,700 --> 01:38:57,500
where we're at at the moment and tomorrow I think probably will go

1766
01:38:57,500 --> 01:38:59,300
back and finish up fonts

1767
01:39:00,100 --> 01:39:01,000
Try to get fonts.

1768
01:39:01,000 --> 01:39:04,100
Well, shouldn't we finish up go back and start the process of doing

1769
01:39:04,100 --> 01:39:06,400
the font Media stuff, which will allow us to kind of finish up fonts,

1770
01:39:07,100 --> 01:39:10,400
maybe by the end of week or something, kind of have fonts working

1771
01:39:10,400 --> 01:39:14,100
relatively comfortably in the game so that we can start using them to

1772
01:39:14,100 --> 01:39:17,100
do or debug print out, which would be really nice because we haven't

1773
01:39:17,100 --> 01:39:20,900
ever really had debug output and it would be great, you'll be a lot of

1774
01:39:20,900 --> 01:39:21,700
fun to have that.

1775
01:39:21,700 --> 01:39:22,500
It make things easier.

1776
01:39:22,500 --> 01:39:25,900
It's really good thing that you, you know, you want to have, you can

1777
01:39:25,900 --> 01:39:26,500
for debugging.

1778
01:39:27,300 --> 01:39:29,900
So I'm going to go ahead and do that tomorrow if you'd like to

1779
01:39:30,000 --> 01:39:31,200
To join me for that.

1780
01:39:31,200 --> 01:39:35,900
That would be I think tomorrow we return to the registers at eight

1781
01:39:35,900 --> 01:39:36,400
tomorrow.

1782
01:39:37,100 --> 01:39:38,300
Nope, it's still eight tomorrow.

1783
01:39:38,400 --> 01:39:40,000
So tomorrow, we're 8 p.m.

1784
01:39:40,500 --> 01:39:41,700
Pacific Daylight time.

1785
01:39:41,700 --> 01:39:47,100
Hope to see you there back here on Twitch until then if you want to

1786
01:39:47,100 --> 01:39:48,900
play along with with hammer here.

1787
01:39:48,900 --> 01:39:50,800
If you want to follow along the source code at home, if you preorder

1788
01:39:50,800 --> 01:39:53,700
the game on a meteor dot org you can get the source code and download

1789
01:39:53,700 --> 01:39:53,900
it.

1790
01:39:54,100 --> 01:39:56,600
I upload the changes every night so you can grab them.

1791
01:39:57,500 --> 01:39:59,800
We've also got a forum site, you can go to ask questions.

1792
01:40:00,000 --> 01:40:03,600
You like there's also ports to Mac and Linux and anted episode guide,

1793
01:40:03,600 --> 01:40:04,300
things like this.

1794
01:40:04,600 --> 01:40:05,700
We also have patreon page.

1795
01:40:05,700 --> 01:40:08,500
If you want to support our video series, you can subscribe to that and

1796
01:40:08,500 --> 01:40:10,400
we have a tweet bought that tweets the schedule at you.

1797
01:40:10,800 --> 01:40:14,300
So if you want to catch the series live that's the best way to do it.

1798
01:40:14,600 --> 01:40:17,800
Thanks everyone for joining me and I hope you will have fun coding.

1799
01:40:18,000 --> 01:40:22,300
Until I see you back here tomorrow until then I will see you on the

1800
01:40:22,300 --> 01:40:22,700
internet.

1801
01:40:22,700 --> 01:40:23,700
Take it easy everyone.

