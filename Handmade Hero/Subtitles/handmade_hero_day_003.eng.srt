1
00:00:00,000 --> 00:00:01,300
That's that's really critical.

2
00:00:01,900 --> 00:00:03,800
All right, we are ready to start here.

3
00:00:03,800 --> 00:00:07,000
Look at that time, Ur stream, begins Now, ladies and gentlemen, the

4
00:00:07,000 --> 00:00:08,800
timer actually worked.

5
00:00:09,300 --> 00:00:12,200
All right, so I wasn't that sick last night, I guess ladies and

6
00:00:12,200 --> 00:00:12,700
gentlemen.

7
00:00:13,200 --> 00:00:14,300
Thank you for joining me.

8
00:00:14,800 --> 00:00:17,300
Welcome to day 3 of handmade hero.

9
00:00:17,400 --> 00:00:20,400
I'm a little bit sick and I apologize but I have some cough drops

10
00:00:20,400 --> 00:00:20,700
here.

11
00:00:20,900 --> 00:00:26,400
So I am going to try to get by we'll see if I don't need them.

12
00:00:26,500 --> 00:00:29,000
I won't use them because I'm afraid they might make some some weird

13
00:00:29,000 --> 00:00:29,800
sounds with the microphone.

14
00:00:30,000 --> 00:00:31,200
But we'll see what we can do.

15
00:00:32,900 --> 00:00:36,200
All right, let's get started.

16
00:00:36,300 --> 00:00:42,900
If you remember from last time, we were at the point where we had just

17
00:00:42,900 --> 00:00:46,500
gotten a win32 window up, but we had not really finished our

18
00:00:46,500 --> 00:00:47,200
application.

19
00:00:47,800 --> 00:00:50,500
And so there's some things that we have to tidy up first.

20
00:00:50,700 --> 00:00:54,500
And then we need to start drawing to our window the way that we

21
00:00:54,500 --> 00:00:58,000
actually want to to start developing our own renderer meaning

22
00:00:58,000 --> 00:01:01,900
something that will allow us to make our own buffer of

23
00:01:02,100 --> 00:01:05,300
Souls that we can write, you know, basically our render any way that

24
00:01:05,300 --> 00:01:06,900
we want to work on.

25
00:01:06,900 --> 00:01:09,500
And then we need to basically give that to Windows so that it will

26
00:01:09,500 --> 00:01:11,200
display it in our window for us.

27
00:01:11,200 --> 00:01:15,400
And this won't necessarily be the most efficient way to, to render

28
00:01:15,400 --> 00:01:16,400
things on Windows.

29
00:01:16,400 --> 00:01:19,600
Because nowadays, everything goes through the 3D graphics card.

30
00:01:19,700 --> 00:01:23,500
But before we ever do anything involving the 3D graphics card or any

31
00:01:23,500 --> 00:01:26,900
of that stuff, like I said, I want to show you how to write everything

32
00:01:27,000 --> 00:01:28,200
from scratch yourself.

33
00:01:28,200 --> 00:01:30,200
And so what we're going to do first is we're going to use a slightly

34
00:01:30,200 --> 00:01:31,900
slower method which is we're going to

35
00:01:32,000 --> 00:01:34,200
do all the rendering ourselves and then we're going to put it to the

36
00:01:34,200 --> 00:01:34,600
screen.

37
00:01:35,400 --> 00:01:35,900
Okay.

38
00:01:36,100 --> 00:01:40,400
So this is sort of in some sense going back to the old days when this

39
00:01:40,400 --> 00:01:42,500
was actually how you had to write a renderer because there really

40
00:01:42,500 --> 00:01:45,000
wasn't much in the way the graphics card could do for you.

41
00:01:45,100 --> 00:01:47,400
You wrote everything yourself to a buffer and then you just hold the

42
00:01:47,400 --> 00:01:48,200
graphics card.

43
00:01:48,200 --> 00:01:50,300
Hey, this is the buffer that you need to display.

44
00:01:50,400 --> 00:01:53,800
And so that's basically what we're doing and that's the first step in

45
00:01:53,800 --> 00:01:55,300
learning how a renderer works.

46
00:01:56,900 --> 00:01:57,500
Here we go.

47
00:02:00,300 --> 00:02:01,900
I'm going to open up emacs.

48
00:02:02,300 --> 00:02:04,100
And by the way, I should say this.

49
00:02:04,100 --> 00:02:05,400
I haven't said it yet in the Stream.

50
00:02:05,900 --> 00:02:11,400
But if you are someone who has gone to the website and has pre-ordered

51
00:02:11,400 --> 00:02:15,700
the game, then you will actually have a zip file.

52
00:02:16,100 --> 00:02:22,800
That looks something like, where are they hear something like this?

53
00:02:23,600 --> 00:02:25,100
Basically, you will have a zip file.

54
00:02:25,300 --> 00:02:26,100
That's got this stuff.

55
00:02:26,300 --> 00:02:26,700
Here.

56
00:02:27,100 --> 00:02:30,600
And what you want to do is you want to look inside your zip file and

57
00:02:30,600 --> 00:02:33,900
they'll be day numbers, day zero on day zero zero to it's and so on.

58
00:02:33,900 --> 00:02:37,100
So if you are watching this video again sometime in the future, you

59
00:02:37,100 --> 00:02:40,700
will want to grab day to which is the day before this unzip that and

60
00:02:40,700 --> 00:02:43,600
that is the version of the source that we are starting with.

61
00:02:43,600 --> 00:02:45,000
So to make sure everyone's in sync.

62
00:02:45,300 --> 00:02:47,800
Please make sure you do that but truck before trying to follow what's

63
00:02:47,800 --> 00:02:51,300
going on here because otherwise your source code will be out of date.

64
00:02:51,500 --> 00:02:53,100
So we've got one source file so far.

65
00:02:53,100 --> 00:02:56,100
It's win32 handmade dot CPP and

66
00:02:56,200 --> 00:02:58,700
This right here is our window callback.

67
00:02:58,700 --> 00:02:59,600
Now you'll remember.

68
00:03:00,000 --> 00:03:00,400
You did.

69
00:03:00,500 --> 00:03:03,200
Last time was we made a little message Loop here.

70
00:03:03,300 --> 00:03:07,000
And windows basically has a message Hugh for our application that it's

71
00:03:07,000 --> 00:03:11,000
tough things in and we have to pull them out one at a time, translate

72
00:03:11,000 --> 00:03:14,500
them and dispatch them and then we will get them in our window call

73
00:03:14,500 --> 00:03:14,700
back.

74
00:03:14,700 --> 00:03:15,100
Now.

75
00:03:15,200 --> 00:03:17,000
We also talked a little bit in the Q&A.

76
00:03:17,000 --> 00:03:20,300
I believe about why we have to have a call back at all.

77
00:03:20,400 --> 00:03:23,300
Because if we're the people who are pulling the messages off the queue

78
00:03:23,300 --> 00:03:24,000
down here.

79
00:03:24,100 --> 00:03:26,700
Well, why can't we just call whatever function we want?

80
00:03:26,700 --> 00:03:29,900
And the reason as we saw in the Q&A is because windows

81
00:03:30,000 --> 00:03:33,000
Serves the right to call us back at that window, call back.

82
00:03:33,000 --> 00:03:36,800
Anytime it wants to, it does not have to do it inside this dispatch

83
00:03:36,800 --> 00:03:37,200
message.

84
00:03:37,200 --> 00:03:41,200
That's the sort of mental model that they were going for, is that they

85
00:03:41,200 --> 00:03:44,800
call us back inside, dispatch message, but of course, Windows things

86
00:03:44,800 --> 00:03:45,300
get crazy.

87
00:03:45,300 --> 00:03:48,300
So they started having places where it calls us out of the middle of

88
00:03:48,300 --> 00:03:48,500
nowhere.

89
00:03:48,500 --> 00:03:52,100
So anytime we call into a Windows function, no matter what it is.

90
00:03:52,200 --> 00:03:55,700
We kind of have to be ready for it to potentially cause back in there.

91
00:03:56,100 --> 00:03:56,500
Okay.

92
00:03:57,100 --> 00:03:59,800
So what we did and where we left off is something that we don't

93
00:04:00,000 --> 00:04:02,400
Which is not really sufficient for our purposes.

94
00:04:02,800 --> 00:04:06,100
Basically, we had two things that we had to fix one, is that you'll

95
00:04:06,100 --> 00:04:06,500
notice.

96
00:04:06,500 --> 00:04:07,700
And those of you tried at home.

97
00:04:07,700 --> 00:04:10,000
I'm going to go ahead and launch the debugger here so they can take a

98
00:04:10,000 --> 00:04:12,400
look at our at our program.

99
00:04:12,600 --> 00:04:15,700
So for those of you who are following along at home, you know, that

100
00:04:15,700 --> 00:04:18,899
when you run this application, you end up in a circumstance, where

101
00:04:18,899 --> 00:04:20,700
there is really nothing you can do with it.

102
00:04:21,100 --> 00:04:22,400
You cannot close it.

103
00:04:22,500 --> 00:04:25,200
I mean, you can resize it and see our black white alternating pattern

104
00:04:25,200 --> 00:04:27,000
that we decided to have in there, just to make sure things were

105
00:04:27,000 --> 00:04:29,800
working, you know, you can do all that but you cannot close the

106
00:04:29,900 --> 00:04:30,200
Do.

107
00:04:30,500 --> 00:04:33,100
And so really, there's no way to exit this application without going

108
00:04:33,100 --> 00:04:36,000
back to the debugger and hitting shift F5, or, you know, going into

109
00:04:36,000 --> 00:04:38,000
debug here and hitting stop debugging.

110
00:04:38,500 --> 00:04:41,900
And that is because we are not yet handling, the clothes message.

111
00:04:43,300 --> 00:04:44,600
Okay.

112
00:04:44,600 --> 00:04:47,200
So in order to handle the clothes message properly, there's a couple

113
00:04:47,200 --> 00:04:48,400
things that we have to do.

114
00:04:48,400 --> 00:04:52,900
The first thing is, we want to go back here and take a look here at

115
00:04:52,900 --> 00:04:54,000
the Loop that we created.

116
00:04:54,000 --> 00:04:55,700
That's pulling these get messages off.

117
00:04:55,700 --> 00:04:59,900
Now, if you remember, if we go back to msdn and we looked at this the

118
00:04:59,900 --> 00:05:03,200
other day, but if you go back to msdn, the documentation for get

119
00:05:03,200 --> 00:05:07,000
message is very explicit about what's going to happen when we call it.

120
00:05:07,000 --> 00:05:09,700
It says, in fact, it even gives some sample code down here.

121
00:05:09,700 --> 00:05:13,100
It basically says that there's a possibility of a return value of,

122
00:05:13,400 --> 00:05:13,900
Zero.

123
00:05:14,100 --> 00:05:17,800
If the WM quit message is posted, which is basically a way of Windows

124
00:05:17,800 --> 00:05:20,800
telling us that it wants our app to exit, right away.

125
00:05:21,100 --> 00:05:23,600
But there's also the possibility of a negative 1 which means there was

126
00:05:23,600 --> 00:05:27,000
some kind of error in the get message and we should exit as well.

127
00:05:27,200 --> 00:05:30,800
So given those two things we checked for greater than 0.

128
00:05:30,800 --> 00:05:33,800
What that basically means is that if we want to exit this application

129
00:05:34,000 --> 00:05:39,200
at the moment, what we will have to do, is basically get this thing to

130
00:05:39,200 --> 00:05:43,200
go ahead and get a WM quit message, and there's a really easy.

131
00:05:43,300 --> 00:05:44,600
E way that we can do that.

132
00:05:44,600 --> 00:05:48,600
We can actually tell Windows to just go ahead and post a quick message

133
00:05:48,600 --> 00:05:51,900
right on our cue.

134
00:05:52,200 --> 00:05:52,700
There you go.

135
00:05:53,000 --> 00:05:56,300
Now, if you take a look at post, quit message in msdn again, always

136
00:05:56,300 --> 00:05:57,100
get used msdn.

137
00:05:57,100 --> 00:05:59,600
And by the way, I'll mention one other thing that someone wrote in and

138
00:05:59,700 --> 00:05:59,900
told

139
00:06:00,000 --> 00:06:01,400
About, that's pretty important.

140
00:06:01,900 --> 00:06:03,300
When you go to msdn.

141
00:06:03,300 --> 00:06:05,600
We have not had this happen on the live stream, but somebody had it

142
00:06:05,600 --> 00:06:09,000
happen at home where sometimes it'll come up with the documentation

143
00:06:09,100 --> 00:06:11,000
for Windows mobile or something.

144
00:06:11,200 --> 00:06:14,000
And the reason that you care about that is because the documentation

145
00:06:14,000 --> 00:06:17,500
that we want has stuff like this in it, which says, which version of

146
00:06:17,500 --> 00:06:22,000
the desktop Windows you want to use in order to support it.

147
00:06:22,000 --> 00:06:22,200
Right?

148
00:06:22,200 --> 00:06:25,100
So we need to know that information and we also need to know.

149
00:06:25,700 --> 00:06:27,000
I said, sorry I said that poorly.

150
00:06:27,100 --> 00:06:29,800
It says, what the minimum supported desktop version is so we know

151
00:06:30,000 --> 00:06:31,900
What our game can ship on minimally.

152
00:06:31,900 --> 00:06:34,500
So Windows 2000 professionals the earliest thing we could ship on no

153
00:06:34,500 --> 00:06:35,100
problem there?

154
00:06:35,100 --> 00:06:35,600
No one else.

155
00:06:35,600 --> 00:06:37,500
No one's using anything before XP these days.

156
00:06:38,200 --> 00:06:42,000
But you also have the library and the dll name here, which we need to

157
00:06:42,000 --> 00:06:43,600
use to resolve unresolved symbols.

158
00:06:43,600 --> 00:06:45,400
And we saw that in the previous stream.

159
00:06:45,400 --> 00:06:48,900
So make sure you are actually looking at the desktop version of

160
00:06:48,900 --> 00:06:51,200
Windows, which should stay here.

161
00:06:51,200 --> 00:06:53,900
If you're not seeing things like, minimum, supported client, Windows

162
00:06:53,900 --> 00:06:58,000
2000, professional or some other desktop version, then you need to

163
00:06:58,000 --> 00:06:59,400
make sure that you can switch to that.

164
00:06:59,400 --> 00:06:59,900
And I think

165
00:07:00,000 --> 00:07:02,500
Use a desktop technology is here developed desktop.

166
00:07:02,500 --> 00:07:04,400
I don't know, I msdn changes.

167
00:07:04,400 --> 00:07:07,300
So frequently, it's hard to say hopefully, sometime during the stream

168
00:07:07,300 --> 00:07:09,900
will have the mobile and come up, and I can sort of fuss around with

169
00:07:09,900 --> 00:07:12,200
it and get us to the right place, but there you go.

170
00:07:14,000 --> 00:07:14,300
All right.

171
00:07:14,300 --> 00:07:18,000
So post quick message, basically post an exit code is part of the quit

172
00:07:18,000 --> 00:07:18,400
message.

173
00:07:18,400 --> 00:07:21,300
And the exit code is just something that if we were posting this quit

174
00:07:21,300 --> 00:07:23,200
message in some kind of an error situation.

175
00:07:23,200 --> 00:07:26,500
It's basically just a way that we can sneak a little numeric value

176
00:07:27,000 --> 00:07:28,000
into that quick message.

177
00:07:28,000 --> 00:07:31,300
And if you look at the quick message, WM quit, it's basically a thing

178
00:07:31,300 --> 00:07:33,800
here that just you know is opaque to us.

179
00:07:34,200 --> 00:07:37,300
But when we do that post quick message, it'll be able will be able to

180
00:07:37,300 --> 00:07:39,300
get this exit code back out.

181
00:07:39,300 --> 00:07:40,200
If we really wanted it.

182
00:07:40,200 --> 00:07:42,600
Now, we don't care about any of this stuff because we're a game and

183
00:07:42,600 --> 00:07:43,200
games don't

184
00:07:43,400 --> 00:07:48,300
Back with Windows in hardly at all, basically, but if we did care, we

185
00:07:48,300 --> 00:07:49,200
would start to think about.

186
00:07:49,200 --> 00:07:51,100
Oh, do we need to pass error codes, back and all these sorts of

187
00:07:51,100 --> 00:07:51,400
things.

188
00:07:51,400 --> 00:07:52,500
We don't care about that at all.

189
00:07:52,500 --> 00:07:56,500
We want to do is post a WM quit message in response to WM close so

190
00:07:56,500 --> 00:07:57,600
that we will fall out of this Loop.

191
00:07:57,600 --> 00:08:01,500
Now, there's two things we could have done here and I will show you

192
00:08:01,500 --> 00:08:04,500
how to do the second one as well because it's probably a little more

193
00:08:04,500 --> 00:08:06,200
proper, even though again as a game.

194
00:08:06,300 --> 00:08:07,100
We don't really care.

195
00:08:07,100 --> 00:08:08,300
So let me compile that.

196
00:08:09,000 --> 00:08:13,500
Let's go ahead and here and we'll go ahead and set a break point on

197
00:08:13,500 --> 00:08:14,100
that line.

198
00:08:14,300 --> 00:08:15,700
Here's our handmade Hero app.

199
00:08:15,700 --> 00:08:16,600
When I close it.

200
00:08:16,600 --> 00:08:19,000
You will notice we get this post, quit message.

201
00:08:19,000 --> 00:08:21,900
And when I hit F10 to step over that, I'm going to set another

202
00:08:21,900 --> 00:08:22,800
breakpoint down here.

203
00:08:22,800 --> 00:08:25,800
Just so we can see when I go ahead and step over that.

204
00:08:25,900 --> 00:08:28,700
It has now posted that WM quit in our queue.

205
00:08:28,700 --> 00:08:30,800
And what we will find is that eventually.

206
00:08:30,800 --> 00:08:34,200
Now we will actually get that WM quit message.

207
00:08:34,200 --> 00:08:37,400
So this message result will come back as false eventually.

208
00:08:37,400 --> 00:08:38,600
Now remember, there's other messages in the

209
00:08:38,700 --> 00:08:38,900
Q.

210
00:08:38,900 --> 00:08:40,299
So it won't come back right away.

211
00:08:40,500 --> 00:08:43,700
But after a while when we hit F5, we will get in a situation that

212
00:08:43,700 --> 00:08:48,300
message result is in fact false or 0 and we hit our brick break breaks

213
00:08:48,300 --> 00:08:51,200
us out of the infinite for Loop, which is this guy right here and it

214
00:08:51,200 --> 00:08:52,000
ends the program.

215
00:08:52,000 --> 00:08:57,500
Now, you may be asking me for ready to ask me or if you are one of

216
00:08:57,500 --> 00:08:59,700
those people out there who is very, very

217
00:09:00,000 --> 00:09:04,600
C++ focused or object-oriented focused, you may be having a fit right

218
00:09:04,600 --> 00:09:06,300
now and that is okay.

219
00:09:06,300 --> 00:09:07,600
I apologize for that.

220
00:09:08,000 --> 00:09:11,200
I hope that it does not cause you too much mental anguish, but

221
00:09:13,600 --> 00:09:16,600
you will be upset because you will note that I did not close my

222
00:09:16,600 --> 00:09:17,100
window.

223
00:09:17,800 --> 00:09:20,800
Now, one of the things that people like to do a lot in object-oriented

224
00:09:20,800 --> 00:09:24,700
programming languages is they like to make sure that they always have

225
00:09:24,700 --> 00:09:29,000
completely symmetric construction and destruction, or acquisition and

226
00:09:29,000 --> 00:09:30,400
release of their resources.

227
00:09:30,400 --> 00:09:33,900
And what that means is that, every time you make something such as

228
00:09:33,900 --> 00:09:38,200
create wind, oex, where we made a window or register window class,

229
00:09:38,200 --> 00:09:39,600
where we registered a window class.

230
00:09:40,000 --> 00:09:42,000
You want to make sure that if there is some way,

231
00:09:42,200 --> 00:09:44,400
Clean that up that you do, so.

232
00:09:45,600 --> 00:09:49,200
They do that even if there is no need to clean it up.

233
00:09:50,000 --> 00:09:53,200
Now, I would love to rag on people who do that.

234
00:09:53,200 --> 00:09:55,000
I'd love to say some disparaging things right now.

235
00:09:55,000 --> 00:09:56,200
But here's the honest truth.

236
00:09:56,300 --> 00:09:57,200
I was one of those people.

237
00:09:57,200 --> 00:10:01,300
I was one of those people for a good, probably, three years of my

238
00:10:01,300 --> 00:10:04,100
life, and I wrote code like that all the time.

239
00:10:04,100 --> 00:10:05,600
It's the only way I programmed.

240
00:10:05,600 --> 00:10:06,700
Everything was written.

241
00:10:06,900 --> 00:10:07,500
Exactly.

242
00:10:07,500 --> 00:10:08,000
That way.

243
00:10:08,400 --> 00:10:11,900
It's some people call it resource acquisition is initialization.

244
00:10:12,400 --> 00:10:14,900
Other people might just think of it as having everything wrapped in a

245
00:10:14,900 --> 00:10:15,200
class.

246
00:10:15,400 --> 00:10:19,200
Constructor and Destructor, there's a lot of different methodologies

247
00:10:19,200 --> 00:10:22,800
that sort of have this same thing at their core, but they all boil

248
00:10:22,800 --> 00:10:24,000
down to that same thing.

249
00:10:24,000 --> 00:10:28,000
And so they would never want me to do something like creating a window

250
00:10:28,000 --> 00:10:33,300
that I had no plans for destroying but later on as I programmed more

251
00:10:33,300 --> 00:10:36,500
and started to ship a lot more real world applications and cared about

252
00:10:36,500 --> 00:10:39,400
performance a lot and cared about a lot of things that I didn't care

253
00:10:39,400 --> 00:10:41,900
about or know about during the times when I programmed like that.

254
00:10:42,400 --> 00:10:45,200
Basically what I found is that that is a really bad way to program.

255
00:10:45,300 --> 00:10:48,900
And the reason is because it is almost always the case that things are

256
00:10:48,900 --> 00:10:52,200
better Acquired and released in Aggregate.

257
00:10:52,400 --> 00:10:54,500
And what that means is that instead of thinking about things

258
00:10:54,500 --> 00:10:58,400
individually, you always think of them as part of a group that gets

259
00:10:58,400 --> 00:11:01,700
handled together and that is the way to think about things and what

260
00:11:01,700 --> 00:11:02,400
that means.

261
00:11:05,700 --> 00:11:09,000
Is you can't be myopic and look just, you know, what?

262
00:11:09,000 --> 00:11:09,900
The T wasn't doing it.

263
00:11:09,900 --> 00:11:11,600
You're asking me of cheating cheating on.

264
00:11:11,800 --> 00:11:13,100
On my almond milk with the T.

265
00:11:13,100 --> 00:11:13,800
The T wasn't doing it.

266
00:11:13,800 --> 00:11:14,700
We're switching the almond milk.

267
00:11:17,100 --> 00:11:17,600
There it is.

268
00:11:18,000 --> 00:11:18,600
All right.

269
00:11:20,800 --> 00:11:21,800
Sorry for the interruption.

270
00:11:21,900 --> 00:11:22,400
It has to happen.

271
00:11:22,400 --> 00:11:22,500
Now.

272
00:11:22,500 --> 00:11:27,000
And again anyway, what you need to do is stop looking at things in

273
00:11:27,000 --> 00:11:29,900
that myopic way that focuses on the individual creation and

274
00:11:29,900 --> 00:11:32,900
destruction of one resource and start thinking about creation and

275
00:11:32,900 --> 00:11:35,600
destruction and acquisition and releasing in waves.

276
00:11:36,000 --> 00:11:38,100
Now, you don't have to worry about that too much because we're going

277
00:11:38,100 --> 00:11:40,700
to be getting into those sorts of things a lot more later when we have

278
00:11:40,700 --> 00:11:42,300
a lot more resources to deal with.

279
00:11:42,400 --> 00:11:44,900
But right now, the reason that I want to bring it up is because what

280
00:11:44,900 --> 00:11:46,700
we're doing right here is we're creating this window.

281
00:11:46,800 --> 00:11:49,100
Now, we know that as long as our game is running, we are going to

282
00:11:49,100 --> 00:11:49,800
leave this window.

283
00:11:49,900 --> 00:11:50,600
Do created.

284
00:11:50,600 --> 00:11:53,000
And if we ever do destroy it, for any reason, we're going to recreate

285
00:11:53,000 --> 00:11:53,100
it.

286
00:11:53,100 --> 00:11:53,500
Right?

287
00:11:53,500 --> 00:11:54,800
Right back again, right immediately.

288
00:11:54,800 --> 00:11:57,600
And the reason is because we can't display our game without a window.

289
00:11:57,600 --> 00:11:59,800
So, we know, as long as the games running, there's a window.

290
00:12:00,000 --> 00:12:03,600
When we exit this application, windows will bulk clean up all of our

291
00:12:03,600 --> 00:12:04,000
Windows.

292
00:12:04,000 --> 00:12:06,800
All of our handles, all of our memory, everything gets cleaned up by

293
00:12:06,800 --> 00:12:07,200
windows.

294
00:12:07,200 --> 00:12:11,100
So, if we actually put in code, that closes our window before we exit,

295
00:12:11,100 --> 00:12:13,200
we are wasting the users time.

296
00:12:14,400 --> 00:12:16,700
I know it sounds strange say it that way, but that is the truth.

297
00:12:16,700 --> 00:12:19,900
If you've ever had one of those applications where you try to close it

298
00:12:19,900 --> 00:12:22,800
and it takes a while to close down your like, what is going on.

299
00:12:22,800 --> 00:12:24,200
All I ask you to do is close.

300
00:12:24,300 --> 00:12:27,400
Well, honestly a big cause of that is this sort of thing.

301
00:12:27,400 --> 00:12:29,900
It's thinking it has to go through and free all its resources.

302
00:12:30,000 --> 00:12:31,500
Annually and tidy everything up.

303
00:12:31,500 --> 00:12:34,100
When in reality a lot of those things if they had been thought about

304
00:12:34,100 --> 00:12:36,900
as in terms of waves, it would have closed like that.

305
00:12:37,000 --> 00:12:38,800
Just something to think about again.

306
00:12:38,800 --> 00:12:41,500
I apologize to object-oriented programs out there who are having a fit

307
00:12:41,500 --> 00:12:42,000
right now.

308
00:12:42,900 --> 00:12:43,600
What can I say?

309
00:12:43,600 --> 00:12:44,300
I'm sorry.

310
00:12:44,400 --> 00:12:45,600
That's just not the way I could.

311
00:12:47,200 --> 00:12:47,900
All right.

312
00:12:49,100 --> 00:12:51,400
So we are letting our window die.

313
00:12:51,500 --> 00:12:55,000
The reason I said, there's a little bit of an oddity here is because

314
00:12:55,000 --> 00:12:58,100
we handled the WM close message and not the WM destroy message.

315
00:12:58,100 --> 00:13:02,200
We left the WM destroy message floating sort of blowing in the breeze

316
00:13:02,200 --> 00:13:02,800
if you will.

317
00:13:03,200 --> 00:13:06,600
And so if you want to be a little more appropriate, if you're a little

318
00:13:06,600 --> 00:13:10,400
more clean here, you could do something like this where you pass both

319
00:13:10,400 --> 00:13:16,000
of them or if you want to satisfy, even the the sort of try to tidy,

320
00:13:16,000 --> 00:13:17,700
everything up, sort of way of doing things.

321
00:13:17,900 --> 00:13:18,700
You could even call.

322
00:13:18,900 --> 00:13:23,500
Destroy window, which closes your window and kills it right here, or

323
00:13:23,700 --> 00:13:26,000
you can do something even more pernicious.

324
00:13:27,200 --> 00:13:30,300
And it is probably honestly what I am going to recommend that we do

325
00:13:31,300 --> 00:13:37,900
which is that we are going to instead talk about actually having a

326
00:13:38,600 --> 00:13:41,900
variable that controls the loop down at the bottom so that it will

327
00:13:41,900 --> 00:13:43,400
exit on its own.

328
00:13:43,700 --> 00:13:46,800
So basically what we're going to do here is inside our statement that

329
00:13:46,800 --> 00:13:48,600
used to be infinite Loop.

330
00:13:48,700 --> 00:13:52,600
We are basically just going to say while we are running and this will

331
00:13:52,600 --> 00:13:56,900
give us a global Boolean flag that we can go ahead and kill.

332
00:13:57,100 --> 00:14:01,200
Anytime we want to and we're going to talk about this in one quick

333
00:14:01,200 --> 00:14:01,700
second.

334
00:14:01,900 --> 00:14:04,500
But basically what we're going to do here actually going to initialize

335
00:14:04,500 --> 00:14:06,100
this in the way that I normally do.

336
00:14:07,400 --> 00:14:09,900
What we're going to do is we're basically going to have a giant a

337
00:14:09,900 --> 00:14:12,900
Boolean Global that says whether we're still running and when we go to

338
00:14:12,900 --> 00:14:16,600
close the app or if our window gets destroyed, for some reason, we are

339
00:14:16,600 --> 00:14:18,500
going to set it to false so that we exit.

340
00:14:18,500 --> 00:14:24,400
Now in the future, we probably will not actually do these things

341
00:14:24,400 --> 00:14:25,000
directly.

342
00:14:25,100 --> 00:14:26,800
What we will probably do instead.

343
00:14:26,900 --> 00:14:30,100
Ted, and the reason that I'm setting up this, this Boolean here is we

344
00:14:30,100 --> 00:14:33,900
will probably only really do this.

345
00:14:33,900 --> 00:14:37,400
This setting thing setting running to false somewhere else.

346
00:14:37,600 --> 00:14:38,800
We'll have to do it somewhere else.

347
00:14:38,800 --> 00:14:42,300
So for now it's going to be a global but in the future we may move it.

348
00:14:42,300 --> 00:14:45,400
So this is a global for now.

349
00:14:45,900 --> 00:14:48,300
And the reason I say that is because the user may try to close our

350
00:14:48,300 --> 00:14:51,000
application and we may not want to actually close the application.

351
00:14:51,000 --> 00:14:53,700
We may want to pop up something inside the game that says are you sure

352
00:14:53,700 --> 00:14:55,800
you want to exit or something like that?

353
00:14:55,800 --> 00:14:56,800
In case they may lose.

354
00:14:56,900 --> 00:14:57,700
Progress in their game.

355
00:14:57,700 --> 00:14:59,900
If it's like some kind of a rogue like situation where we're not

356
00:15:00,000 --> 00:15:02,800
Going to save it, we may need to do something there.

357
00:15:02,800 --> 00:15:05,900
So we probably want exit here and with WM destroy that is what happens

358
00:15:05,900 --> 00:15:09,000
when our window gets destroyed and honestly, we may want to

359
00:15:09,000 --> 00:15:11,300
trick-or-treat that case as an error.

360
00:15:11,300 --> 00:15:14,800
Let's say our window gets destroyed, somehow that we did not foresee.

361
00:15:15,000 --> 00:15:18,900
We may want to flag that and go try to recreate our window later.

362
00:15:19,200 --> 00:15:21,100
So I'm going to do both of these as well.

363
00:15:23,300 --> 00:15:26,600
And really, this whole structure is going to be largely placeholder

364
00:15:26,600 --> 00:15:33,900
code for when we come back, a little later and handle this with a

365
00:15:34,800 --> 00:15:43,100
message and or I should say to the user and handle, this as an error,

366
00:15:43,200 --> 00:15:44,300
recreate window.

367
00:15:45,200 --> 00:15:46,300
We will want to come in here.

368
00:15:46,300 --> 00:15:49,500
When we do the second pass on the Windows platform later, which will

369
00:15:49,500 --> 00:15:51,900
be much later when we're going through and tighten your into up and

370
00:15:51,900 --> 00:15:52,900
making it super good for

371
00:15:53,000 --> 00:15:55,200
I think we may want to do those things.

372
00:15:55,200 --> 00:15:58,600
All right, so let's talk about this Global.

373
00:15:59,100 --> 00:16:01,100
I am not averse to Global variables.

374
00:16:01,900 --> 00:16:04,200
But I am also not a huge fan of them either.

375
00:16:04,300 --> 00:16:06,300
The Dogma that says you should never have a global variable.

376
00:16:06,300 --> 00:16:09,900
I certainly don't buy into but there is a reason that Dogma came about

377
00:16:09,900 --> 00:16:11,900
and a lot of the points are pretty valid.

378
00:16:14,200 --> 00:16:17,400
Basically, something will be trying to do to avoid making mistakes.

379
00:16:18,000 --> 00:16:20,200
Is we will be trying to avoid having code.

380
00:16:20,500 --> 00:16:23,900
That should not be touching things, touch those things for lack of a

381
00:16:23,900 --> 00:16:24,500
better term.

382
00:16:25,000 --> 00:16:28,300
And so the more we can make our code, very clear about what it can and

383
00:16:28,300 --> 00:16:32,300
can't access the better and that is where Global variables really pose

384
00:16:32,300 --> 00:16:32,700
a problem.

385
00:16:32,700 --> 00:16:36,200
Because since anyone can touch it at any time, it makes it rather

386
00:16:36,200 --> 00:16:37,700
difficult for us to see.

387
00:16:38,100 --> 00:16:41,800
So this is something that in our Windows code right now is totally

388
00:16:41,800 --> 00:16:42,100
harmless.

389
00:16:42,100 --> 00:16:43,900
It is just a thing that controls exiting from the loop.

390
00:16:44,300 --> 00:16:47,400
Our Windows code is always going to be a little bit janky because it

391
00:16:47,400 --> 00:16:50,300
is interfacing with Windows, and windows is not designed particularly.

392
00:16:50,300 --> 00:16:51,900
Well, it's not a very good API.

393
00:16:52,200 --> 00:16:55,300
So I am not concerned about doing things like using Global's in the

394
00:16:55,300 --> 00:16:57,300
win32 platform layer.

395
00:16:57,300 --> 00:16:59,100
Most of our code will not be in that layer.

396
00:16:59,100 --> 00:17:02,300
And most of our code will not be touching anything that are Global in

397
00:17:02,300 --> 00:17:03,600
there to say the least.

398
00:17:03,600 --> 00:17:05,900
They will not even really know that it is there.

399
00:17:05,900 --> 00:17:08,900
So it is not really that big of a deal but even so I will probably

400
00:17:09,200 --> 00:17:12,400
move this out of levels at some point just so I can have a much

401
00:17:12,400 --> 00:17:13,800
clearer idea of exactly who

402
00:17:14,000 --> 00:17:19,599
You can change running and when so that said, watch for me talking a

403
00:17:19,599 --> 00:17:22,300
little bit more about Global's in the future because we will have some

404
00:17:22,300 --> 00:17:25,300
more things to say possibly even on this very episode.

405
00:17:25,300 --> 00:17:27,500
But for now, we're going to go ahead and use them because a lot of

406
00:17:27,500 --> 00:17:31,100
times you will use things as you'll ever code up into a working State,

407
00:17:31,100 --> 00:17:32,800
and then you sort of solidify it down.

408
00:17:32,800 --> 00:17:36,700
You may start to pull things out that were Global or pull things that

409
00:17:36,700 --> 00:17:39,000
were in functions out of them or those sorts of things.

410
00:17:39,000 --> 00:17:39,900
And that's what we're going to do.

411
00:17:39,900 --> 00:17:41,500
So we're going to have to go in here.

412
00:17:41,900 --> 00:17:43,900
We are at will start running basically.

413
00:17:44,000 --> 00:17:47,300
Ali right before we go into our while Loops, we're going to set

414
00:17:47,300 --> 00:17:48,400
running equal to true.

415
00:17:48,500 --> 00:17:48,600
Now.

416
00:17:48,600 --> 00:17:53,300
One thing that you lacked want to note is that static, we saw it once

417
00:17:53,300 --> 00:17:57,000
before we used it in here and this was to say that it persisted now,

418
00:17:57,000 --> 00:17:59,700
it's very confusing and see because static actually means different

419
00:17:59,700 --> 00:17:59,900
things.

420
00:18:00,000 --> 00:18:02,400
Depending on where you put it is not a particularly good.

421
00:18:02,400 --> 00:18:03,300
Keyword.

422
00:18:03,500 --> 00:18:06,200
And so one of the things that I actually like to do and I'll start

423
00:18:06,200 --> 00:18:09,700
doing this right now is to really define static into two different

424
00:18:09,700 --> 00:18:10,300
keywords.

425
00:18:10,400 --> 00:18:14,000
And I use the one that I actually mean so if I have a local variable

426
00:18:14,000 --> 00:18:15,600
that is local, persist.

427
00:18:16,200 --> 00:18:17,300
I will use that.

428
00:18:17,300 --> 00:18:22,600
And if I have a global variable I will usually do something like this.

429
00:18:24,500 --> 00:18:25,100
There you go.

430
00:18:25,400 --> 00:18:28,300
So let's call them that and let's actually put those in place.

431
00:18:28,300 --> 00:18:29,700
So instead of typing static.

432
00:18:29,800 --> 00:18:30,800
I just rename that.

433
00:18:30,900 --> 00:18:33,500
So you can see this is a locally persistent thing.

434
00:18:33,500 --> 00:18:37,000
It means that it stays around and it but it is still locally scoped in

435
00:18:37,000 --> 00:18:37,900
here, right?

436
00:18:38,300 --> 00:18:39,400
Whereas this thing right here.

437
00:18:39,400 --> 00:18:41,300
This is a global variable right?

438
00:18:41,500 --> 00:18:42,000
There you go.

439
00:18:42,200 --> 00:18:44,300
And now you can actually see what those are instead of looking at

440
00:18:44,300 --> 00:18:46,400
static because static means two different things.

441
00:18:46,700 --> 00:18:47,600
In this case.

442
00:18:47,600 --> 00:18:51,300
What static meant was it meant that this value would stay the same

443
00:18:51,500 --> 00:18:52,700
after it, exited the scope.

444
00:18:52,700 --> 00:18:54,200
So normally what would have happened is every time

445
00:18:54,400 --> 00:18:56,800
The scope it would have set it to whiteness again because it would

446
00:18:56,800 --> 00:18:59,000
have been a local variable if it looked like this.

447
00:18:59,100 --> 00:19:00,100
That's what it would do.

448
00:19:00,100 --> 00:19:02,700
But as soon as I declare it static, it means it actually allocate

449
00:19:02,700 --> 00:19:05,000
space to store it for now and ever.

450
00:19:05,000 --> 00:19:07,100
So it assigns whiteness to it the first time.

451
00:19:07,100 --> 00:19:10,100
But then immediately after that, it starts, assigning other things to

452
00:19:10,100 --> 00:19:13,300
it, and those things will persist the next time it comes to this code.

453
00:19:13,300 --> 00:19:15,400
It will not do this initializer.

454
00:19:16,200 --> 00:19:17,100
It will not do it.

455
00:19:17,400 --> 00:19:19,100
And so it will retain the value that it had.

456
00:19:19,100 --> 00:19:21,300
So when we wanted to do this kind of toggle where we toggle things

457
00:19:21,300 --> 00:19:24,100
back and forth, that was a really kind of convenient, way to do that.

458
00:19:24,300 --> 00:19:27,100
Now, we're going to rip that out because I hate using local persist.

459
00:19:27,100 --> 00:19:30,000
In fact, one of the reasons that I do this exactly.

460
00:19:30,800 --> 00:19:34,100
This way is so I can search for things like all the times when I use

461
00:19:34,100 --> 00:19:36,300
data to do local precise because I don't mind if there are Global

462
00:19:36,300 --> 00:19:36,600
variables.

463
00:19:36,600 --> 00:19:38,900
But I do mind if there are these and I like to be able to get rid of

464
00:19:38,900 --> 00:19:39,100
them.

465
00:19:39,300 --> 00:19:44,200
Now, if that weren't enough for you, in terms of confusion, the other

466
00:19:44,200 --> 00:19:49,200
thing that static does, it has one more meaning, what it does is it

467
00:19:49,200 --> 00:19:53,600
basically can define a function as being local to the file.

468
00:19:53,600 --> 00:19:54,000
That it's

469
00:19:54,600 --> 00:19:58,200
So we can be basically used to say don't allow this function be called

470
00:19:58,200 --> 00:20:00,600
from any other file other than the one that is in.

471
00:20:00,600 --> 00:20:03,900
And by file I actually mean translation unit and that's actually going

472
00:20:03,900 --> 00:20:04,700
to be important in the future.

473
00:20:04,700 --> 00:20:07,000
But for now you can just think of it as source file.

474
00:20:11,400 --> 00:20:12,400
But to be continued.

475
00:20:13,000 --> 00:20:16,800
And so usually what I will do is I will say something like internal or

476
00:20:16,800 --> 00:20:18,000
internal function, right?

477
00:20:18,000 --> 00:20:19,100
I usually just use internal.

478
00:20:19,400 --> 00:20:19,800
So.

479
00:20:20,100 --> 00:20:24,500
All right, that is our some pound Defiance just to change the word

480
00:20:24,500 --> 00:20:27,900
static into something that we can actually remember and use a little

481
00:20:27,900 --> 00:20:30,600
bit better and search for more importantly, when we need to clean up

482
00:20:30,600 --> 00:20:31,400
our code base.

483
00:20:31,900 --> 00:20:36,300
And so, what I'm going to do now is I'm going to say that well, oh, I

484
00:20:36,300 --> 00:20:38,700
forgot the thing that I was going to tell you as well there, which is

485
00:20:38,700 --> 00:20:39,000
that.

486
00:20:39,300 --> 00:20:41,100
The other thing that's interesting about static that it

487
00:20:41,200 --> 00:20:42,100
Is automatically for you.

488
00:20:42,100 --> 00:20:44,500
Is that if you use set up to declare Global variable, it is

489
00:20:44,500 --> 00:20:46,000
automatically initialized to zero.

490
00:20:46,000 --> 00:20:51,300
So if I were to type this or this, I would basically because false

491
00:20:51,300 --> 00:20:52,500
always evaluates to 0.

492
00:20:53,000 --> 00:20:56,400
Basically that is exactly the same as just not saying anything.

493
00:20:56,400 --> 00:20:58,900
I do not have to initialize to zero, it is initialized to Zero by

494
00:20:58,900 --> 00:20:59,400
default.

495
00:20:59,400 --> 00:20:59,800
If it

496
00:21:00,000 --> 00:21:00,600
Static.

497
00:21:00,600 --> 00:21:01,400
So there you go.

498
00:21:01,600 --> 00:21:02,000
Okay.

499
00:21:02,200 --> 00:21:06,900
So if we were to take a look at this, now we could go in here and

500
00:21:06,900 --> 00:21:07,300
oops.

501
00:21:09,800 --> 00:21:11,500
Static macro redefinition.

502
00:21:11,600 --> 00:21:12,400
Oh, duh.

503
00:21:12,600 --> 00:21:13,200
That's good.

504
00:21:14,200 --> 00:21:15,900
This is the sort of thing that happens on a stream.

505
00:21:15,900 --> 00:21:17,700
When you are too busy explaining things.

506
00:21:17,700 --> 00:21:19,100
You put your stuff in the wrong order.

507
00:21:19,500 --> 00:21:20,200
My apologies.

508
00:21:20,800 --> 00:21:21,200
Awesome.

509
00:21:22,000 --> 00:21:22,300
Yeah.

510
00:21:22,300 --> 00:21:22,800
There we go.

511
00:21:22,900 --> 00:21:24,300
So anyway, yeah, defines.

512
00:21:26,500 --> 00:21:26,800
Oh, man.

513
00:21:26,800 --> 00:21:27,700
It is a sick day.

514
00:21:27,900 --> 00:21:29,400
So defines always go in this order.

515
00:21:29,500 --> 00:21:30,700
That is just a completely yet.

516
00:21:30,700 --> 00:21:33,000
Hopefully, everyone knew that already because I think we covered those

517
00:21:33,000 --> 00:21:35,900
but just in case they didn't pound Define, since I already made the

518
00:21:35,900 --> 00:21:37,200
mistake, I might as well have to explain it.

519
00:21:37,200 --> 00:21:37,600
Again.

520
00:21:37,600 --> 00:21:38,800
That is my Penance pound.

521
00:21:38,800 --> 00:21:39,400
If I know he's

522
00:21:39,600 --> 00:21:43,700
Thing, you are trying to turn trying to define a new and then takes a

523
00:21:43,700 --> 00:21:44,500
thing you want to be.

524
00:21:44,500 --> 00:21:48,200
So it translates this into this and I had them reversed which is

525
00:21:48,200 --> 00:21:49,200
absolutely no good.

526
00:21:49,200 --> 00:21:49,900
So, there you go.

527
00:21:50,300 --> 00:21:50,900
All right.

528
00:21:50,900 --> 00:21:54,800
So if we take a look at this now and we run this application, we can

529
00:21:54,800 --> 00:21:58,300
close our application by hitting the close button and it closes just

530
00:21:58,300 --> 00:21:59,000
like we wanted to.

531
00:21:59,000 --> 00:21:59,900
And basically what will happen.

532
00:21:59,900 --> 00:22:03,600
There is it will set running equal to false and we will exit right

533
00:22:03,600 --> 00:22:03,800
out.

534
00:22:03,800 --> 00:22:07,000
And again, all we will do is basically let windows clean up everything

535
00:22:07,000 --> 00:22:09,400
for us because it's going to do that whether we like it.

536
00:22:09,500 --> 00:22:10,400
It or not.

537
00:22:12,500 --> 00:22:15,500
And if it's going to do that, then we might as well let it.

538
00:22:16,000 --> 00:22:19,800
So we now have fixed, the only problem that we actually had with our

539
00:22:19,800 --> 00:22:22,200
application, which is that you could not close it and you can close it

540
00:22:22,200 --> 00:22:22,500
now.

541
00:22:22,900 --> 00:22:23,700
Very exciting.

542
00:22:24,200 --> 00:22:27,700
We still have two things to handle here, activate a pin, WM size, but

543
00:22:27,700 --> 00:22:29,600
we are going to get to those in a second.

544
00:22:29,700 --> 00:22:32,100
But we really need to focus on now is the fact that we can't really

545
00:22:32,100 --> 00:22:33,400
paint anything meaningful.

546
00:22:33,800 --> 00:22:37,000
Now, basically, what we have to do here, when we did our paint, you'll

547
00:22:37,000 --> 00:22:40,400
notice that what we had to do was use GDI to paint things.

548
00:22:40,500 --> 00:22:43,400
And GDI is Windows as Graphics API.

549
00:22:43,600 --> 00:22:45,300
And like I said, we want to do everything from scratch.

550
00:22:45,300 --> 00:22:48,600
So we want to interface with GDI as little as possible.

551
00:22:48,600 --> 00:22:52,100
Basically, what we want it to do is take a bitmap that we have already

552
00:22:52,100 --> 00:22:55,400
rendered using our own code and all of our own techniques and just

553
00:22:55,400 --> 00:22:57,100
display it to our window.

554
00:22:57,800 --> 00:22:58,800
In order to do that.

555
00:22:58,900 --> 00:23:03,100
We have to basically ask Windows to allocate a bitmap buffer for us

556
00:23:03,100 --> 00:23:05,900
that we can write into something that's in a format, that is

557
00:23:05,900 --> 00:23:08,000
comfortable with us, handing back to it.

558
00:23:08,000 --> 00:23:10,400
Then we will right into it and tell it.

559
00:23:10,600 --> 00:23:12,500
To go ahead and display.

560
00:23:13,000 --> 00:23:19,400
Now, this involves a bunch of Windows stuff and I wrote down all of

561
00:23:19,400 --> 00:23:21,300
the things that I wanted to remember to tell you.

562
00:23:21,400 --> 00:23:23,800
So I'm going to open my notebook here and hope that I don't, they're

563
00:23:23,800 --> 00:23:25,700
kind of a little scatter shot in the notebook, but hopefully I'll

564
00:23:25,700 --> 00:23:27,500
remember them all as we go through it.

565
00:23:27,700 --> 00:23:30,100
So here's what we're going to do.

566
00:23:30,100 --> 00:23:32,000
Let me give you the big picture.

567
00:23:32,200 --> 00:23:35,800
Basically, what we are going to do is we are going to ask windows at

568
00:23:35,800 --> 00:23:36,300
some point.

569
00:23:36,300 --> 00:23:38,800
And I'm going to go ahead and just kind of type these out here as

570
00:23:38,800 --> 00:23:39,400
functions.

571
00:23:40,100 --> 00:23:40,400
We

572
00:23:40,500 --> 00:23:45,100
we are going to have a function that's basically called resized image

573
00:23:45,100 --> 00:23:45,600
section.

574
00:23:45,800 --> 00:23:48,500
And dip section is is the name.

575
00:23:48,500 --> 00:23:49,500
It's called d.

576
00:23:49,500 --> 00:23:51,800
I be device-independent bitmaps.

577
00:23:51,900 --> 00:23:55,900
That is actually the name that Windows uses to talk about things that

578
00:23:55,900 --> 00:23:59,800
you can write into as bitmaps that it can then display using GWT.

579
00:24:00,100 --> 00:24:00,300
Die.

580
00:24:03,700 --> 00:24:04,200
Okay.

581
00:24:06,000 --> 00:24:09,300
We are going to have a function that basically resizes, a dip section

582
00:24:09,500 --> 00:24:12,100
or initializes it if it's never been created before.

583
00:24:12,700 --> 00:24:16,200
And basically what that what we will do is every time we get a WM size

584
00:24:16,200 --> 00:24:19,200
message, which says that our Windows size has changed, we will

585
00:24:19,200 --> 00:24:20,300
basically call that.

586
00:24:20,300 --> 00:24:24,300
So we will basically force it to create an entirely new div section.

587
00:24:24,300 --> 00:24:25,500
That is the correct size.

588
00:24:25,600 --> 00:24:28,600
So it is the size of the entire window.

589
00:24:28,700 --> 00:24:35,600
Now we won't quite probably want to do exactly that because since our

590
00:24:35,800 --> 00:24:39,200
Game is going to be a 2-D game and we will be wanting to render

591
00:24:39,200 --> 00:24:41,100
potentially at fixed resolutions.

592
00:24:41,300 --> 00:24:44,600
What will eventually probably do is only pick a size.

593
00:24:44,600 --> 00:24:48,400
That is a reasonable size for our rendering that matches how we have

594
00:24:48,400 --> 00:24:51,900
done our source art, that also corresponds to roughly how big the

595
00:24:51,900 --> 00:24:55,900
window is, but for now, we can just go ahead and actually create it to

596
00:24:55,900 --> 00:24:56,800
be the full window size.

597
00:24:56,800 --> 00:24:58,900
And then, once our games render is up and running, we can start to

598
00:24:58,900 --> 00:25:01,700
think about those other things and control them.

599
00:25:01,700 --> 00:25:05,600
So, what we will do here is we will call resize.

600
00:25:05,700 --> 00:25:09,400
The obsession and of course, what we have to do in that call is we

601
00:25:09,400 --> 00:25:14,300
have to basically know what the actual size of the window is that we

602
00:25:14,300 --> 00:25:16,100
ended up with after WM size.

603
00:25:16,100 --> 00:25:19,200
And the way to do that is the thing called, get client wrecked.

604
00:25:19,200 --> 00:25:22,100
Now, get client wrecked is a very simple function.

605
00:25:22,300 --> 00:25:25,900
If you remember we had a, we had some experience with wrecked before,

606
00:25:26,100 --> 00:25:27,000
it was right here.

607
00:25:27,000 --> 00:25:31,100
Basically, it's a thing, which basically says, here is a left a top, a

608
00:25:31,100 --> 00:25:32,400
bottom and a right.

609
00:25:32,700 --> 00:25:35,300
It is, it is a lot like something you might see in.

610
00:25:35,800 --> 00:25:37,100
Smell like in CSS.

611
00:25:37,300 --> 00:25:40,700
It is basically defines a rectangle on the screen and Loops.

612
00:25:40,700 --> 00:25:42,000
That's not where I want to bet it all.

613
00:25:42,300 --> 00:25:45,300
And basically, what we're going to do is we're just going to go ahead

614
00:25:45,300 --> 00:25:49,200
and grab the rectangle for our window.

615
00:25:49,400 --> 00:25:53,400
And the reason that it's called, get client wrecked instead of

616
00:25:53,500 --> 00:25:55,100
something else, like get window wrecked.

617
00:25:55,100 --> 00:25:58,900
Which also, ye also exist is this just gives us the part of our window

618
00:25:58,900 --> 00:26:02,300
that we actually can draw into because if you look at a window, so for

619
00:26:02,300 --> 00:26:05,600
example, let's say I go take note pad over here, you can

620
00:26:05,700 --> 00:26:09,000
See that the actual part you can draw into is like in here and then

621
00:26:09,000 --> 00:26:12,200
there's this like border frame thing and that's actually all being

622
00:26:12,200 --> 00:26:14,000
handled by Windows.

623
00:26:14,200 --> 00:26:14,700
Right?

624
00:26:14,800 --> 00:26:17,400
So there's not a whole lot we want, we don't want to touch any of

625
00:26:17,400 --> 00:26:17,700
that.

626
00:26:17,800 --> 00:26:20,500
So we just want to know the size of the part that we can actually draw

627
00:26:20,500 --> 00:26:21,000
it too.

628
00:26:21,300 --> 00:26:21,900
Right?

629
00:26:22,200 --> 00:26:25,000
And now if we were full screen when we go, you know, because we're

630
00:26:25,000 --> 00:26:27,500
going to want to go full screen eventually when we're full screen that

631
00:26:27,500 --> 00:26:30,000
doesn't matter because there is no border around the wind or anything

632
00:26:30,000 --> 00:26:30,300
like that.

633
00:26:30,300 --> 00:26:33,400
But until then, when we're using one that has a little bored of you

634
00:26:33,400 --> 00:26:35,400
can resize, we have to take account for that.

635
00:26:37,700 --> 00:26:40,400
Or I should say take that into account grammar.

636
00:26:40,700 --> 00:26:44,700
Alright, so we are going to ask for the rectangle.

637
00:26:45,200 --> 00:26:45,600
You can see.

638
00:26:45,600 --> 00:26:47,300
It takes an LP wrecked.

639
00:26:47,300 --> 00:26:49,000
And like I said, long pointer to erect.

640
00:26:49,000 --> 00:26:51,400
That's the Hungarian notation coming back there.

641
00:26:51,800 --> 00:26:54,400
So we have our window wrecked or I should say.

642
00:26:54,400 --> 00:26:57,100
Maybe our client Rex in some indirect, is technically something else.

643
00:26:57,100 --> 00:26:58,400
In Windows is the whole window.

644
00:26:58,400 --> 00:26:59,900
Not just the area, you can draw.

645
00:27:00,500 --> 00:27:04,000
I'm going to go ahead and get that out and that will give us just like

646
00:27:04,000 --> 00:27:07,600
we did down here that will give us our width and our height.

647
00:27:07,700 --> 00:27:11,600
So basically we can just subtract the right from the left and the top

648
00:27:11,600 --> 00:27:12,600
from the bottom.

649
00:27:12,600 --> 00:27:15,400
Sorry, the left from the right and the top from the bottom saying that

650
00:27:15,400 --> 00:27:15,900
correctly.

651
00:27:16,300 --> 00:27:19,100
We are going to go ahead and do that to produce the width and the

652
00:27:19,100 --> 00:27:21,800
height of the buffer that we need to fill the whole window.

653
00:27:21,800 --> 00:27:24,800
That's basically how big we will need it to be.

654
00:27:24,800 --> 00:27:30,000
So we're going to go ahead and call oversized dip section and choose

655
00:27:30,400 --> 00:27:32,000
We are going to pass it that within that height.

656
00:27:32,000 --> 00:27:35,700
So in here, we are going to get a width and a height.

657
00:27:35,800 --> 00:27:40,700
And we will basically need to build that buffer using Windows to to

658
00:27:40,700 --> 00:27:42,300
give us a buffer that we can draw into.

659
00:27:42,500 --> 00:27:46,800
Then what we will do once we have our dip section size properly.

660
00:27:47,200 --> 00:27:50,500
We will actually in paint instead of calling this.

661
00:27:50,500 --> 00:27:51,300
This Pat.

662
00:27:51,300 --> 00:27:54,600
But thing here, which is not really anything that we want to do.

663
00:27:54,800 --> 00:27:56,900
We will do the begin paint.

664
00:27:56,900 --> 00:28:00,000
And we will use the rectangle that it passes us to basically.

665
00:28:00,100 --> 00:28:04,800
We update that rectangle with whatever the contents of our buffer was.

666
00:28:04,800 --> 00:28:08,300
So we're basically going to create a buffer in WM size because we

667
00:28:08,300 --> 00:28:10,300
always get that anytime the size of the window changes.

668
00:28:10,300 --> 00:28:11,400
We're going to create that buffer.

669
00:28:11,500 --> 00:28:13,600
We're going to draw to that buffer during our game loop.

670
00:28:13,600 --> 00:28:15,900
We're going to keep drawing whatever the state of the game is into

671
00:28:15,900 --> 00:28:16,400
that buffer.

672
00:28:16,600 --> 00:28:19,400
And then anytime we need to Windows need this to repaint.

673
00:28:19,500 --> 00:28:22,300
We're going to blip from that buffer into the window where base going

674
00:28:22,300 --> 00:28:22,900
to copy.

675
00:28:22,900 --> 00:28:25,900
What's in our buffer or rather going to ask Windows to do the copy.

676
00:28:25,900 --> 00:28:28,100
Since it's the only thing that can actually write to the screen like

677
00:28:28,100 --> 00:28:28,500
that.

678
00:28:28,500 --> 00:28:29,900
We're going to ask it to copy.

679
00:28:30,100 --> 00:28:33,500
From our buffer into the space occupied by our window.

680
00:28:33,500 --> 00:28:38,600
Now we will also be forcing redraws at, say, 30 frames a second.

681
00:28:38,600 --> 00:28:39,500
In order to do animation.

682
00:28:39,500 --> 00:28:41,000
We will be for splitting.

683
00:28:41,300 --> 00:28:45,200
So we will, we will not only be painting inside WM paint, which is

684
00:28:45,200 --> 00:28:46,500
just a message we get when Windows.

685
00:28:46,500 --> 00:28:48,600
Think some part of our window is dirty, like it went off the screen

686
00:28:48,600 --> 00:28:51,500
and came back or some other window was obscuring, it and went away.

687
00:28:51,700 --> 00:28:54,700
So we won't only be painting in paint, but it's one of the places

688
00:28:54,700 --> 00:28:58,000
we'll paint, okay.

689
00:29:00,000 --> 00:29:00,800
How do we do that?

690
00:29:01,000 --> 00:29:03,100
Well, well, you know what?

691
00:29:03,100 --> 00:29:04,600
I'm gonna make a sub function first.

692
00:29:04,800 --> 00:29:08,100
So, inside here in between our begin paint and our end paint.

693
00:29:08,100 --> 00:29:13,700
I am going to go ahead and say, like update window like this and

694
00:29:13,900 --> 00:29:16,500
actually, that I believe is actually a reserve Windows thing.

695
00:29:16,500 --> 00:29:19,800
So I probably can't call it update window, but that's actually okay.

696
00:29:19,800 --> 00:29:22,000
Because you know, what I like to do normally is I actually like to

697
00:29:22,000 --> 00:29:26,600
prefix my stuff with win32 so that the platform layer it.

698
00:29:26,600 --> 00:29:27,700
So it's clear.

699
00:29:27,900 --> 00:29:28,400
What is wind.

700
00:29:28,500 --> 00:29:30,600
32 stuff and what isn't?

701
00:29:30,700 --> 00:29:31,500
So that's okay.

702
00:29:31,700 --> 00:29:34,300
We'll just call it that and then our names won't collide with Windows

703
00:29:34,300 --> 00:29:34,800
names.

704
00:29:34,900 --> 00:29:36,800
Windows has a lot of names to collide with.

705
00:29:37,100 --> 00:29:37,600
Okay.

706
00:29:37,800 --> 00:29:42,100
So when we basically get our X Y width and height here out of the

707
00:29:42,100 --> 00:29:45,900
rectangle that Windows after us to repaint, we will go ahead and pass

708
00:29:45,900 --> 00:29:49,200
them like this to our update function.

709
00:29:49,500 --> 00:29:52,300
And of course, since now, we actually will need the window handle

710
00:29:52,300 --> 00:29:54,300
because we're going to actually get to the window.

711
00:29:54,300 --> 00:29:56,900
We're going to pass it that window handle as well so they can update

712
00:29:56,900 --> 00:29:57,300
it.

713
00:29:57,300 --> 00:29:58,500
And then we are going to go ahead.

714
00:29:58,600 --> 00:29:59,800
Head and erase this.

715
00:30:00,000 --> 00:30:00,500
Stuff here.

716
00:30:00,500 --> 00:30:02,300
So that got rid of our locally persist thing.

717
00:30:02,300 --> 00:30:04,900
Which, like I said, I don't like and I wanted to get rid of.

718
00:30:05,000 --> 00:30:08,400
So, we're going to now move this up here into an actual function.

719
00:30:09,400 --> 00:30:11,900
The function takes an H wind, right?

720
00:30:11,900 --> 00:30:12,700
The window handle.

721
00:30:12,700 --> 00:30:16,900
It takes the X and the Y that are going to be the upper corner of that

722
00:30:16,900 --> 00:30:17,200
thing.

723
00:30:17,200 --> 00:30:20,600
I prefer X Y, width and height, instead of the top left bottom thing.

724
00:30:20,900 --> 00:30:22,500
That's just that's just me.

725
00:30:22,900 --> 00:30:25,300
So, I don't use the naming convention that Windows uses where it's

726
00:30:25,300 --> 00:30:26,900
right left top bottom cetera.

727
00:30:26,900 --> 00:30:28,200
I use an X Y width and height.

728
00:30:28,200 --> 00:30:29,800
I just think it's a little clearer for me.

729
00:30:30,000 --> 00:30:31,600
Me, it's easier for me to remember.

730
00:30:32,100 --> 00:30:34,000
And here we are going to update it.

731
00:30:34,000 --> 00:30:38,400
So what we actually want to do here is we are just going to call a

732
00:30:38,400 --> 00:30:42,800
function that is called, I believe.

733
00:30:42,900 --> 00:30:44,000
Where is it?

734
00:30:44,000 --> 00:30:44,500
Let's see.

735
00:30:44,500 --> 00:30:47,100
So jib section.

736
00:30:47,100 --> 00:30:49,300
Can we get a dip section?

737
00:30:49,300 --> 00:30:50,300
There we go.

738
00:30:51,900 --> 00:30:53,400
Guess we should start by creating one.

739
00:30:54,100 --> 00:30:57,200
So we are going to have to call create David section to get it.

740
00:30:57,300 --> 00:30:59,200
So we might, as well start with that as well.

741
00:30:59,200 --> 00:30:59,800
We're going to need.

742
00:31:00,000 --> 00:31:03,700
Create them section to ask Windows to make us one of these bitmaps and

743
00:31:03,700 --> 00:31:06,100
we are also going to need the function to blit it.

744
00:31:06,500 --> 00:31:07,700
Which what is the best way?

745
00:31:07,700 --> 00:31:11,500
There's a couple ways or stretch, TI B to device, but that actually

746
00:31:11,500 --> 00:31:12,700
changes the scale.

747
00:31:14,300 --> 00:31:15,500
Hmm.

748
00:31:16,300 --> 00:31:17,600
Which one did I use?

749
00:31:17,600 --> 00:31:17,800
Turn.

750
00:31:17,800 --> 00:31:18,500
Remember which one?

751
00:31:18,500 --> 00:31:20,400
I normally use, I guess.

752
00:31:20,400 --> 00:31:21,400
Stretch stretch.

753
00:31:21,800 --> 00:31:23,300
Well, it would be the right thing to use.

754
00:31:24,000 --> 00:31:25,100
So this is a quandary.

755
00:31:25,300 --> 00:31:29,600
So this is the one I was thinking of using stretch, TI b 2.

756
00:31:29,900 --> 00:31:30,400
Vice.

757
00:31:32,300 --> 00:31:32,800
Let's see.

758
00:31:32,900 --> 00:31:33,200
Where is it?

759
00:31:33,200 --> 00:31:34,400
I guess it's not even to device.

760
00:31:34,400 --> 00:31:35,200
I think it's just stretched.

761
00:31:35,200 --> 00:31:35,800
GI B.

762
00:31:36,500 --> 00:31:37,200
Yeah, there it is.

763
00:31:37,500 --> 00:31:38,500
Stretch GI B.

764
00:31:38,600 --> 00:31:41,000
So this is the one I was thinking of, and I'll tell you what, that one

765
00:31:41,000 --> 00:31:43,100
is and then we can maybe think about whether that's actually what we

766
00:31:43,100 --> 00:31:43,600
want.

767
00:31:43,600 --> 00:31:47,200
So with this one basically does is this one takes our dip section.

768
00:31:47,200 --> 00:31:49,100
The thing that I was taking we're going to we're going to create our

769
00:31:49,100 --> 00:31:53,000
device-independent bitmaps section and it Blitz it but it allows us to

770
00:31:53,000 --> 00:31:55,700
scale it at the time and I was thinking that would be a good idea

771
00:31:55,700 --> 00:31:59,200
because then we could always render to the same size and then we would

772
00:31:59,200 --> 00:32:01,300
just, you know, scale it up to the size of

773
00:32:01,400 --> 00:32:02,900
Window and I don't know.

774
00:32:02,900 --> 00:32:04,400
So that maybe you know what?

775
00:32:04,400 --> 00:32:06,100
I think, that's probably what we're going to want to use in the end.

776
00:32:06,100 --> 00:32:09,100
So I'm going to just go ahead and use that one now and allow Windows

777
00:32:09,100 --> 00:32:10,600
to do some scaling in there.

778
00:32:10,800 --> 00:32:13,000
If we want it to in the future.

779
00:32:13,100 --> 00:32:14,500
I'm going to use another kill rectangle.

780
00:32:14,500 --> 00:32:18,100
People like that in the previous string, kill rectangle, is fun thing,

781
00:32:18,200 --> 00:32:20,300
get rid of those at those specifiers.

782
00:32:20,400 --> 00:32:23,700
Okay, so I'm going to, I'm going to actually start with that because I

783
00:32:23,700 --> 00:32:25,500
think that's what we're going to want to use in the end because

784
00:32:25,500 --> 00:32:29,600
basically like I said, if we decide to use a fixed size buffer or a

785
00:32:29,600 --> 00:32:31,200
couple different fixed size buffer,

786
00:32:31,300 --> 00:32:33,600
Us to do our rendering and we want Windows kind of blow it up to the

787
00:32:33,600 --> 00:32:36,100
size of window or Shrink it down to the size of the window, depending

788
00:32:36,100 --> 00:32:36,800
on the circumstance.

789
00:32:36,800 --> 00:32:37,900
We're going to need stress GI B.

790
00:32:37,900 --> 00:32:39,300
So, I think I'm just going to go with that.

791
00:32:41,300 --> 00:32:42,900
And it turns out to be a bad call later.

792
00:32:43,100 --> 00:32:44,200
We will change it.

793
00:32:44,500 --> 00:32:45,100
All right.

794
00:32:45,600 --> 00:32:49,200
So all this function does, it's very very straightforward.

795
00:32:49,200 --> 00:32:52,000
It is a rectangle to rectangle copy and I'm going to explain

796
00:32:52,000 --> 00:32:53,600
coordinate systems a little bit later on.

797
00:32:54,100 --> 00:32:56,500
But, you know, basically for right now, if you could think about two

798
00:32:56,500 --> 00:32:59,600
rectangles, we're just going to copy one rectangle to the other.

799
00:33:00,200 --> 00:33:02,800
And in this particular case, the rectangles can be different sizes.

800
00:33:02,800 --> 00:33:06,400
So we're going to take a rectangle of one size in one buffer and copy

801
00:33:06,400 --> 00:33:10,000
it to rectangle of another size in another buffer doing scaling along

802
00:33:10,000 --> 00:33:11,400
the way if we need to.

803
00:33:11,900 --> 00:33:12,800
Oh, you know what?

804
00:33:12,800 --> 00:33:14,700
And here's one thing that I forgot.

805
00:33:14,700 --> 00:33:15,900
We don't really want the window here.

806
00:33:15,900 --> 00:33:18,800
Do we, we want that device context because we already had the device

807
00:33:18,800 --> 00:33:20,200
context right here.

808
00:33:20,300 --> 00:33:22,800
So, rather than having to get the device context from the window,

809
00:33:22,800 --> 00:33:23,600
which we could do.

810
00:33:24,000 --> 00:33:26,200
Let's just go ahead and pass that in there because that's the thing

811
00:33:26,200 --> 00:33:28,100
that we actually have to pass two windows.

812
00:33:28,200 --> 00:33:28,800
So there we go.

813
00:33:28,800 --> 00:33:29,400
There's our device.

814
00:33:30,000 --> 00:33:30,200
East.

815
00:33:30,400 --> 00:33:36,100
So we will go ahead and put our device context in their first

816
00:33:36,100 --> 00:33:36,300
parameter.

817
00:33:36,300 --> 00:33:38,700
Now, we need the destination rectangle.

818
00:33:38,700 --> 00:33:40,600
So the destination X, the destination.

819
00:33:40,600 --> 00:33:44,700
Why the destination with and the destination height and basically that

820
00:33:44,700 --> 00:33:49,600
is some subsection of our window, so we are going to pass it.

821
00:33:49,600 --> 00:33:53,300
Basically the exact things that we got from our see paint.

822
00:33:53,300 --> 00:33:57,200
So basically this is the rectangle that Windows wants us to fill,

823
00:33:57,200 --> 00:33:57,600
right?

824
00:33:57,600 --> 00:34:00,400
That is the the part of the window that needs.

825
00:34:00,500 --> 00:34:01,600
To get redrawn.

826
00:34:01,600 --> 00:34:05,800
So we're going to blit to that, basically, right then we basically

827
00:34:05,800 --> 00:34:10,500
have our source here, our source, r x, y width, and height that we are

828
00:34:10,500 --> 00:34:11,300
bleeding from.

829
00:34:11,600 --> 00:34:14,400
And since we are going to start by just making everything exactly.

830
00:34:14,400 --> 00:34:15,699
The same size are back, buffer.

831
00:34:15,699 --> 00:34:16,900
We the same size as our window.

832
00:34:17,199 --> 00:34:18,500
This is exactly the same.

833
00:34:18,500 --> 00:34:21,000
We are basically having two buffers.

834
00:34:21,000 --> 00:34:23,699
One is our window that we're drawing two and one is the the buffer

835
00:34:23,699 --> 00:34:27,400
that we are actually drawing our stuff into with our renderer and we

836
00:34:27,400 --> 00:34:30,300
are just going to copy one from the other, exactly the same.

837
00:34:30,500 --> 00:34:34,199
Then we have to pass basically a pointer to the b and a pointer to the

838
00:34:34,199 --> 00:34:35,100
bitmap info.

839
00:34:35,199 --> 00:34:36,600
You have to do some extra stuff here.

840
00:34:36,699 --> 00:34:38,800
You don't know what any of these things are yet because we haven't

841
00:34:38,800 --> 00:34:41,199
talked about them, and we're going to talk them about them in a minute

842
00:34:41,300 --> 00:34:43,900
when we actually create the, the resize dip section.

843
00:34:43,900 --> 00:34:45,800
But for now, I just wanna look at these two additional parameters that

844
00:34:45,800 --> 00:34:48,500
control how stretch TI B work.

845
00:34:48,600 --> 00:34:49,800
So, let's take a look at msdn.

846
00:34:49,800 --> 00:34:50,900
Again, go down.

847
00:34:50,900 --> 00:34:51,300
Here.

848
00:34:52,000 --> 00:34:53,800
You can see that.

849
00:34:53,800 --> 00:34:59,500
Basically the usage tells you what kind of a picture, this is that you

850
00:34:59,500 --> 00:34:59,700
have done.

851
00:34:59,700 --> 00:35:00,300
What kind of a buffer?

852
00:35:00,400 --> 00:35:01,500
Offer you have made.

853
00:35:01,500 --> 00:35:02,900
There are two kinds of buffers.

854
00:35:02,900 --> 00:35:06,600
One is palletized and one is RGB now.

855
00:35:09,700 --> 00:35:13,200
You all know what RGB colors are probably because you have all seen

856
00:35:13,200 --> 00:35:15,400
them before in a paint package or something similar.

857
00:35:15,600 --> 00:35:17,900
I'm going to bring up color cup which by the way, is a great for

858
00:35:17,900 --> 00:35:19,800
utility that everyone should have in their machine.

859
00:35:19,800 --> 00:35:23,400
I absolutely love it, but I'm just bringing it up because these little

860
00:35:23,400 --> 00:35:27,500
RGB things or this little guy that you see in Windows all the time or

861
00:35:27,500 --> 00:35:30,600
any kind of Color Picker, like this just shows an RGB color, which is

862
00:35:30,600 --> 00:35:33,300
basically three values from 0 to 255.

863
00:35:33,300 --> 00:35:36,400
That say, how much red, how much green and how much blue are in a

864
00:35:36,400 --> 00:35:37,400
particular color.

865
00:35:37,500 --> 00:35:40,000
We'll talk a lot more about colors much later in the series.

866
00:35:40,000 --> 00:35:42,300
But for now, you are all very familiar with that.

867
00:35:42,300 --> 00:35:43,900
Well, that is what this is.

868
00:35:44,000 --> 00:35:46,700
So if you want to make a back buffer, that is basically color

869
00:35:46,700 --> 00:35:51,400
specified in that fashion where every individual pixel has an RGB

870
00:35:51,400 --> 00:35:55,000
value, then you want to pass this and that is what we're going to do.

871
00:35:55,300 --> 00:35:57,500
So we are going to put that in there.

872
00:35:58,000 --> 00:35:58,700
There we go.

873
00:35:59,300 --> 00:35:59,700
Okay.

874
00:36:00,000 --> 00:36:02,600
But I will quickly say what this is.

875
00:36:02,700 --> 00:36:03,800
What is a pallet?

876
00:36:03,900 --> 00:36:06,900
A palette is if you would like to be more indirect.

877
00:36:07,000 --> 00:36:12,100
So let's say instead you would like to only use say 16 colors total 0

878
00:36:12,100 --> 00:36:14,100
1, 2 3, 4 5 6 and so on.

879
00:36:14,100 --> 00:36:17,400
And so what you want to write into your buffer, for example are just

880
00:36:17,400 --> 00:36:22,400
numbers that correspond to some color kind of like Pantone matching or

881
00:36:22,400 --> 00:36:25,400
basically some paint chips where you've enabled them 0 through

882
00:36:25,400 --> 00:36:26,000
something.

883
00:36:26,100 --> 00:36:28,900
In this case, 16 bits of 0 through 65,000.

884
00:36:30,300 --> 00:36:36,300
Basically, you then have a palette which is specified in RGB per

885
00:36:36,300 --> 00:36:36,900
color.

886
00:36:36,900 --> 00:36:38,200
So / index color.

887
00:36:38,200 --> 00:36:40,900
So basically it's in directed one time.

888
00:36:41,000 --> 00:36:43,800
So you're basically saying the things that I actually put in this

889
00:36:43,800 --> 00:36:47,600
buffer just refer out essentially to another buffer that will tell you

890
00:36:47,600 --> 00:36:48,200
what the color is.

891
00:36:48,200 --> 00:36:51,600
And this was done back in the day to make things smaller.

892
00:36:51,600 --> 00:36:54,500
It was, it's basically a way of compressing, the size of the buffer

893
00:36:54,600 --> 00:36:59,800
because since an RGB value is, at least three 8-bit values one.

894
00:37:00,000 --> 00:37:02,000
R14 G14 be, that's 24 bits.

895
00:37:02,400 --> 00:37:06,600
You could get away with less by using an 8-bit or 16-bit palletize

896
00:37:06,600 --> 00:37:10,000
mode where you basically just use say eight bits to say what color

897
00:37:10,000 --> 00:37:10,400
you're going to do.

898
00:37:10,400 --> 00:37:13,700
And then those eight bits told you to look up in a table of colors

899
00:37:13,700 --> 00:37:15,200
that were specified as our GPS.

900
00:37:15,300 --> 00:37:17,700
You don't have to worry about that at all because those days are kind

901
00:37:17,700 --> 00:37:18,300
of long gone.

902
00:37:18,300 --> 00:37:20,900
Although they sometimes come back when you're doing things like

903
00:37:20,900 --> 00:37:21,700
texture compression.

904
00:37:23,800 --> 00:37:26,000
But fortunately for us, we don't have to deal with that.

905
00:37:26,000 --> 00:37:31,600
We can actually do direct RGB writing into our buffer, which is much,

906
00:37:31,600 --> 00:37:32,800
much more convenient.

907
00:37:32,800 --> 00:37:37,100
So, finally, we have a raster, operator, raster Opera.

908
00:37:37,200 --> 00:37:44,000
Okay, too sick to talk today, raster operation code and the raster

909
00:37:44,000 --> 00:37:48,100
operation code, is something that says what kind of bitwise operations

910
00:37:48,100 --> 00:37:48,700
you want to do.

911
00:37:48,700 --> 00:37:48,900
Now.

912
00:37:48,900 --> 00:37:50,900
If you remember from the intro stream, there are a lot of bitwise

913
00:37:50,900 --> 00:37:53,700
operations, things like X, or things like and those sorts of

914
00:37:53,800 --> 00:37:54,200
Stuff.

915
00:37:54,300 --> 00:37:57,700
And if we go look where it says there are documented in bit blit, you

916
00:37:57,700 --> 00:38:01,300
can see those here and basically, all this does is it says what to

917
00:38:01,300 --> 00:38:04,200
actually do to that the destination?

918
00:38:04,200 --> 00:38:07,400
Now all we wanted to do, we didn't want it to do any fancy bit

919
00:38:07,400 --> 00:38:07,800
operations.

920
00:38:07,800 --> 00:38:10,400
We just want to basically overwrite the destination with the source.

921
00:38:10,400 --> 00:38:11,300
We just want to copy.

922
00:38:11,600 --> 00:38:14,400
And so what we're going to do is actually just use Source copy, which

923
00:38:14,400 --> 00:38:16,200
is defined exactly as that.

924
00:38:16,200 --> 00:38:20,200
It is a numerical code, that tells stretch bullet, to go ahead and

925
00:38:20,200 --> 00:38:21,800
copy the thing directly.

926
00:38:21,900 --> 00:38:22,400
There you go.

927
00:38:22,900 --> 00:38:23,600
So that's really all

928
00:38:23,700 --> 00:38:25,300
All we're going to do with stretch.

929
00:38:25,300 --> 00:38:27,300
Put that will update our window for us.

930
00:38:27,300 --> 00:38:30,500
This will get a little more complicated as we start to handle other

931
00:38:30,500 --> 00:38:31,000
things.

932
00:38:31,100 --> 00:38:32,600
But all we really need to do now.

933
00:38:32,700 --> 00:38:36,200
If we want to update our window, as we've got to find a place to get

934
00:38:36,200 --> 00:38:38,000
these bits and the bitmap info from.

935
00:38:38,000 --> 00:38:40,600
And the way we're going to do that is through create dip section.

936
00:38:40,600 --> 00:38:42,700
This is the part where you actually create the back buffer because

937
00:38:42,700 --> 00:38:45,800
obviously to put that back buffer to the window.

938
00:38:45,800 --> 00:38:48,900
We have to actually make it in the first place and you can see the

939
00:38:48,900 --> 00:38:50,500
things that are involved here.

940
00:38:50,500 --> 00:38:50,800
First.

941
00:38:50,800 --> 00:38:53,600
There is a bitmap info structure and we'll talk about that.

942
00:38:53,700 --> 00:38:57,900
That is there is a h bitmap, which is a handle to a bitmap that it

943
00:38:57,900 --> 00:38:58,500
returns to us.

944
00:38:58,500 --> 00:38:59,600
So this is

945
00:39:00,300 --> 00:39:04,000
Our bitmap handle that is coming, back to us from created section.

946
00:39:04,000 --> 00:39:05,700
Thank you, creative section for that.

947
00:39:06,100 --> 00:39:09,900
We are going to need a device context, but you know what that device

948
00:39:09,900 --> 00:39:11,300
context is not going to come for?

949
00:39:11,300 --> 00:39:12,400
Where you think it's going to come from.

950
00:39:12,500 --> 00:39:14,500
It's going to be a little bit bizarre, but we'll get to that.

951
00:39:14,600 --> 00:39:16,700
And then we're going to have to look at a couple of these other things

952
00:39:16,700 --> 00:39:17,100
here.

953
00:39:17,500 --> 00:39:19,800
We have, we have some other things that we've got to specify.

954
00:39:20,100 --> 00:39:24,900
So let's go to the msdn and check out what our options are create did

955
00:39:25,100 --> 00:39:25,800
section.

956
00:39:28,000 --> 00:39:30,600
Okay, here we go and create tip section.

957
00:39:30,600 --> 00:39:33,100
We have to get a device context and I'll talk a little about, but

958
00:39:33,100 --> 00:39:34,000
we're going to get that in a second.

959
00:39:34,000 --> 00:39:36,200
We have to passepartout a bitmap info.

960
00:39:36,300 --> 00:39:39,600
And that bitmap info is going to be something that we fill out.

961
00:39:39,600 --> 00:39:41,100
So this is an easy thing to do.

962
00:39:41,100 --> 00:39:44,200
Will, just go ahead and pass that and we'll fill this out in a second.

963
00:39:46,400 --> 00:39:47,000
There we go.

964
00:39:47,100 --> 00:39:48,600
The, I usage parameter.

965
00:39:48,800 --> 00:39:50,200
So what is I usage again?

966
00:39:50,300 --> 00:39:51,800
This is the exact same thing.

967
00:39:51,800 --> 00:39:54,400
That's asking us when we created it wants to know is it going to be

968
00:39:54,400 --> 00:39:55,100
palletized?

969
00:39:55,100 --> 00:39:56,300
Or is it going to be RGB?

970
00:39:56,300 --> 00:39:57,600
And since we're bleeding in RGB?

971
00:39:57,800 --> 00:39:59,100
Use RGB and stretch lit.

972
00:39:59,100 --> 00:40:02,600
We need to use RGB here as well because that is what we wanted.

973
00:40:03,100 --> 00:40:03,600
Right?

974
00:40:04,000 --> 00:40:04,200
Then.

975
00:40:04,200 --> 00:40:05,900
We have a pointer to the bits.

976
00:40:06,100 --> 00:40:08,800
And so, this is actually the big moment.

977
00:40:08,900 --> 00:40:10,900
This is the actual memory.

978
00:40:11,300 --> 00:40:15,300
This is the bitmap memory that we are going to receive back from

979
00:40:15,300 --> 00:40:18,500
Windows that we can finally drawn to with our own renderer.

980
00:40:18,500 --> 00:40:19,900
That is the big thing that we wanted.

981
00:40:19,900 --> 00:40:22,300
That's what we really wanted out of this whole platform layer.

982
00:40:22,500 --> 00:40:25,700
And that's what we're about to get finally after two days.

983
00:40:25,900 --> 00:40:27,600
So the H section

984
00:40:27,700 --> 00:40:31,700
Ian, excuse me is basically something that's used.

985
00:40:31,700 --> 00:40:34,600
If you want to do something Fancy with your dip section, that's sort

986
00:40:34,600 --> 00:40:38,500
of doing it out of core and writing it into I guess into a file or

987
00:40:38,500 --> 00:40:40,900
something because we don't care about any about this stuff.

988
00:40:40,900 --> 00:40:42,800
We just want to allocate one in memory for us.

989
00:40:43,100 --> 00:40:45,500
We don't want to back it with a file or do any of this stuff.

990
00:40:46,000 --> 00:40:47,500
I don't actually know if that I don't actually know.

991
00:40:47,500 --> 00:40:50,200
If it does back with a file, it may just actually use some kind of

992
00:40:50,200 --> 00:40:51,100
memory mapping for it.

993
00:40:51,100 --> 00:40:51,400
I don't know.

994
00:40:51,400 --> 00:40:54,400
I've never actually used this parameter so I don't care at all about

995
00:40:54,400 --> 00:40:56,900
that and we're not even spend any time on it because time is of the

996
00:40:56,900 --> 00:40:57,400
essence.

997
00:40:57,800 --> 00:40:58,500
On this dream.

998
00:40:59,100 --> 00:41:03,900
And finally, we have an offset which is referencing this thing.

999
00:41:04,000 --> 00:41:07,100
So since we know that we are not passing this thing and it's ignored,

1000
00:41:07,100 --> 00:41:10,000
if this is no, we can ignore that as well.

1001
00:41:10,000 --> 00:41:11,800
So there is our creative section call.

1002
00:41:11,900 --> 00:41:14,400
It will create the tip section for us and pretty much that does

1003
00:41:14,400 --> 00:41:15,200
everything we want to do.

1004
00:41:15,200 --> 00:41:19,400
Except we did not fill out the bitmap info that we are passing to it.

1005
00:41:19,400 --> 00:41:21,900
So what on Earth is a bitmap info?

1006
00:41:21,900 --> 00:41:25,100
Again, this is all the vagaries of programming on Windows.

1007
00:41:25,300 --> 00:41:27,400
It's a bit esoteric and

1008
00:41:27,700 --> 00:41:28,900
I don't blame you for going.

1009
00:41:29,100 --> 00:41:30,600
What on Earth is going on here.

1010
00:41:30,800 --> 00:41:31,700
It's just the way it goes.

1011
00:41:34,100 --> 00:41:35,400
Here we are on the bitmap info.

1012
00:41:36,700 --> 00:41:38,900
So we have a bitmap info header.

1013
00:41:38,900 --> 00:41:42,300
It's called dot BMI header and we have an RGB quad, which is BMI

1014
00:41:42,300 --> 00:41:42,800
colors.

1015
00:41:42,900 --> 00:41:43,100
Now.

1016
00:41:43,100 --> 00:41:45,100
This is a little syntax that's used in Old School.

1017
00:41:45,100 --> 00:41:45,400
See.

1018
00:41:45,600 --> 00:41:49,200
And I'm basically, if you define an array, at the end of something, it

1019
00:41:49,200 --> 00:41:52,700
allows you to make it variable length, you can basically keep on going

1020
00:41:52,700 --> 00:41:52,900
off.

1021
00:41:52,900 --> 00:41:55,300
The end of this thing, you know, access.

1022
00:41:55,300 --> 00:41:59,000
Otherwise, I'm not even going to begin to talk about that, and how

1023
00:41:59,000 --> 00:41:59,800
that works or anything like that.

1024
00:42:00,400 --> 00:42:01,800
Because we don't care about that right now.

1025
00:42:01,800 --> 00:42:05,300
And I don't think you should really, I, don't really recommend ever

1026
00:42:05,300 --> 00:42:06,200
doing it either.

1027
00:42:06,600 --> 00:42:09,300
But if you really care about it, sometime in a Q&A, I will tell you

1028
00:42:09,300 --> 00:42:12,000
what's going on there because it's, it's super janky and weird.

1029
00:42:12,100 --> 00:42:13,200
But it works if you think about it.

1030
00:42:13,200 --> 00:42:16,400
Anyway, we don't care about this because we are not using a pelletized

1031
00:42:17,200 --> 00:42:17,600
buffer.

1032
00:42:17,600 --> 00:42:20,400
Like I said before, we are using RGB values and we'll see how those

1033
00:42:20,400 --> 00:42:22,000
work in just a little bit.

1034
00:42:22,500 --> 00:42:25,000
Probably tomorrow stream will be a lot about that.

1035
00:42:25,200 --> 00:42:28,000
But anyway, this is basically where the palette goes.

1036
00:42:28,000 --> 00:42:30,000
It's something, it's a, it's a variable.

1037
00:42:30,100 --> 00:42:32,600
Sighs array that will contain all of the colors that you plan to

1038
00:42:32,600 --> 00:42:34,300
reference in your buffer.

1039
00:42:34,300 --> 00:42:36,800
And since we don't plan to reference any colors, we plan to write the

1040
00:42:36,800 --> 00:42:38,700
colors directly into the pixels where they belong.

1041
00:42:39,200 --> 00:42:40,300
We don't have to worry about that at all.

1042
00:42:40,300 --> 00:42:44,200
So BMI header is really the only thing that we need to know about and

1043
00:42:44,200 --> 00:42:47,100
because we are going to have to fill that out in order to specify what

1044
00:42:47,100 --> 00:42:47,700
we want.

1045
00:42:47,700 --> 00:42:48,100
So,

1046
00:42:49,300 --> 00:42:55,200
In here, you will see all of the things we have to specify so bi size.

1047
00:42:55,400 --> 00:42:58,100
It says the number of bytes required by the structure.

1048
00:42:58,100 --> 00:43:01,000
So that's basically Windows asking us to put into the structure itself

1049
00:43:01,000 --> 00:43:02,500
how big the structure actually is.

1050
00:43:02,500 --> 00:43:05,700
Now that makes some sense probably because maybe they want us to

1051
00:43:05,700 --> 00:43:07,500
include like this, if we had one of them or whatever.

1052
00:43:07,500 --> 00:43:09,800
Sometimes Windows, just want you to make to pass the side of things so

1053
00:43:09,800 --> 00:43:12,400
they can tell what version of the API, it was that called them.

1054
00:43:12,600 --> 00:43:17,000
But basically, what we need to do here, is it use that size of

1055
00:43:17,000 --> 00:43:18,900
function that we saw before, where we can get?

1056
00:43:19,100 --> 00:43:19,700
Sighs of things.

1057
00:43:19,700 --> 00:43:22,600
We saw that in the intro stream to basically just find out the size of

1058
00:43:22,600 --> 00:43:23,400
the structure itself.

1059
00:43:23,400 --> 00:43:27,100
So hey, whatever the bitmap info structure is now, do they want the

1060
00:43:27,100 --> 00:43:27,700
size?

1061
00:43:28,000 --> 00:43:28,300
What you do?

1062
00:43:28,300 --> 00:43:30,600
They want the size of ladies and gentlemen, do they want the size of

1063
00:43:30,600 --> 00:43:32,500
this, or do they want the size of this?

1064
00:43:32,700 --> 00:43:35,600
That's the real question number of bytes required by the structure.

1065
00:43:35,700 --> 00:43:36,500
It doesn't say.

1066
00:43:36,800 --> 00:43:38,300
Mmm-hmm.

1067
00:43:39,800 --> 00:43:41,400
An application should use information from the S.

1068
00:43:41,400 --> 00:43:44,500
Isomer to locate the color table in a bitmaps or a structure.

1069
00:43:44,500 --> 00:43:45,500
Oh, here is the clue.

1070
00:43:45,500 --> 00:43:46,300
We needed.

1071
00:43:46,700 --> 00:43:48,900
It says, the color table which is, which is

1072
00:43:49,000 --> 00:43:50,200
I believe this right here.

1073
00:43:50,300 --> 00:43:55,000
It says the color table is the thing that comes the bi sighs.

1074
00:43:55,500 --> 00:43:57,800
Yes, VI sighs after.

1075
00:43:57,800 --> 00:43:59,100
So that's this is exactly what we want.

1076
00:43:59,100 --> 00:43:59,300
Okay.

1077
00:43:59,300 --> 00:44:03,200
So if you, if you were in the in the intro stream you remember us

1078
00:44:03,200 --> 00:44:03,900
doing something.

1079
00:44:03,900 --> 00:44:05,100
Exactly like this.

1080
00:44:05,200 --> 00:44:07,700
We basically took a pointer to.

1081
00:44:07,700 --> 00:44:10,300
We cast it to a care star which is exactly what they're doing.

1082
00:44:10,300 --> 00:44:10,400
Here.

1083
00:44:10,400 --> 00:44:13,400
That is Windows pound to find forecasts, are we cast it a pointer to a

1084
00:44:13,400 --> 00:44:16,700
character and we added a memory offset to it to get to a new place in

1085
00:44:16,700 --> 00:44:17,100
memory.

1086
00:44:17,900 --> 00:44:20,400
People who people who remember the stuff for the intro stream, you are

1087
00:44:20,400 --> 00:44:22,000
very happy right now because that is exactly need to know.

1088
00:44:22,000 --> 00:44:25,700
So now we know what that size parameter actually, is the size

1089
00:44:25,700 --> 00:44:28,700
parameter is how big the header is so it can skip to the color table

1090
00:44:28,700 --> 00:44:32,100
which to me suggests that it should only be this size.

1091
00:44:32,100 --> 00:44:35,100
It should only be this thing here and it should not include the color

1092
00:44:35,100 --> 00:44:35,400
table.

1093
00:44:35,400 --> 00:44:38,200
So we're going to go ahead and use just the size of the header

1094
00:44:38,200 --> 00:44:39,600
portion, like that.

1095
00:44:39,900 --> 00:44:41,000
Next field.

1096
00:44:41,000 --> 00:44:42,300
We need is the width.

1097
00:44:42,400 --> 00:44:46,700
We know what the width is because that is getting called right here.

1098
00:44:47,400 --> 00:44:48,800
We know what the height is.

1099
00:44:49,100 --> 00:44:50,400
So that is right there.

1100
00:44:51,000 --> 00:44:55,800
We know what the planes are because that is sort of a, that is a an

1101
00:44:55,800 --> 00:44:57,200
old-school notion.

1102
00:44:57,400 --> 00:44:59,800
Basically bit planes used to be when you would specify.

1103
00:45:00,000 --> 00:45:03,300
Couple chunks of memory that get combined to give you the color.

1104
00:45:03,500 --> 00:45:05,100
We don't have to do that anymore.

1105
00:45:05,500 --> 00:45:08,800
Thankfully, all of the pixel RGB values are not stored in like a red

1106
00:45:08,800 --> 00:45:09,500
plane at Green Planet.

1107
00:45:09,500 --> 00:45:14,300
Blue plane or or something where you have one bit per each part of the

1108
00:45:14,300 --> 00:45:15,800
red value or anything like that.

1109
00:45:15,800 --> 00:45:16,800
We don't have to worry about that.

1110
00:45:16,800 --> 00:45:17,300
Thankfully.

1111
00:45:19,900 --> 00:45:23,500
Everything is actually per pixel packed together, nowadays and you

1112
00:45:23,500 --> 00:45:25,600
can't even touch by anything other than one apparently says this value

1113
00:45:25,600 --> 00:45:28,000
must be set to 1, so we don't have to worry about that.

1114
00:45:28,300 --> 00:45:29,200
We don't have planes.

1115
00:45:29,200 --> 00:45:31,500
We only just have our back buffer.

1116
00:45:31,500 --> 00:45:32,200
So that's good.

1117
00:45:32,400 --> 00:45:35,200
We'll talk a little bit more about these things when we decompress

1118
00:45:35,500 --> 00:45:37,600
maybe on the Friday stream, we go back over everything.

1119
00:45:37,900 --> 00:45:41,000
I will talk a little bit of the history of some of those things for

1120
00:45:41,000 --> 00:45:41,500
everyone.

1121
00:45:41,500 --> 00:45:42,500
But for now, I want to keep going.

1122
00:45:42,800 --> 00:45:45,300
The bit count is the number of bits per pixel.

1123
00:45:45,300 --> 00:45:49,900
Now, 24 is actually how many we need, but I'm going to

1124
00:45:50,000 --> 00:45:53,300
Ask for 32 for reasons that will become clear in a little later.

1125
00:45:53,300 --> 00:45:57,000
The reason I say 24 is because we need 8 B, 4 red, 8 B, 4, Green 8,

1126
00:45:57,000 --> 00:45:57,700
that's for blue.

1127
00:45:57,700 --> 00:46:00,200
Just like you would see and say HTML or something like that.

1128
00:46:00,800 --> 00:46:04,400
We want an 8-bit color for each for now, and I'm going to actually ask

1129
00:46:04,400 --> 00:46:07,500
for 32 because I want things to be d word a line, but you don't have

1130
00:46:07,500 --> 00:46:10,100
to worry about that just yet, because we're going to talk about

1131
00:46:10,100 --> 00:46:12,100
alignment totally separately.

1132
00:46:13,500 --> 00:46:17,200
All right, that would involve Us opening up the Intel architecture

1133
00:46:17,200 --> 00:46:18,300
manual, which is always fun.

1134
00:46:18,300 --> 00:46:19,700
Ladies and gentlemen, you will enjoy it.

1135
00:46:19,700 --> 00:46:20,400
I promise you.

1136
00:46:20,500 --> 00:46:23,300
So we can then say what kind of compression we want.

1137
00:46:23,300 --> 00:46:26,100
And we do not want this compressed at all, because what we want to do

1138
00:46:26,100 --> 00:46:28,400
is be able to write to it as fast as possible and lit from it as fast

1139
00:46:28,400 --> 00:46:28,700
as possible.

1140
00:46:28,700 --> 00:46:31,500
We do not want it to be doing any fancy compression.

1141
00:46:31,500 --> 00:46:34,300
So it's going to be thinking about things at all, trying to compress

1142
00:46:34,300 --> 00:46:34,400
them.

1143
00:46:34,400 --> 00:46:35,400
We do not want that.

1144
00:46:35,600 --> 00:46:39,100
So we're just going to cut past bi RGB for the format.

1145
00:46:39,800 --> 00:46:40,100
Sorry.

1146
00:46:40,100 --> 00:46:41,500
What was the actual format name?

1147
00:46:41,500 --> 00:46:43,100
It is bi compression.

1148
00:46:43,300 --> 00:46:44,300
Bi compression.

1149
00:46:44,800 --> 00:46:45,300
There we go.

1150
00:46:46,400 --> 00:46:47,600
Sighs image.

1151
00:46:48,900 --> 00:46:52,000
What on Earth is that the size in bytes of the image this may set to

1152
00:46:52,000 --> 00:46:53,500
be the guest to be zero.

1153
00:46:53,600 --> 00:46:59,400
So basically that's just going to that is just going to be show up.

1154
00:46:59,400 --> 00:47:02,800
If you actually have to have a compression format, where Windows

1155
00:47:02,800 --> 00:47:05,000
wouldn't know how big the thing was going to be, because you were

1156
00:47:05,000 --> 00:47:09,900
going to do some pressure on it spells per meter is sort of totally

1157
00:47:09,900 --> 00:47:10,500
useless for us.

1158
00:47:10,500 --> 00:47:11,800
Why would we need to know that at all?

1159
00:47:11,800 --> 00:47:14,200
That is something is only if you were actually using some kind of

1160
00:47:14,200 --> 00:47:16,400
print output pixels per meter.

1161
00:47:17,100 --> 00:47:18,500
We don't even have anything.

1162
00:47:18,700 --> 00:47:21,800
That so can we can we set those 20, ladies and gentlemen, is there a

1163
00:47:21,800 --> 00:47:22,800
way to set those 20?

1164
00:47:22,800 --> 00:47:25,700
I feel like they could both be set to 0 so I'm going to set them to

1165
00:47:25,700 --> 00:47:27,300
zero for now.

1166
00:47:27,500 --> 00:47:31,200
Hoping that does not mind because that is basically for printing and

1167
00:47:31,200 --> 00:47:33,400
that sort of stuff where you have an actual or something, where you

1168
00:47:33,400 --> 00:47:34,900
actually care about the physical size.

1169
00:47:35,100 --> 00:47:37,700
We don't even know what the size is of our display at this point.

1170
00:47:37,800 --> 00:47:40,300
So we're in no position to say how many pixels per meter there are on

1171
00:47:40,300 --> 00:47:42,500
it because we don't know anything about that.

1172
00:47:42,600 --> 00:47:44,600
Clear use the number of color indexes.

1173
00:47:45,000 --> 00:47:45,200
Okay.

1174
00:47:45,200 --> 00:47:47,500
This is how many colors are used in the color table.

1175
00:47:47,500 --> 00:47:48,500
I just said we don't have a

1176
00:47:48,600 --> 00:47:49,100
color table.

1177
00:47:49,100 --> 00:47:51,200
So we don't care about that at all either.

1178
00:47:51,200 --> 00:47:55,900
And finally, bi-color important also not care about because we do not

1179
00:47:55,900 --> 00:47:59,800
have any of that index pallet stuff.

1180
00:48:00,100 --> 00:48:04,400
Okay, this should actually go through and allocate our bitmap memory

1181
00:48:04,400 --> 00:48:07,600
for us, but we will not know until we actually try if we've done

1182
00:48:07,600 --> 00:48:10,900
everything, right, but I want to point out something that we now need

1183
00:48:10,900 --> 00:48:15,100
to handle and that is we actually need to free.

1184
00:48:16,300 --> 00:48:17,800
Well, we need to get our device context first.

1185
00:48:17,800 --> 00:48:19,900
So we need to do that too, but we actually need to free this thing.

1186
00:48:22,100 --> 00:48:23,000
Before we create a new one.

1187
00:48:23,000 --> 00:48:24,400
Because like I said before.

1188
00:48:25,500 --> 00:48:30,200
If you go down here and you look at the WM size command, you will note

1189
00:48:30,200 --> 00:48:34,500
that we basically have a resize deep section call will happen.

1190
00:48:34,500 --> 00:48:35,700
Every time we WM size.

1191
00:48:35,700 --> 00:48:39,800
So if we allocated new memory for our buffer, every time that would be

1192
00:48:39,800 --> 00:48:40,100
bad.

1193
00:48:40,100 --> 00:48:43,700
So, what we actually want to do is just right before we create, our

1194
00:48:43,700 --> 00:48:44,700
new dip section.

1195
00:48:44,900 --> 00:48:47,100
We could free the old dip section.

1196
00:48:48,500 --> 00:48:54,200
Or we can wait and see if we can get our new one first.

1197
00:48:54,400 --> 00:48:57,400
And if we can't, we can keep using our old one.

1198
00:48:58,600 --> 00:48:59,600
It's tough decision.

1199
00:48:59,800 --> 00:49:03,200
It is a tough decision, ladies and gentlemen, because basically

1200
00:49:03,200 --> 00:49:05,900
there's a bunch of trade-offs either way, depending on how we do it.

1201
00:49:06,300 --> 00:49:11,400
I am going to go ahead and say what we will actually do is we will we

1202
00:49:11,400 --> 00:49:14,300
will actually free after will create ours first and then free after

1203
00:49:14,500 --> 00:49:16,900
the reason that's a little touchy is because if we needed the memory

1204
00:49:16,900 --> 00:49:17,900
from the first one or two, get them.

1205
00:49:18,100 --> 00:49:20,400
From the second one because it was occupying too much memory.

1206
00:49:22,000 --> 00:49:24,900
It would be kind of shooting ourselves in the foot.

1207
00:49:25,100 --> 00:49:28,800
So maybe the other thing we could do is if we fails yeah, yeah, this

1208
00:49:28,800 --> 00:49:29,300
is hard.

1209
00:49:29,300 --> 00:49:30,000
So, you know what?

1210
00:49:31,100 --> 00:49:33,900
We're going to put you do here and we're going to say bulletproof this

1211
00:49:34,500 --> 00:49:39,600
and we're actually going to just do a free straight up free first.

1212
00:49:39,800 --> 00:49:45,500
So basically what we'll say is bulletproof this maybe don't free first

1213
00:49:45,600 --> 00:49:48,500
free after then free first.

1214
00:49:48,600 --> 00:49:51,600
If that fails maybe we'll get that shot.

1215
00:49:51,800 --> 00:49:54,400
Bit later just to be a little more resilient depending on the

1216
00:49:54,400 --> 00:49:55,200
circumstances.

1217
00:49:55,200 --> 00:49:55,700
Okay.

1218
00:49:55,800 --> 00:49:59,400
So what we're going to do here is basically right here.

1219
00:49:59,400 --> 00:50:06,600
We will free it, three our jib section, but then down here.

1220
00:50:06,600 --> 00:50:09,900
We will create the new one that we can then use to draw.

1221
00:50:09,900 --> 00:50:12,900
So we're going to have to remember a couple things as we can see down

1222
00:50:12,900 --> 00:50:13,300
here.

1223
00:50:13,300 --> 00:50:15,900
We need that bitmap info which is this thing, right?

1224
00:50:16,000 --> 00:50:18,500
So this guy is going to have to be persistent.

1225
00:50:18,500 --> 00:50:20,700
So let's go ahead and put him out here, right?

1226
00:50:21,600 --> 00:50:23,100
He's going to have to stick around forever.

1227
00:50:23,300 --> 00:50:23,800
There you go.

1228
00:50:24,300 --> 00:50:26,500
I now that will also clear him to 0.

1229
00:50:26,600 --> 00:50:29,100
So that means all of these guys are cleared for us for free.

1230
00:50:29,200 --> 00:50:29,600
Right?

1231
00:50:29,600 --> 00:50:32,600
Don't actually do any of that, clear for us, for free out, in bitmap

1232
00:50:32,600 --> 00:50:33,000
info.

1233
00:50:33,500 --> 00:50:37,700
Then we've also got this bitmap memory right here, which is void start

1234
00:50:37,700 --> 00:50:37,900
again.

1235
00:50:37,900 --> 00:50:40,500
These little variables, will probably not last long.

1236
00:50:40,600 --> 00:50:43,800
We are going to make them ungh Lobel in just a little bit.

1237
00:50:43,800 --> 00:50:46,700
But for now to keep things simple and to make sure that we are on time

1238
00:50:46,700 --> 00:50:47,100
for the day.

1239
00:50:47,100 --> 00:50:49,200
We are going to go ahead and use them because they are going to use

1240
00:50:49,500 --> 00:50:51,300
sort of across multiple things that do not share.

1241
00:50:51,400 --> 00:50:54,300
Are a context that we can easily get to but I'll show you a little

1242
00:50:54,300 --> 00:50:55,400
trick of that a little bit later.

1243
00:50:57,400 --> 00:50:59,800
And then finally, we are going to probably need.

1244
00:51:00,200 --> 00:51:03,700
That bitmap handle because without that bitmap handle, we would not be

1245
00:51:03,700 --> 00:51:04,700
able to free it.

1246
00:51:04,700 --> 00:51:07,000
So I must do this as well.

1247
00:51:07,200 --> 00:51:08,400
So there we go.

1248
00:51:09,200 --> 00:51:17,300
And what I'm going to do is I am going to say bitmap handle Global

1249
00:51:17,300 --> 00:51:17,900
variable.

1250
00:51:17,900 --> 00:51:18,500
There we go.

1251
00:51:19,500 --> 00:51:23,300
I am going to say at the top of this if we want to free our dip

1252
00:51:23,300 --> 00:51:23,800
section.

1253
00:51:24,100 --> 00:51:29,800
Basically, what we're going to have to do is if we actually have our

1254
00:51:30,000 --> 00:51:32,400
it mapinfo initialized and since this is the first thing we

1255
00:51:32,400 --> 00:51:34,100
initialize, I'm gonna go ahead and switch on that.

1256
00:51:34,400 --> 00:51:36,400
I'm going to say if that's actually initialize.

1257
00:51:36,400 --> 00:51:39,500
Then we assume that we will have to actually get rid of the stuff.

1258
00:51:39,500 --> 00:51:42,800
I don't know if bitmap handle actually something I can test for as

1259
00:51:42,800 --> 00:51:43,000
well.

1260
00:51:43,000 --> 00:51:44,100
Let's take a look at that.

1261
00:51:44,300 --> 00:51:47,400
What is that actually find to be inside windows?

1262
00:51:47,600 --> 00:51:48,400
I don't know if that's thing.

1263
00:51:48,400 --> 00:51:55,500
We can test on, let's take a look bitmap H bitmap typedef.

1264
00:51:55,500 --> 00:51:56,600
It is a handle.

1265
00:51:56,800 --> 00:51:59,800
So I don't know if that'll come back as invalid handle value or what?

1266
00:52:00,100 --> 00:52:01,300
That is a good question.

1267
00:52:01,400 --> 00:52:04,000
Let's take a look at create dip section and see what it says.

1268
00:52:04,000 --> 00:52:07,100
Return value is on failure because I don't actually remember.

1269
00:52:09,600 --> 00:52:10,700
Doo doo doo.

1270
00:52:11,600 --> 00:52:11,700
There.

1271
00:52:11,700 --> 00:52:14,200
It is takes a little while and I missed you in sometime.

1272
00:52:14,500 --> 00:52:15,500
Okay, let's see.

1273
00:52:15,500 --> 00:52:17,200
Return values is exceeds.

1274
00:52:17,500 --> 00:52:18,300
The function there.

1275
00:52:18,300 --> 00:52:21,100
Turned volumes of data to do at the function fails, return value is

1276
00:52:21,100 --> 00:52:21,500
null.

1277
00:52:21,500 --> 00:52:21,900
Okay.

1278
00:52:22,000 --> 00:52:24,100
So basically, this will initialize, the null, which is good.

1279
00:52:24,200 --> 00:52:28,200
And we can also say, if bitmap handle, that means we've got one and so

1280
00:52:28,200 --> 00:52:33,600
we will have to delete that bitmap handle note, GD, is a little wonky.

1281
00:52:33,700 --> 00:52:36,900
The way that that works is basically when it creates a bitmap handle

1282
00:52:36,900 --> 00:52:39,200
which is going to actually track the memory for us as well.

1283
00:52:39,700 --> 00:52:42,500
It actually deletes everything through the same call if I remember

1284
00:52:42,500 --> 00:52:43,100
correctly.

1285
00:52:43,400 --> 00:52:47,200
So basically you actually pass bitmap handles to delete object,

1286
00:52:47,300 --> 00:52:49,800
instead of something like delete bitmap and it just figures out what

1287
00:52:49,800 --> 00:52:50,300
type it was.

1288
00:52:50,300 --> 00:52:53,800
So you can actually see here in the remarks actually tells us this

1289
00:52:53,800 --> 00:52:53,900
now.

1290
00:52:53,900 --> 00:52:56,300
And I'm looking at it, the system closes the handle to that memory

1291
00:52:56,300 --> 00:52:59,000
when you later delete the dip by calling delete object function.

1292
00:52:59,300 --> 00:53:03,400
So, yeah, I guess basically, you know, they just wanted to make an

1293
00:53:03,400 --> 00:53:06,400
only one delete call and you just pass everything to it and it's an H

1294
00:53:06,400 --> 00:53:06,800
GD.

1295
00:53:06,800 --> 00:53:09,300
I robbed that it expects to get so we may

1296
00:53:09,400 --> 00:53:12,400
Yet, we may actually have to cast this if Windows wants us to pass it

1297
00:53:12,400 --> 00:53:16,400
to it because basically, we actually have a h bitmap and, you know, I

1298
00:53:16,400 --> 00:53:18,300
don't think it's going to do that on a test for us, but we'll find

1299
00:53:18,300 --> 00:53:18,700
out.

1300
00:53:19,000 --> 00:53:20,400
In fact, let's just find out right now.

1301
00:53:22,200 --> 00:53:22,800
That was fine.

1302
00:53:22,900 --> 00:53:24,400
Okay, that's totally fine.

1303
00:53:24,900 --> 00:53:26,000
Oh, and I also forgot.

1304
00:53:26,000 --> 00:53:26,300
Here.

1305
00:53:26,500 --> 00:53:28,300
These are all in the BMI header, right?

1306
00:53:28,300 --> 00:53:30,500
These are all the in the header that we're setting here because this

1307
00:53:30,500 --> 00:53:31,500
actual bitmap info thing.

1308
00:53:31,500 --> 00:53:33,800
Didn't have any any actual stuff in it.

1309
00:53:33,800 --> 00:53:34,500
So, there we go.

1310
00:53:34,600 --> 00:53:36,800
Okay, so we're going to go ahead and delete this object here.

1311
00:53:37,700 --> 00:53:39,300
And there's another thing we're going to actually have to do in this

1312
00:53:39,300 --> 00:53:39,600
case.

1313
00:53:39,800 --> 00:53:41,000
That'll happen in a second.

1314
00:53:41,200 --> 00:53:43,000
But the other thing that we have to do now is figure out where we're

1315
00:53:43,000 --> 00:53:45,700
going to get this device context because we have a device context.

1316
00:53:45,700 --> 00:53:50,000
We need to actually go ahead and create a device context that we can

1317
00:53:50,000 --> 00:53:50,500
actually.

1318
00:53:50,800 --> 00:53:53,200
Use to create our dip section.

1319
00:53:53,400 --> 00:53:56,400
What it's going to do with that device context is it's going to create

1320
00:53:56,400 --> 00:53:59,800
a bitmap that's suitable for use with that device context.

1321
00:54:00,000 --> 00:54:03,600
So in order to do that, basically we have to first get a device

1322
00:54:03,600 --> 00:54:07,400
context, that is something we can use to put to the screen because

1323
00:54:07,400 --> 00:54:08,300
that is what we're trying to do.

1324
00:54:08,500 --> 00:54:11,800
And the way that we do that is we use a thing called get compatible DC

1325
00:54:11,900 --> 00:54:13,400
and we pass it zero.

1326
00:54:13,400 --> 00:54:13,500
Now.

1327
00:54:13,500 --> 00:54:16,500
I know that's a little bit odd and probably a little confusing to

1328
00:54:16,500 --> 00:54:16,800
everyone.

1329
00:54:16,800 --> 00:54:21,100
This is again the vagaries of windows, but basically what happens here

1330
00:54:21,300 --> 00:54:27,100
is sorry, we see basically what happens here is we can ask Windows to

1331
00:54:27,100 --> 00:54:29,800
give us back a device context that's compatible.

1332
00:54:30,000 --> 00:54:31,400
With something, right?

1333
00:54:31,400 --> 00:54:33,400
And you can see if I actually pass it in here.

1334
00:54:33,800 --> 00:54:37,800
Remember, device context of the things that we use to draw in Windows.

1335
00:54:38,500 --> 00:54:40,600
You can see the pastebin, we do create Capitol DC.

1336
00:54:40,600 --> 00:54:44,600
We pass it, another, HDC and say, hey, we need you to basically make

1337
00:54:44,600 --> 00:54:46,700
something that we could use to draw in a way.

1338
00:54:46,700 --> 00:54:49,300
That's that's compatible with this other thing that we're trying to

1339
00:54:49,300 --> 00:54:50,600
use and that's important to us.

1340
00:54:50,600 --> 00:54:53,000
Because basically, we have something we want to draw into that.

1341
00:54:53,000 --> 00:54:54,600
We're going to try and get to the screen.

1342
00:54:54,600 --> 00:54:56,800
And so, what you want to do is create a device constants, compatible

1343
00:54:56,800 --> 00:54:59,700
with the screens device context, even though we are not drawing with

1344
00:54:59,700 --> 00:54:59,800
this.

1345
00:55:00,000 --> 00:55:00,700
Device contacts.

1346
00:55:00,800 --> 00:55:01,800
I know it's crazy.

1347
00:55:04,400 --> 00:55:05,600
I didn't make this stuff up.

1348
00:55:06,400 --> 00:55:07,700
Fortunately, once we're done with it.

1349
00:55:07,700 --> 00:55:08,400
We're gonna be done with it.

1350
00:55:08,400 --> 00:55:09,800
Oh, no, the five-minute warning.

1351
00:55:10,200 --> 00:55:12,900
Well, it's good to know that the app is working.

1352
00:55:12,900 --> 00:55:14,100
We may need a little more in five minutes.

1353
00:55:14,100 --> 00:55:15,400
We may have to go in the Q&A today.

1354
00:55:15,700 --> 00:55:18,100
That'd be sad, but we might need a little bit more just to get to the

1355
00:55:18,100 --> 00:55:21,700
point where we're actually putting the screen, but we're almost there.

1356
00:55:22,000 --> 00:55:25,000
If we get a device contest compatible with bling to the screen, we can

1357
00:55:25,000 --> 00:55:27,100
then use it and we will want to

1358
00:55:30,100 --> 00:55:30,600
Actually.

1359
00:55:32,100 --> 00:55:32,500
You know what?

1360
00:55:32,500 --> 00:55:34,300
That's not, that's not entirely true.

1361
00:55:34,400 --> 00:55:35,400
That's not entirely true.

1362
00:55:35,500 --> 00:55:39,200
We want to just actually keep this around, is the thing we want to

1363
00:55:39,200 --> 00:55:42,000
actually keep this device context around because, why not, right?

1364
00:55:42,100 --> 00:55:45,800
So, we can actually create a compatible DC for this thing and leave it

1365
00:55:45,800 --> 00:55:46,400
selected.

1366
00:55:46,500 --> 00:55:47,800
Hmm.

1367
00:55:48,200 --> 00:55:50,700
I really wish that five-minute warning wasn't up, because there's a

1368
00:55:50,700 --> 00:55:51,500
bunch of stuff that we should.

1369
00:55:51,500 --> 00:55:54,200
Probably, that we should probably explain here.

1370
00:55:54,300 --> 00:55:56,000
I wonder if we have to break this into.

1371
00:55:56,100 --> 00:55:57,400
That would be sad.

1372
00:55:58,200 --> 00:55:59,800
Because we're so close.

1373
00:56:00,600 --> 00:56:01,900
It's that moment of indecision.

1374
00:56:01,900 --> 00:56:06,700
Do you go into the Q&A and you finish it or do you stop?

1375
00:56:07,600 --> 00:56:08,300
And wait?

1376
00:56:13,100 --> 00:56:13,300
Huh?

1377
00:56:16,600 --> 00:56:20,900
Well, I'll tell you what, we'll do, we'll make a compromise and make a

1378
00:56:20,900 --> 00:56:21,800
slight compromise.

1379
00:56:21,900 --> 00:56:25,200
What we will do is we will call create compatible DC here and will

1380
00:56:25,200 --> 00:56:29,700
actually create a DC that's compatible with something, basically

1381
00:56:29,700 --> 00:56:31,400
compatible with the, with, with the screen.

1382
00:56:31,600 --> 00:56:35,000
So, will actually call create compatible DC with zero, to make a

1383
00:56:35,000 --> 00:56:37,200
device conducts that we can use that we can keep.

1384
00:56:37,200 --> 00:56:39,200
So instead of having to release it.

1385
00:56:39,300 --> 00:56:40,200
We will just keep it.

1386
00:56:40,200 --> 00:56:43,100
And this will be part of the package that we will eventually wrap up

1387
00:56:43,100 --> 00:56:46,200
into a nice little thing that we can use for doing this stuff.

1388
00:56:46,300 --> 00:56:51,600
So this is our bitmap device context that we can use from then on and

1389
00:56:51,600 --> 00:56:56,400
if we know that we have done our stuff before we will not need to make

1390
00:56:56,400 --> 00:56:59,300
it because I believe we can just use the same one forever, and that

1391
00:56:59,300 --> 00:56:59,800
should be fine.

1392
00:57:00,400 --> 00:57:03,200
But we could also shut it down and created a new each time.

1393
00:57:03,200 --> 00:57:03,700
I don't know.

1394
00:57:03,800 --> 00:57:06,300
We'll see you in a second point being.

1395
00:57:08,800 --> 00:57:11,400
We will probably end the stream here because there is so much to talk

1396
00:57:11,400 --> 00:57:12,100
about in here.

1397
00:57:12,200 --> 00:57:13,700
So many new things that we did that.

1398
00:57:13,700 --> 00:57:19,500
I think we really want to basically have, we want to have enough time

1399
00:57:19,600 --> 00:57:23,000
to actually go through everything and and talk about sort of

1400
00:57:23,000 --> 00:57:25,000
decompress, a little bit, all the stuff that I did.

1401
00:57:25,000 --> 00:57:26,700
So I'm not going to blow through the Q&A.

1402
00:57:26,900 --> 00:57:29,300
We're going to stop and we're going to actually do real rendering

1403
00:57:29,300 --> 00:57:32,600
tomorrow because we basically done almost all of the work for it.

1404
00:57:32,700 --> 00:57:35,600
So tomorrow we can just start fresh and start drawing things right

1405
00:57:35,600 --> 00:57:38,100
away, which seems like probably

1406
00:57:38,300 --> 00:57:39,000
Better solution.

1407
00:57:39,100 --> 00:57:40,900
So, hopefully, everyone's okay with that.

1408
00:57:40,900 --> 00:57:42,000
We were almost there.

1409
00:57:42,200 --> 00:57:44,600
But at the last minute it was passive.

1410
00:57:45,400 --> 00:57:50,600
We grasp defeat from the jaws of Victory if you will, so, all right.

1411
00:57:50,600 --> 00:57:51,700
I'm just going to clean up this V.

1412
00:57:51,700 --> 00:57:54,300
We change the name of that to win32 resize tip section.

1413
00:57:54,700 --> 00:57:58,000
So now we have a thing where we actually do call in and we do resize,

1414
00:57:58,000 --> 00:58:01,100
our dip section, but unfortunately, we don't actually do anything with

1415
00:58:01,100 --> 00:58:01,700
our dip section.

1416
00:58:01,700 --> 00:58:05,700
So that is not particularly exciting basically.

1417
00:58:06,800 --> 00:58:09,300
What we've done now is we've made it so that when we go in to do our

1418
00:58:09,300 --> 00:58:12,700
resize, we check to see whether or not we already have a bitmap

1419
00:58:12,700 --> 00:58:13,000
handle.

1420
00:58:13,000 --> 00:58:14,300
If we do have a bitmap handle.

1421
00:58:14,300 --> 00:58:15,700
We need to delete that bit about handle.

1422
00:58:15,700 --> 00:58:20,800
So we go ahead and we do that, but if we do not have a bitmap handle,

1423
00:58:20,800 --> 00:58:22,400
that means this is a time.

1424
00:58:22,400 --> 00:58:24,700
Well, you know, I can make this a little cleaner.

1425
00:58:24,700 --> 00:58:25,100
Actually.

1426
00:58:25,200 --> 00:58:29,400
Let's just see say also if we don't have a bitmap device context, we

1427
00:58:29,400 --> 00:58:33,800
will also create one of those and we never probably need to free that

1428
00:58:33,800 --> 00:58:36,300
when I don't think we'll have to double check later.

1429
00:58:36,500 --> 00:58:39,500
We start to do testing whether we would have to change create a new

1430
00:58:39,500 --> 00:58:39,700
one.

1431
00:58:39,700 --> 00:58:43,600
If someone unplugged Monitor, and plugged a new one in and set to a

1432
00:58:43,600 --> 00:58:46,500
different display resolution or something like that.

1433
00:58:47,800 --> 00:58:49,700
We may have to, I don't know.

1434
00:58:50,000 --> 00:58:52,800
So it's a good question, is whether we should create a new one or not

1435
00:58:52,800 --> 00:58:53,100
here.

1436
00:58:53,400 --> 00:58:55,700
So I'm going to go ahead and put it to do down here.

1437
00:58:56,000 --> 00:59:02,400
Should we recreate these under certain special circumstances?

1438
00:59:04,200 --> 00:59:05,500
And we'll take a look a little bit.

1439
00:59:06,100 --> 00:59:06,600
We'll take a closer.

1440
00:59:06,600 --> 00:59:07,000
Look at that.

1441
00:59:07,000 --> 00:59:08,000
When we do the final stuff.

1442
00:59:08,000 --> 00:59:09,500
We filled out our BMI header.

1443
00:59:09,500 --> 00:59:13,000
We ask for our dip section and we should have gotten back our memory.

1444
00:59:13,000 --> 00:59:16,300
So let's take a look and see if that actually worked.

1445
00:59:16,700 --> 00:59:20,100
If it actually gave us the back buffer that we wanted.

1446
00:59:20,100 --> 00:59:21,300
So we come in here.

1447
00:59:21,700 --> 00:59:22,900
We hit the resize.

1448
00:59:22,900 --> 00:59:26,000
Obviously, this is inside rwm sighs call.

1449
00:59:26,100 --> 00:59:29,600
So we came in here and we, by the way, you can always double click in

1450
00:59:29,600 --> 00:59:32,000
here to move throughout the various parts of the stack.

1451
00:59:32,000 --> 00:59:33,900
This is where we are in the stack right now.

1452
00:59:34,600 --> 00:59:37,300
So basically this is in fact, you know, and I'll just go ahead and

1453
00:59:37,300 --> 00:59:39,400
step through it explicitly for you so you can see it.

1454
00:59:39,700 --> 00:59:42,400
So basically what happens is we come in here we get a double size

1455
00:59:42,400 --> 00:59:43,000
message.

1456
00:59:43,000 --> 00:59:45,900
We get the size of the window by getting the client wrecked and you

1457
00:59:45,900 --> 00:59:47,400
can see the client rectum here.

1458
00:59:48,800 --> 00:59:49,100
Right.

1459
00:59:49,100 --> 00:59:52,600
There's the left top right and bottom we can turn out of hexadecimal

1460
00:59:52,600 --> 00:59:56,500
display here and see that our window is 1424 by 729.

1461
00:59:56,700 --> 00:59:59,600
A very interesting resolution indeed, but that is what Windows

1462
00:59:59,600 --> 00:59:59,800
created.

1463
01:00:00,300 --> 01:00:01,300
As we didn't ask for anything.

1464
01:00:01,300 --> 01:00:04,400
In particular, you'll remember we said use default, so it did, there

1465
01:00:04,400 --> 01:00:04,700
we go.

1466
01:00:04,700 --> 01:00:07,300
There's our width and height up the Q&A begins.

1467
01:00:07,300 --> 01:00:11,400
Now we're in trouble, but I said, we're going to call it for today.

1468
01:00:11,400 --> 01:00:15,300
Anyway, so anyway, point being that we got our sized correctly.

1469
01:00:15,300 --> 01:00:18,100
You can see we actually did our math there, with the knife, we go into

1470
01:00:18,100 --> 01:00:18,900
the resize.

1471
01:00:19,300 --> 01:00:21,300
We don't need to, we don't have a bitmap handle yet.

1472
01:00:21,300 --> 01:00:22,700
So we don't need to delete object.

1473
01:00:22,700 --> 01:00:26,100
We don't have a oh, that's a bug right there.

1474
01:00:27,300 --> 01:00:29,200
My bad, we wanted to do this.

1475
01:00:29,200 --> 01:00:32,100
If we don't have a bitmap device context, right?

1476
01:00:32,300 --> 01:00:36,000
Because basically, we want to create one if we don't have one.

1477
01:00:36,000 --> 01:00:39,200
So we need to do, basically this not equal to 0.

1478
01:00:39,200 --> 01:00:42,300
If we do not have one empty shorthand for that, you can do also is

1479
01:00:42,300 --> 01:00:44,700
just not that thing, right?

1480
01:00:44,800 --> 01:00:45,600
So there we go.

1481
01:00:47,000 --> 01:00:50,700
Okay, glad we stuck through that caught an obvious bug right away.

1482
01:00:50,900 --> 01:00:51,200
One.

1483
01:00:51,300 --> 01:00:53,500
Nice part about stepping through your code.

1484
01:00:53,700 --> 01:00:57,200
Is you get to catch some stupid mistakes that you will then have to go

1485
01:00:57,200 --> 01:00:57,700
in and go.

1486
01:00:57,700 --> 01:00:58,600
Oh, yeah.

1487
01:00:58,800 --> 01:01:00,100
So we go ahead and create one of those.

1488
01:01:00,100 --> 01:01:01,600
Let's see if we got back something valid.

1489
01:01:01,600 --> 01:01:02,300
We did.

1490
01:01:02,800 --> 01:01:04,900
We are going to go ahead and fill out our structure.

1491
01:01:04,900 --> 01:01:08,500
Let's take a look at that and make sure it looks like what we think it

1492
01:01:08,500 --> 01:01:10,800
should look like before we go any further.

1493
01:01:10,800 --> 01:01:11,100
There.

1494
01:01:11,100 --> 01:01:11,500
It is.

1495
01:01:12,200 --> 01:01:13,300
Everything looks good.

1496
01:01:13,400 --> 01:01:15,900
32 bits per pixel, one plane.

1497
01:01:16,000 --> 01:01:16,700
That is the size.

1498
01:01:16,800 --> 01:01:20,400
Wanted this is the size of the bitmap info header, which looks good.

1499
01:01:20,600 --> 01:01:24,100
And now we will see if we get a bitmap handle back and we did.

1500
01:01:24,200 --> 01:01:25,700
Let's see if we got our bitmap memory back.

1501
01:01:25,700 --> 01:01:26,900
We got that too.

1502
01:01:27,100 --> 01:01:30,600
So it looks like we have succeeded in getting our back buffer.

1503
01:01:30,600 --> 01:01:35,600
But unfortunately we are not actually going to be able to use it.

1504
01:01:36,100 --> 01:01:37,200
Sorry about that.

1505
01:01:37,500 --> 01:01:41,600
Unfortunately, we are we are up still got that break point in there.

1506
01:01:41,600 --> 01:01:42,500
Let's get rid of that.

1507
01:01:42,500 --> 01:01:44,400
Don't want to break every time we resize our window.

1508
01:01:44,600 --> 01:01:46,600
So there is our window, it is

1509
01:01:46,700 --> 01:01:48,100
Sizing at the moment.

1510
01:01:48,100 --> 01:01:51,500
And presumably it is, it is actually doing what it's supposed to do.

1511
01:01:51,500 --> 01:01:54,700
Although we have to do some actual work in here are testing to see if

1512
01:01:54,700 --> 01:01:55,300
that's true.

1513
01:01:55,400 --> 01:01:59,100
We can also take a look in the excuse me.

1514
01:01:59,800 --> 01:02:02,800
We can also take a look here in the task manager by hitting Ctrl

1515
01:02:02,800 --> 01:02:03,100
shift.

1516
01:02:03,100 --> 01:02:04,400
Escape, bring up the task manager.

1517
01:02:04,400 --> 01:02:06,500
One thing that I like to do periodically, especially when I read

1518
01:02:06,500 --> 01:02:09,300
something like that, that's going to be doing some kind of finicky

1519
01:02:09,300 --> 01:02:09,600
things.

1520
01:02:09,600 --> 01:02:11,400
Where it's like, oh, it's sometimes lots of free this thing and

1521
01:02:11,400 --> 01:02:13,600
sometimes it doesn't cause it's doing something clever or thinks it's

1522
01:02:13,600 --> 01:02:14,000
cool.

1523
01:02:14,900 --> 01:02:16,600
I do a lot of things to double-check.

1524
01:02:16,800 --> 01:02:20,300
Make sure that everything is is kosher and so one of the things that I

1525
01:02:20,300 --> 01:02:24,300
want to look at is is what our memory footprint looks like.

1526
01:02:24,500 --> 01:02:27,100
So, let's go ahead and see if we can find our application here.

1527
01:02:27,400 --> 01:02:28,000
What do we call this?

1528
01:02:28,000 --> 01:02:29,600
We called it win32 handmade.

1529
01:02:29,700 --> 01:02:30,500
So there it is.

1530
01:02:30,700 --> 01:02:34,300
We can see are working set right there, which is basically how much

1531
01:02:34,300 --> 01:02:36,400
memory we are using at the time.

1532
01:02:36,900 --> 01:02:39,800
And I am going to go ahead and go nuts with this to make sure that we

1533
01:02:39,800 --> 01:02:40,800
are not leaking anything.

1534
01:02:40,800 --> 01:02:44,800
And you can see that we do not appear to be.

1535
01:02:45,000 --> 01:02:45,800
So that is good.

1536
01:02:45,800 --> 01:02:46,600
If that number

1537
01:02:46,700 --> 01:02:50,100
If like was going up like crazy or something like that, then that

1538
01:02:50,100 --> 01:02:52,500
means we would be leaking something, but it looks like we are in good

1539
01:02:52,500 --> 01:02:53,000
shape.

1540
01:02:53,100 --> 01:02:55,100
Okay, so, I'm sorry.

1541
01:02:55,100 --> 01:02:57,100
We didn't quite get to draw into it.

1542
01:02:57,200 --> 01:02:58,500
We did all the work to get it.

1543
01:02:58,500 --> 01:02:59,400
It's kind of like,

1544
01:03:00,200 --> 01:03:03,500
You know, doing doing all the work and not getting paid, and that's a

1545
01:03:03,500 --> 01:03:04,300
little disappointing.

1546
01:03:04,500 --> 01:03:05,800
But the good news is tomorrow.

1547
01:03:06,200 --> 01:03:09,400
We will be able to start right away with drawing and that is the fun

1548
01:03:09,400 --> 01:03:09,700
stuff.

1549
01:03:09,700 --> 01:03:12,500
Ladies and gentlemen, that is the part where we actually start working

1550
01:03:12,500 --> 01:03:13,400
on the game game.

1551
01:03:13,600 --> 01:03:16,900
So I'm going to go back and stick to our schedule.

1552
01:03:17,000 --> 01:03:18,600
Even though I really want to go do that.

1553
01:03:18,700 --> 01:03:21,700
I'm going to stick to the schedule and say let's open it up for Q&A.

1554
01:03:22,300 --> 01:03:25,500
I will, I will go ahead and start taking questions now.

1555
01:03:29,800 --> 01:03:31,000
Let's see.

1556
01:03:31,700 --> 01:03:32,600
Where are we?

1557
01:03:38,500 --> 01:03:39,100
Stretchy B.

1558
01:03:39,100 --> 01:03:40,400
Take a pointer to the pixel data.

1559
01:03:40,400 --> 01:03:42,200
You don't need to bother with great tips section.

1560
01:03:42,200 --> 01:03:44,100
Just allocate an array yourself.

1561
01:03:44,200 --> 01:03:51,800
I do not believe that's actually truce as sylvain, unfortunately, so

1562
01:03:52,700 --> 01:03:57,000
you can't just allocate anything you want and pass it back to Windows.

1563
01:03:57,200 --> 01:04:01,200
The reason for that is that it is going to be padded in a very

1564
01:04:01,200 --> 01:04:02,000
specific way.

1565
01:04:02,000 --> 01:04:06,900
That is the way that Windows wants it to be for doing the blit and it

1566
01:04:06,900 --> 01:04:08,100
has to be associated.

1567
01:04:08,300 --> 01:04:10,000
With a particular bitmap handle.

1568
01:04:11,100 --> 01:04:13,600
Basically, basically, it's not as simple as that is.

1569
01:04:13,600 --> 01:04:15,900
I guess the way I would say it will look at this a little bit more,

1570
01:04:15,900 --> 01:04:17,800
but, but here, see if you can

1571
01:04:21,300 --> 01:04:21,700
Okay.

1572
01:04:22,000 --> 01:04:26,100
So basically what happens here, is this guy when he when he allocates

1573
01:04:26,100 --> 01:04:27,000
that right?

1574
01:04:27,000 --> 01:04:32,700
We are going to we are going to get back memory that Windows actually

1575
01:04:32,700 --> 01:04:33,700
wanted us to use.

1576
01:04:33,700 --> 01:04:34,800
And as far as I know.

1577
01:04:35,100 --> 01:04:38,900
We cannot just willy-nilly decide to do it in a particular way.

1578
01:04:39,400 --> 01:04:40,600
Maybe that's not true.

1579
01:04:40,700 --> 01:04:43,100
If that's actually true that we don't have to have Windows do it.

1580
01:04:43,100 --> 01:04:44,200
That would be pretty awesome.

1581
01:04:44,300 --> 01:04:45,800
I mean we could certainly try it.

1582
01:04:46,400 --> 01:04:49,000
In fact, I guess since we're in the Q&A, we could totally try it on.

1583
01:04:49,200 --> 01:04:52,700
If you want me to, if you want me to go nuts here, we could totally

1584
01:04:52,700 --> 01:04:53,200
try it.

1585
01:04:53,300 --> 01:04:57,900
I'm I'm not optimistic that what you're saying is true, but

1586
01:04:59,100 --> 01:05:00,500
I mean we could test it.

1587
01:05:00,500 --> 01:05:00,500
Now.

1588
01:05:00,500 --> 01:05:04,000
The problem too is if we test that it works that doesn't actually mean

1589
01:05:04,400 --> 01:05:08,300
that it's the right thing to ship because you never know like maybe

1590
01:05:08,300 --> 01:05:09,200
you need a, I don't know.

1591
01:05:09,200 --> 01:05:09,800
I'm torn.

1592
01:05:09,900 --> 01:05:10,500
But you know what?

1593
01:05:10,500 --> 01:05:12,100
It's pretty easy for us to test.

1594
01:05:12,400 --> 01:05:14,200
So we could just test it.

1595
01:05:15,100 --> 01:05:19,700
We could just go ahead and say allocate the actual bits and then try

1596
01:05:19,700 --> 01:05:22,400
to Blind them and see if that works.

1597
01:05:22,400 --> 01:05:24,100
Let's, let's, let's, you know what?

1598
01:05:24,100 --> 01:05:25,300
I'm not going to actually do that.

1599
01:05:25,300 --> 01:05:28,500
I'm going to see if there's any actual.

1600
01:05:28,900 --> 01:05:31,900
Asian here about where those bits have to come from because it may

1601
01:05:31,900 --> 01:05:34,300
actually tell us what the case is here.

1602
01:05:36,000 --> 01:05:37,000
Let's find out.

1603
01:05:39,000 --> 01:05:44,600
Okay, this function do blah blah blah.

1604
01:05:47,900 --> 01:05:48,700
See, I'm just worried.

1605
01:05:48,700 --> 01:05:52,000
So here's what I here's I guess what I'll say, I'm pretty sure that we

1606
01:05:52,000 --> 01:05:57,300
could if we wanted to pass it, our own data that we created and yes,

1607
01:05:57,300 --> 01:05:59,600
it probably would allow us to paint to the screen.

1608
01:05:59,700 --> 01:05:59,800
I'm

1609
01:06:00,000 --> 01:06:02,400
Just not sure it would paint to the screen quickly.

1610
01:06:02,600 --> 01:06:05,900
It might go through basically a slow path if that makes sense.

1611
01:06:06,000 --> 01:06:07,400
I know I'm not explaining this very well.

1612
01:06:07,500 --> 01:06:11,600
But basically I thought you wanted Windows usually to allocate it in

1613
01:06:11,600 --> 01:06:15,400
its own way with its own layout and padding.

1614
01:06:16,200 --> 01:06:19,800
So that you would basically guarantee that it could that it knew, it

1615
01:06:19,800 --> 01:06:23,800
could be on the fast path and it didn't have to do any weird stuff to

1616
01:06:23,800 --> 01:06:24,400
make it happen.

1617
01:06:24,400 --> 01:06:28,500
But maybe that's not true and it's hard to figure out necessarily

1618
01:06:28,900 --> 01:06:29,800
where I would look for that.

1619
01:06:30,000 --> 01:06:31,300
Kind of thing in the documentation.

1620
01:06:31,300 --> 01:06:36,000
Obviously, we cannot step into windows and see, I've always done it by

1621
01:06:36,000 --> 01:06:42,700
using Create compatible, DC and having it, do it, but I'm not sure.

1622
01:06:42,700 --> 01:06:45,500
I wonder if Raymond Chen has something to say about this, because that

1623
01:06:45,500 --> 01:06:46,400
would be pretty awesome.

1624
01:06:47,000 --> 01:06:48,400
Let's see what the rest of the chap.

1625
01:06:48,400 --> 01:06:50,500
Does anyone else have an opinion on here?

1626
01:06:52,200 --> 01:06:52,700
Let's see.

1627
01:06:52,700 --> 01:06:53,700
I didn't stop a little comparing.

1628
01:06:53,700 --> 01:06:54,100
That's true.

1629
01:06:54,100 --> 01:06:55,500
I'm no longer going to split them.

1630
01:06:55,700 --> 01:06:58,400
I'm just going to do one, one and a half hour thing and people can

1631
01:06:58,400 --> 01:07:00,400
stop if in the middle.

1632
01:07:02,600 --> 01:07:04,000
Let's see.

1633
01:07:04,700 --> 01:07:06,800
Let's see.

1634
01:07:08,300 --> 01:07:12,700
Does anyone know does anyone know?

1635
01:07:17,200 --> 01:07:21,100
No, it doesn't look like it doesn't look like anyone has a definitive

1636
01:07:21,100 --> 01:07:21,500
answer.

1637
01:07:21,500 --> 01:07:21,800
I don't know.

1638
01:07:21,800 --> 01:07:23,900
So, so let's let's say s sylvain.

1639
01:07:23,900 --> 01:07:29,300
Let's let's say that that I will actually try to ask someone with

1640
01:07:29,300 --> 01:07:34,300
Windows internals knowledge and and I will try to ask them and if we

1641
01:07:34,300 --> 01:07:38,400
can't ask them, then what I will do is we will just we will just test.

1642
01:07:38,400 --> 01:07:43,400
Both we will just test both and see which if there's any speed hit to

1643
01:07:43,400 --> 01:07:46,500
either of them and we can also try that on lots of different peoples

1644
01:07:46,500 --> 01:07:46,800
machine.

1645
01:07:47,100 --> 01:07:50,200
Maybe so that we can see whether it's something that's safe to ship or

1646
01:07:50,200 --> 01:07:52,000
not, because honestly, I just don't know.

1647
01:07:52,000 --> 01:07:55,900
I don't think I've ever tried it without letting Windows allocate the

1648
01:07:55,900 --> 01:07:59,200
memory itself, and I'm just a little bit nervous about it because I

1649
01:07:59,200 --> 01:08:01,500
can't vouch for the fact that it will work.

1650
01:08:02,000 --> 01:08:04,500
Does create dibs.

1651
01:08:04,700 --> 01:08:05,000
Sorry.

1652
01:08:05,000 --> 01:08:06,600
Create compatible to see have to happen.

1653
01:08:10,700 --> 01:08:13,400
And we will take a look at that.

1654
01:08:13,600 --> 01:08:15,300
Okay, it's good point though.

1655
01:08:15,300 --> 01:08:15,900
It's an excellent point.

1656
01:08:15,900 --> 01:08:16,800
Thank you for bringing that up.

1657
01:08:16,800 --> 01:08:21,200
Because hey if that is the case, then we can just get rid of this,

1658
01:08:21,300 --> 01:08:22,100
this part right here.

1659
01:08:22,100 --> 01:08:24,500
This piece of the code, we can just create the bitmap header and we

1660
01:08:24,500 --> 01:08:26,700
can allocate the memory ourselves and off we go.

1661
01:08:26,700 --> 01:08:27,600
So no harm.

1662
01:08:27,600 --> 01:08:28,100
No foul.

1663
01:08:29,500 --> 01:08:32,000
Let's take a look at the questions.

1664
01:08:34,300 --> 01:08:37,800
Doo-doo-doo-doo-doo-doo-doo think we covered some of this.

1665
01:08:37,800 --> 01:08:40,300
These are will you be using sleep?

1666
01:08:40,500 --> 01:08:41,300
Yes, we will.

1667
01:08:41,500 --> 01:08:45,300
When we find that we complete the game Loop into Quick a time, and we

1668
01:08:45,300 --> 01:08:48,100
want to yield back sometime to the system so that we don't melt down

1669
01:08:48,100 --> 01:08:48,800
the CPU.

1670
01:08:49,100 --> 01:08:50,000
We will, you sleep.

1671
01:08:54,600 --> 01:08:56,000
Do do do.

1672
01:08:58,600 --> 01:08:59,800
Also, could you go back?

1673
01:09:00,000 --> 01:09:01,600
How you got Visual Studio to cooperate?

1674
01:09:01,600 --> 01:09:03,600
Yes, for those of you who missed it on the earlier stream.

1675
01:09:03,800 --> 01:09:07,899
If you are in a situation where we're Dev studio is not cooperating

1676
01:09:07,899 --> 01:09:10,100
with your build that you're using outside.

1677
01:09:10,200 --> 01:09:13,700
What you type is, you type Dev em, and then you type, the name of the

1678
01:09:13,700 --> 01:09:15,399
executable, you are trying to debug.

1679
01:09:15,399 --> 01:09:19,100
So, in this case, we put that in build win32.

1680
01:09:19,100 --> 01:09:21,100
Handmade exe was where it was.

1681
01:09:21,100 --> 01:09:26,700
So if I just do that line, it will go through and it will it will open

1682
01:09:26,700 --> 01:09:29,300
the eggs and started to bugging session for us.

1683
01:09:29,399 --> 01:09:29,899
That's all you.

1684
01:09:30,000 --> 01:09:32,800
Have to do, there's no no magic to it.

1685
01:09:32,800 --> 01:09:37,500
And then once you do that, if you go into tools options in here,

1686
01:09:37,500 --> 01:09:38,700
there's a start-up.

1687
01:09:38,800 --> 01:09:43,800
And if you set at startup to last loaded solution, you won't even have

1688
01:09:43,800 --> 01:09:44,500
to do that anymore.

1689
01:09:44,500 --> 01:09:47,399
Because once you have one up, it'll just always bring that one back up

1690
01:09:47,399 --> 01:09:47,800
again.

1691
01:09:48,200 --> 01:09:49,700
So that's kind of Handy.

1692
01:09:53,500 --> 01:09:56,500
Our other windowing systems less crazy to work with no.

1693
01:09:57,200 --> 01:10:01,800
Honestly know the weird thing about all this is honestly, you know, it

1694
01:10:01,800 --> 01:10:03,400
looks crazy and it is crazy.

1695
01:10:03,700 --> 01:10:08,600
You know, I am never going to defend the design of the windows API

1696
01:10:08,600 --> 01:10:12,100
because always should have had to do is just say we're a game, give us

1697
01:10:12,100 --> 01:10:15,500
a back buffer and it should have like how many people write games with

1698
01:10:15,500 --> 01:10:15,900
back bumpers?

1699
01:10:15,900 --> 01:10:17,800
There were so many of those at the time nowadays.

1700
01:10:17,800 --> 01:10:19,500
They use 2D graphics cards but back then.

1701
01:10:20,700 --> 01:10:23,200
When did it and so it should have just been one thing, it was like,

1702
01:10:23,300 --> 01:10:24,200
hey, guess what?

1703
01:10:24,400 --> 01:10:26,300
You enter win, Maine and you make a call.

1704
01:10:26,300 --> 01:10:29,800
That's like I'm a game and it just sets everything up for you

1705
01:10:29,900 --> 01:10:30,500
correctly.

1706
01:10:30,500 --> 01:10:33,400
And there's so many reasons why operating system should do that.

1707
01:10:33,400 --> 01:10:36,900
Because they would basically lead to far fewer bugs because everyone

1708
01:10:36,900 --> 01:10:38,100
who makes a game, doesn't know.

1709
01:10:38,100 --> 01:10:39,100
All the minutiae windows.

1710
01:10:39,100 --> 01:10:39,500
I don't know.

1711
01:10:39,500 --> 01:10:40,300
All the minutiae Windows.

1712
01:10:40,300 --> 01:10:42,500
No one who shipped a game ever knows all the moves, your windows.

1713
01:10:42,600 --> 01:10:46,000
And so they will miss something or whatever that they were supposed to

1714
01:10:46,000 --> 01:10:48,100
do to handle like a certain key combinations going.

1715
01:10:48,300 --> 01:10:49,000
And so it's just bad.

1716
01:10:49,000 --> 01:10:50,600
So yeah, it's I'm not

1717
01:10:50,700 --> 01:10:54,000
To defend the design of the windows API at all.

1718
01:10:54,000 --> 01:10:57,900
It's bad news, but basically everything is bad news.

1719
01:10:57,900 --> 01:11:03,900
I mean, you know, you go write a game in HTML5 and it's a nightmare.

1720
01:11:03,900 --> 01:11:04,900
The stuff that goes on there.

1721
01:11:04,900 --> 01:11:06,500
Take a look at the audio API for that.

1722
01:11:06,500 --> 01:11:07,400
It's awful.

1723
01:11:07,400 --> 01:11:11,000
I mean, there's just, there's so many things wrong with most of these

1724
01:11:11,000 --> 01:11:15,000
platforms that picking on Windows is not that productive because while

1725
01:11:15,000 --> 01:11:19,000
they are bad in some ways are almost less bad than some of the things

1726
01:11:19,000 --> 01:11:20,300
that people have been making.

1727
01:11:20,800 --> 01:11:25,300
Several decades later and what's that excuse, you know, in 20 years or

1728
01:11:25,300 --> 01:11:25,700
whatever.

1729
01:11:25,700 --> 01:11:31,200
Since, you know, the last major, rev of the win32 API, what's the

1730
01:11:31,200 --> 01:11:32,000
excuse people?

1731
01:11:32,000 --> 01:11:34,200
You know, I mean things should be really clean nowadays and they

1732
01:11:34,200 --> 01:11:40,000
aren't and so I don't really, you know, I whine about window certainly

1733
01:11:40,000 --> 01:11:42,900
because I don't like using it anymore than anyone else.

1734
01:11:42,900 --> 01:11:46,100
But at the end of the day, it's it's no worse and even sometimes

1735
01:11:46,100 --> 01:11:49,500
better A lot of times than some of the newer stuff and that is frankly

1736
01:11:49,500 --> 01:11:50,500
just depressing because I

1737
01:11:50,600 --> 01:11:53,700
I'd rather live in a world where operating systems were getting easier

1738
01:11:53,700 --> 01:11:55,400
to work with everyday not harder.

1739
01:11:55,400 --> 01:11:58,500
And what's funny about that is even Windows itself is also getting

1740
01:11:58,500 --> 01:11:59,700
harder to work with every day.

1741
01:12:00,000 --> 01:12:03,200
As they've started revving, their API in ways that make it worse,

1742
01:12:03,200 --> 01:12:04,200
which is crazy.

1743
01:12:05,400 --> 01:12:05,900
So, I don't know.

1744
01:12:05,900 --> 01:12:08,700
That's why I'm still using a lot of the old school functions to is

1745
01:12:08,700 --> 01:12:11,500
because, man, the new functions are even more ridiculous.

1746
01:12:16,300 --> 01:12:17,000
Let's see.

1747
01:12:21,200 --> 01:12:22,400
This is entirely related today.

1748
01:12:22,400 --> 01:12:25,000
But are you going to do a more detailed intro to sealed series

1749
01:12:25,000 --> 01:12:25,800
alongside this?

1750
01:12:25,800 --> 01:12:27,900
Yes, I would like to do that some day.

1751
01:12:27,900 --> 01:12:29,500
The only problem is my voice.

1752
01:12:30,200 --> 01:12:31,600
I don't know how much voice I got in me.

1753
01:12:31,600 --> 01:12:33,700
If I start trying to do other stuff in parallel with this, maybe we

1754
01:12:33,700 --> 01:12:36,200
could take a week off and do a more detailed in terms of seriously,

1755
01:12:36,200 --> 01:12:38,800
but probably have to be do a real intro to see it might have to be a

1756
01:12:38,800 --> 01:12:39,300
couple weeks.

1757
01:12:39,300 --> 01:12:40,900
And I don't know when we're going to have time to do that.

1758
01:12:41,400 --> 01:12:42,400
So it's a good question.

1759
01:12:43,000 --> 01:12:46,200
I would say watch the regular intro to see one and do a lot of reading

1760
01:12:46,200 --> 01:12:49,900
on the side like read KN are the C programming language or just

1761
01:12:49,900 --> 01:12:50,900
practice in any

1762
01:12:51,100 --> 01:12:54,800
Actually, it's practice programming if you're unfamiliar with it and

1763
01:12:54,800 --> 01:12:58,300
read up about see, it shouldn't be that hard to sort of get into most

1764
01:12:58,300 --> 01:13:01,400
of it because the stuff that I do in the intro to see is all sort of

1765
01:13:01,400 --> 01:13:02,900
showing you how it all ties together.

1766
01:13:02,900 --> 01:13:05,300
Like, you know, looking at memory and looking at those sorts of things

1767
01:13:05,600 --> 01:13:07,700
that are the sorts of things that people aren't used to doing if

1768
01:13:07,700 --> 01:13:10,500
they're working in languages that aren't low-level like C is.

1769
01:13:11,100 --> 01:13:14,200
And so I think that maybe I hope that people will be able to educate

1770
01:13:14,200 --> 01:13:16,300
themselves about see a little bit if they're used to some other

1771
01:13:16,300 --> 01:13:19,900
programming language in the meantime now, but yes, I would like to do

1772
01:13:19,900 --> 01:13:20,800
a real beginners.

1773
01:13:21,200 --> 01:13:25,300
Intro to see where we take it real slow and go through absolutely

1774
01:13:25,300 --> 01:13:29,300
everything, but I don't know when realistically I will be able to do

1775
01:13:29,300 --> 01:13:33,400
that because there's only so much I can record without my voice going.

1776
01:13:35,500 --> 01:13:38,000
Let's see.

1777
01:13:38,000 --> 01:13:41,700
Your to-do can explain.

1778
01:13:41,700 --> 01:13:41,800
What?

1779
01:13:41,800 --> 01:13:43,700
Exactly is a void star pointer to nothing.

1780
01:13:43,700 --> 01:13:46,700
Yes, I can and we will get to that a little bit more detail.

1781
01:13:46,700 --> 01:13:47,600
When we Act start to draw.

1782
01:13:47,600 --> 01:13:52,600
The reason it was a void star was actually because we don't want to

1783
01:13:52,600 --> 01:13:54,200
specify the type that were pointing to.

1784
01:13:54,200 --> 01:13:59,000
So if you remember a pointer is just a value that says a number which

1785
01:13:59,000 --> 01:14:02,000
is the offset in memory where something is right.

1786
01:14:02,000 --> 01:14:05,000
And so if I actually someone saying I forgot to move Chrome to the

1787
01:14:05,000 --> 01:14:05,500
side we need to

1788
01:14:05,600 --> 01:14:08,600
Like this doc Chrome on the side there, I guess or something and leave

1789
01:14:08,600 --> 01:14:08,900
it there.

1790
01:14:08,900 --> 01:14:10,400
So people can look at the code of the same time.

1791
01:14:10,400 --> 01:14:11,200
I got to learn to do that.

1792
01:14:11,200 --> 01:14:13,500
People have been asking for that and I should do that.

1793
01:14:13,800 --> 01:14:18,700
But anyway, if we go in here and take a look, which we should do if we

1794
01:14:18,700 --> 01:14:20,800
take a look at that void start.

1795
01:14:22,100 --> 01:14:23,700
This is a pretty interesting thing that happened here.

1796
01:14:23,700 --> 01:14:24,800
So let's talk about it.

1797
01:14:25,300 --> 01:14:30,200
Basically, we've got a situation where we want Windows to give us back

1798
01:14:30,300 --> 01:14:32,600
some bitmap memory basically, right?

1799
01:14:32,900 --> 01:14:34,500
And that bitmap memory.

1800
01:14:34,700 --> 01:14:35,400
It doesn't know the

1801
01:14:35,500 --> 01:14:36,600
Format of the bitmap memory.

1802
01:14:36,600 --> 01:14:37,900
Because remember we pass stuff?

1803
01:14:37,900 --> 01:14:42,100
Like what kind of compression to use and and whether it was palletized

1804
01:14:42,100 --> 01:14:42,700
or not.

1805
01:14:42,800 --> 01:14:47,700
And so the function, great dip section can only have one function

1806
01:14:47,700 --> 01:14:50,200
signature C does not allow you to say stuff.

1807
01:14:50,200 --> 01:14:56,500
Like this one function could take 60 an unsigned short star or an

1808
01:14:56,500 --> 01:14:59,300
unsigned in star or an Ensign care star, so

1809
01:15:00,000 --> 01:15:01,800
Three and blah.

1810
01:15:01,800 --> 01:15:02,300
Blah, blah, right.

1811
01:15:02,300 --> 01:15:03,200
You can't do that.

1812
01:15:03,300 --> 01:15:05,700
The only thing she can do is use void star.

1813
01:15:05,800 --> 01:15:09,100
And what void star means is some kind of pointer.

1814
01:15:09,300 --> 01:15:12,400
It says I want a pointer but I don't care what it points to so

1815
01:15:12,400 --> 01:15:13,600
anything is fine.

1816
01:15:13,800 --> 01:15:14,500
Right?

1817
01:15:15,100 --> 01:15:17,500
And so basically what we're doing when we say void started saying

1818
01:15:17,500 --> 01:15:19,800
we're going to get back at pointer, but we don't actually know that

1819
01:15:20,900 --> 01:15:23,800
the format of the thing to which it is pointing and later.

1820
01:15:23,800 --> 01:15:27,400
What we'll do is we'll cast it to the format that we actually want to

1821
01:15:27,400 --> 01:15:29,900
use at the time and because this is

1822
01:15:30,000 --> 01:15:32,700
Is a bitmap that we're going to be jumping through and writing to and

1823
01:15:32,700 --> 01:15:33,200
different ways.

1824
01:15:33,200 --> 01:15:35,100
We will probably actually cast it to more than one thing.

1825
01:15:35,100 --> 01:15:36,000
Depending on the circumstance.

1826
01:15:36,000 --> 01:15:40,100
We will cast it to a car star, which is an 8-bit value pointer to an

1827
01:15:40,100 --> 01:15:40,700
8-bit value.

1828
01:15:40,700 --> 01:15:44,500
When we want to move around in it to find a location in it, so that we

1829
01:15:44,500 --> 01:15:45,600
can do arithmetic on it.

1830
01:15:45,800 --> 01:15:50,100
And then we will probably cast it to a unsigned int, which is a 32-bit

1831
01:15:50,300 --> 01:15:54,600
value when we actually want to poke at the individual values because

1832
01:15:54,800 --> 01:15:58,500
that will allow us to write the RGB and a values, which is actually

1833
01:15:58,500 --> 01:15:59,800
Arginine X values, but whatever.

1834
01:16:00,200 --> 01:16:03,900
We're going to write those directly as one chunk probably and we'll

1835
01:16:03,900 --> 01:16:04,900
even do some more stuff.

1836
01:16:04,900 --> 01:16:05,900
That's even crazier later.

1837
01:16:05,900 --> 01:16:08,900
Probably but point being, that is what avoid, sorry.

1838
01:16:08,900 --> 01:16:12,100
So what happens in here when we call create dip section is, you'll

1839
01:16:12,100 --> 01:16:12,400
notice.

1840
01:16:12,400 --> 01:16:14,400
We're not just passing avoid star.

1841
01:16:14,400 --> 01:16:16,700
We're not passing a pointer to B that memory.

1842
01:16:16,900 --> 01:16:21,600
We're passing a pointer to the pointer to bitmap memory, right?

1843
01:16:21,600 --> 01:16:25,600
Because right here, you can see I use the address operator to take the

1844
01:16:25,600 --> 01:16:27,400
address of the bitmap memory.

1845
01:16:27,500 --> 01:16:29,800
So basically what's happening is if you go into the department,

1846
01:16:29,900 --> 01:16:34,700
Bugger, if I run to that line right here, we are about to call create

1847
01:16:34,700 --> 01:16:35,400
dip section.

1848
01:16:36,000 --> 01:16:39,500
You can basically see that bitmap memory is just all zeros and I am

1849
01:16:39,500 --> 01:16:41,900
passing address of bitmap memory.

1850
01:16:42,100 --> 01:16:42,700
Right?

1851
01:16:42,900 --> 01:16:44,200
So I am passing it.

1852
01:16:44,200 --> 01:16:49,700
The address of the pointer that I would like Windows to then go over

1853
01:16:49,700 --> 01:16:53,800
right with the new pointer that points to the memory that it

1854
01:16:53,800 --> 01:16:54,700
allocated.

1855
01:16:55,000 --> 01:16:58,800
And this is a very standard trick that people do in see all the time

1856
01:16:59,000 --> 01:16:59,800
basically what it boils.

1857
01:17:00,000 --> 01:17:05,100
Down to is, you have a function and you want to return more than one

1858
01:17:05,100 --> 01:17:07,400
value value from it, right?

1859
01:17:07,400 --> 01:17:09,000
And that's exactly what happened here.

1860
01:17:09,000 --> 01:17:09,200
Right?

1861
01:17:09,200 --> 01:17:13,500
Creative section needs to be able to return a bitmap handle, but it

1862
01:17:13,500 --> 01:17:16,400
basically also needs to be able to return this bitmap memory.

1863
01:17:17,200 --> 01:17:19,700
So I wouldn't necessarily do it this way.

1864
01:17:19,800 --> 01:17:23,700
But the way that a lot of people do do it is they just pass in the

1865
01:17:23,700 --> 01:17:28,900
address of more memory like more variables than take the address of

1866
01:17:28,900 --> 01:17:29,800
them and say,

1867
01:17:29,900 --> 01:17:31,600
Here's where I want you to stick.

1868
01:17:31,600 --> 01:17:35,700
Those other return values that you couldn't stick on the stack because

1869
01:17:35,700 --> 01:17:38,000
C only, lets you have one return value.

1870
01:17:38,000 --> 01:17:38,400
Now.

1871
01:17:38,500 --> 01:17:40,600
The reason I say, I wouldn't necessarily do it that way is because,

1872
01:17:40,600 --> 01:17:41,600
see, really does.

1873
01:17:41,600 --> 01:17:44,300
Let you do multiple return values.

1874
01:17:44,300 --> 01:17:51,800
It lets you do multiple return values like this struct create dib

1875
01:17:51,900 --> 01:17:54,000
section result.

1876
01:17:54,000 --> 01:17:56,500
And this is how I probably would have done it.

1877
01:17:56,500 --> 01:17:56,900
Now granted.

1878
01:17:56,900 --> 01:17:59,800
This is an API barrier that has some certain requirements.

1879
01:18:00,000 --> 01:18:02,600
So I'm not necessarily fall out the windows people for not doing it

1880
01:18:02,600 --> 01:18:04,300
this way because there's other reasons that play there.

1881
01:18:04,300 --> 01:18:07,300
But if this was internal to our own code, let's say I would probably

1882
01:18:07,300 --> 01:18:08,100
not do it that way.

1883
01:18:08,100 --> 01:18:11,100
I would put the bitmap result in here.

1884
01:18:11,200 --> 01:18:14,700
Let's say and I would put the memory results.

1885
01:18:14,700 --> 01:18:17,600
So here is the memory and actually this was called that I think this

1886
01:18:17,600 --> 01:18:19,400
is a handle I should say, right?

1887
01:18:19,500 --> 01:18:23,200
And then what I would do is when I Define create dip section, I would

1888
01:18:23,200 --> 01:18:25,900
Define it to work like this.

1889
01:18:25,900 --> 01:18:29,900
So basically in here, we pass the device context, we pass the

1890
01:18:30,000 --> 01:18:34,900
It mapinfo, we pass the the usage code and we pass the other stuff

1891
01:18:35,400 --> 01:18:38,400
here and here, but we never pass the address to bitmap memory.

1892
01:18:38,900 --> 01:18:41,300
Because basically what happens is create dip section will return a

1893
01:18:41,300 --> 01:18:41,800
struct.

1894
01:18:41,800 --> 01:18:43,200
That has both things in it.

1895
01:18:43,400 --> 01:18:47,700
I like that way better personally and there's really no reason not to

1896
01:18:47,700 --> 01:18:52,100
do it because C does, let you return structures by value and that is

1897
01:18:52,100 --> 01:18:55,200
the way that I prefer to return multiple things.

1898
01:18:55,200 --> 01:18:59,700
So it's clearer and no one's taking addresses of things and so on.

1899
01:18:59,700 --> 01:18:59,800
Now,

1900
01:19:03,000 --> 01:19:06,000
There can be performance problems with this potentially.

1901
01:19:06,100 --> 01:19:07,700
So you don't want to necessarily do this.

1902
01:19:07,700 --> 01:19:11,000
If this thing was going to be huge for some reason, but if it's only

1903
01:19:11,000 --> 01:19:13,700
two values for all, I know this actually might be more efficient.

1904
01:19:13,700 --> 01:19:15,300
It depends on the circumstances, right?

1905
01:19:15,800 --> 01:19:19,600
So, basically, I would say that this is a pretty sane way to do two

1906
01:19:19,600 --> 01:19:20,900
small return values.

1907
01:19:20,900 --> 01:19:23,000
I would rather do it this way, then do it.

1908
01:19:23,000 --> 01:19:23,700
The way that they did.

1909
01:19:27,400 --> 01:19:29,400
Okay, we're back to yes.

1910
01:19:30,500 --> 01:19:31,600
Looking at the questions.

1911
01:19:31,600 --> 01:19:31,900
I'm sorry.

1912
01:19:31,900 --> 01:19:33,400
I can't get to everyone's questions at this point.

1913
01:19:33,400 --> 01:19:34,700
There are so many viewers on the stream.

1914
01:19:34,700 --> 01:19:36,400
That is both a blessing and a curse.

1915
01:19:36,400 --> 01:19:39,100
It is so nice to see so many people on the stream, but it does mean

1916
01:19:39,100 --> 01:19:40,100
that in 30 minutes.

1917
01:19:40,400 --> 01:19:43,800
I am just I'm just randomly picking questions, and maybe we're going

1918
01:19:43,800 --> 01:19:44,600
to have to do something someday.

1919
01:19:44,600 --> 01:19:47,600
Where somebody who some kind soul out there will basically watch the

1920
01:19:47,600 --> 01:19:50,000
questions and try to select the most interesting ones or something.

1921
01:19:50,100 --> 01:19:53,300
I'm just basically randomly picking what I happen to see people.

1922
01:19:58,500 --> 01:20:02,700
Let's see, do do do.

1923
01:20:02,700 --> 01:20:05,600
Do, do any new thoughts on?

1924
01:20:05,600 --> 01:20:06,100
I am gooey.

1925
01:20:06,100 --> 01:20:07,500
Since you made that video a few years ago.

1926
01:20:07,500 --> 01:20:09,200
I assume the UI in this game will be.

1927
01:20:09,200 --> 01:20:12,400
I am I am the person who actually coined that phrase.

1928
01:20:12,400 --> 01:20:16,100
It is true and I made that weird little video and it seems like it's

1929
01:20:16,100 --> 01:20:18,400
been something that's a little bit more popular nowadays.

1930
01:20:19,400 --> 01:20:23,300
However, we are not going to get to that to a little bit later on.

1931
01:20:23,600 --> 01:20:25,800
We are going to probably do some IM stuff.

1932
01:20:25,800 --> 01:20:26,400
I should say.

1933
01:20:26,400 --> 01:20:26,900
We probably

1934
01:20:27,100 --> 01:20:29,900
Almost certainly will in the course of the stream deal.

1935
01:20:29,900 --> 01:20:32,500
With I am gooey like things and I will actually for the first time

1936
01:20:32,500 --> 01:20:35,800
talk a little bit about the philosophy of, I am gooey in later on in

1937
01:20:35,800 --> 01:20:39,800
these streams because I never really did a good job of explaining to

1938
01:20:39,800 --> 01:20:40,200
people.

1939
01:20:40,200 --> 01:20:42,400
How I am gooey, really was supposed to work.

1940
01:20:42,500 --> 01:20:47,600
And when I go look at a lot of I am gooey discussions while I'm very

1941
01:20:47,600 --> 01:20:49,800
glad to see that the technique caught on because I think it's good.

1942
01:20:49,800 --> 01:20:54,200
A lot of them tend to miss the point a little bit and that is my fault

1943
01:20:54,200 --> 01:20:55,900
for doing a bad job explaining it.

1944
01:20:55,900 --> 01:20:56,900
And it was probably also because I

1945
01:20:57,000 --> 01:20:59,900
Did that video pretty early on in my understanding of how I am Jewish?

1946
01:21:00,000 --> 01:21:00,400
Work.

1947
01:21:00,800 --> 01:21:04,000
And so I should probably set that record straight and I will do that

1948
01:21:04,000 --> 01:21:07,100
sometime during this series, that will be a lot of fun.

1949
01:21:07,100 --> 01:21:08,100
I look forward to it.

1950
01:21:15,600 --> 01:21:17,200
So SL then follows up.

1951
01:21:17,200 --> 01:21:20,500
He says after a cursory glance at the stress GI B Source, it looks

1952
01:21:20,500 --> 01:21:22,500
like at the stretch of its sorts.

1953
01:21:22,800 --> 01:21:24,100
Are you a Microsoft person?

1954
01:21:25,000 --> 01:21:26,000
That is pretty awesome.

1955
01:21:26,000 --> 01:21:28,300
If you can look at the source, it looks like it's fine to pass around

1956
01:21:28,300 --> 01:21:28,600
buffer.

1957
01:21:28,600 --> 01:21:31,000
However, if it's not d word aligned, it'll make a local copy.

1958
01:21:31,000 --> 01:21:35,800
That's fine because we could easily ensure that it was d word aligned.

1959
01:21:38,100 --> 01:21:39,400
That would be great.

1960
01:21:40,800 --> 01:21:41,800
That would be great.

1961
01:21:41,800 --> 01:21:46,600
We're going to put it to do based on S silvanus.

1962
01:21:46,600 --> 01:21:49,200
You know, I got to say this is a great thing about doing public

1963
01:21:49,200 --> 01:21:49,700
programming.

1964
01:21:49,700 --> 01:21:52,900
I mean, you don't have someone who can check the window source for you

1965
01:21:53,000 --> 01:21:54,300
just right off the bat like that.

1966
01:21:54,300 --> 01:21:55,500
That's that's crazy.

1967
01:21:56,100 --> 01:21:59,600
Based on S Sullivan's, suggestion.

1968
01:22:00,600 --> 01:22:06,900
Maybe we can just allocate this our cells and that would be great

1969
01:22:06,900 --> 01:22:07,700
because that would remove.

1970
01:22:08,300 --> 01:22:10,400
This right here, we could get rid of me.

1971
01:22:10,400 --> 01:22:14,300
Just this would turn into a memory allocation and we could get rid of

1972
01:22:14,300 --> 01:22:15,300
this entirely.

1973
01:22:15,300 --> 01:22:17,100
That would be fantastic as Silvan.

1974
01:22:18,500 --> 01:22:19,700
Thank you very much for doing that.

1975
01:22:19,700 --> 01:22:20,700
We will we will test it.

1976
01:22:20,700 --> 01:22:23,300
I appreciate the fact that yes, he's saying it's complicated code and

1977
01:22:23,300 --> 01:22:24,800
he didn't look at that carefully.

1978
01:22:24,800 --> 01:22:26,000
So maybe that's not true.

1979
01:22:26,200 --> 01:22:26,800
We don't know yet.

1980
01:22:26,800 --> 01:22:31,000
But you know what Co gramming is always an exploration exploration.

1981
01:22:31,500 --> 01:22:34,200
I never know everything that's going on.

1982
01:22:34,700 --> 01:22:37,600
That should be totally obvious and neither does any other

1983
01:22:37,900 --> 01:22:41,200
We're out there that I know basically you are always exploring.

1984
01:22:41,200 --> 01:22:43,700
That's one of the reasons that I like the idea that this game is also

1985
01:22:43,700 --> 01:22:45,500
going to be about exploration because that is what programming is

1986
01:22:45,500 --> 01:22:45,900
about.

1987
01:22:45,900 --> 01:22:50,500
There's always more to learn and so, you know, this will be a learning

1988
01:22:50,500 --> 01:22:51,100
experience.

1989
01:22:51,300 --> 01:22:55,500
I've shipped so much code in my lifetime that actually always asks

1990
01:22:55,500 --> 01:22:56,400
windows for this memory.

1991
01:22:56,400 --> 01:22:58,300
And now if it turns out that you don't have to do that.

1992
01:22:58,300 --> 01:22:58,800
That is awesome.

1993
01:22:58,800 --> 01:23:02,200
That's just something that I don't have to do anymore and it's kind of

1994
01:23:02,200 --> 01:23:02,600
cool.

1995
01:23:02,800 --> 01:23:04,000
That's got that be great.

1996
01:23:05,400 --> 01:23:06,600
So, we'll find out.

1997
01:23:08,200 --> 01:23:09,400
Let's see.

1998
01:23:10,900 --> 01:23:11,200
Doot, doot.

1999
01:23:11,200 --> 01:23:12,700
Doot.

2000
01:23:14,500 --> 01:23:15,900
When will The Source be up for download?

2001
01:23:15,900 --> 01:23:18,200
It's always up for download right after the video, pretty much.

2002
01:23:18,200 --> 01:23:19,800
I push it pretty much immediately.

2003
01:23:19,800 --> 01:23:23,600
So if you download say like an hour, after the video ends, you will

2004
01:23:23,600 --> 01:23:24,600
get this source.

2005
01:23:27,900 --> 01:23:29,300
Let's see.

2006
01:23:29,300 --> 01:23:30,300
What else we got.

2007
01:23:32,200 --> 01:23:35,700
When using emacs, I find it hard to use, meta key with f and B to skip

2008
01:23:35,700 --> 01:23:39,400
words, how do you do it so fast, I use the Bindings that I have in my

2009
01:23:39,600 --> 01:23:42,600
team x file, which is hold down control and use the arrow keys.

2010
01:23:45,400 --> 01:23:46,100
Much, much better.

2011
01:23:49,000 --> 01:23:52,900
How come that not equal to 0 is true in C and the return values remain

2012
01:23:52,900 --> 01:23:55,100
and functions is 0 if everything is okay.

2013
01:23:55,300 --> 01:23:58,500
Yeah, that's a darn good question.

2014
01:23:58,500 --> 01:23:59,900
All right, so basically,

2015
01:24:00,000 --> 01:24:04,400
The way things work in C is C, is defined as saying that something is

2016
01:24:04,400 --> 01:24:04,800
true.

2017
01:24:04,800 --> 01:24:09,000
If it is not 0 and it is false, if it is 0 and I think that's a great

2018
01:24:09,000 --> 01:24:09,600
idea.

2019
01:24:09,700 --> 01:24:10,900
That is the way it should work.

2020
01:24:11,000 --> 01:24:12,300
I have no complaints about that.

2021
01:24:12,300 --> 01:24:17,400
However, what did happen with the c runtime library and which has been

2022
01:24:17,600 --> 01:24:20,800
picked up by a lot of people, not their fault.

2023
01:24:20,800 --> 01:24:22,000
They're just trying to be compatible C.

2024
01:24:22,000 --> 01:24:24,900
Runtime library is a lot of times, they will do something where they

2025
01:24:24,900 --> 01:24:28,200
will do, do the thing, you know, like this.

2026
01:24:28,200 --> 01:24:29,900
They Define a function and then there is

2027
01:24:30,000 --> 01:24:32,900
Is an integer that is going to come back and that integer is the error

2028
01:24:32,900 --> 01:24:33,300
code.

2029
01:24:33,300 --> 01:24:38,700
So the error code is 0 if there is no error right and then in here,

2030
01:24:39,300 --> 01:24:44,600
you know, if something went wrong with what we did, the error code

2031
01:24:44,600 --> 01:24:53,400
becomes, let's say negative 2 or if some other thing went wrong, then

2032
01:24:53,400 --> 01:24:56,600
the error code becomes 12 and there's a table of error codes and you

2033
01:24:56,600 --> 01:24:57,300
can check them.

2034
01:24:57,900 --> 01:24:59,800
That is what often happens and

2035
01:25:00,400 --> 01:25:04,600
The reason they're doing that is so that they can snuggle a little bit

2036
01:25:04,600 --> 01:25:05,900
of information in there.

2037
01:25:06,600 --> 01:25:11,600
That's not just whether the thing succeeded, but whether it's exceeded

2038
01:25:11,600 --> 01:25:14,600
or but whether it failed in a particular way if you will.

2039
01:25:15,200 --> 01:25:18,800
And so the reason that that's kind of confusing is because now when

2040
01:25:18,800 --> 01:25:21,800
you're out in the code and this is what the the person the question

2041
01:25:21,900 --> 01:25:26,300
was addressing, if I do something like, result, equals do the thing.

2042
01:25:27,200 --> 01:25:31,800
Like this and then I do if result that looks like I'm testing to see

2043
01:25:31,800 --> 01:25:34,700
whether do the thing succeeded but it's not it's actually testing

2044
01:25:34,700 --> 01:25:39,100
whether it failed because if it succeeded it'll be 0 and if it failed

2045
01:25:39,100 --> 01:25:39,900
it'll be something else.

2046
01:25:39,900 --> 01:25:43,500
So you have to test that which looks bizarre and it's not the way you

2047
01:25:43,500 --> 01:25:44,400
would test anything else.

2048
01:25:44,400 --> 01:25:47,600
For example, if you want to know if a pointer was no, it would be the

2049
01:25:47,600 --> 01:25:48,600
other way round.

2050
01:25:48,600 --> 01:25:49,500
It would be that way.

2051
01:25:49,800 --> 01:25:51,100
So it leads to confusion.

2052
01:25:51,100 --> 01:25:52,700
I try never to do this.

2053
01:25:52,700 --> 01:25:56,600
I try to handle error codes in a different way, but what can you do?

2054
01:25:57,000 --> 01:26:00,100
That is just the way that some people program, and it is the way, the

2055
01:26:00,100 --> 01:26:01,200
C runtime lot of programs.

2056
01:26:01,200 --> 01:26:02,400
And you have to be aware of.

2057
01:26:02,400 --> 01:26:05,000
It's also how Berkeley sockets work, I believe.

2058
01:26:05,000 --> 01:26:08,700
So, if you're using like, socket Library, it tends to work that way.

2059
01:26:08,700 --> 01:26:11,500
It's just, there's a lot of things that work that way and not much you

2060
01:26:11,500 --> 01:26:12,100
can do about it.

2061
01:26:15,800 --> 01:26:17,800
Let's see.

2062
01:26:19,100 --> 01:26:21,700
Pre Aunt CC didn't allow return structs.

2063
01:26:22,000 --> 01:26:23,600
So that's 0.

2064
01:26:23,600 --> 01:26:24,800
Is that Sean Barrett?

2065
01:26:25,800 --> 01:26:26,800
That would be fabulous with Sean.

2066
01:26:26,800 --> 01:26:27,600
Barrett was here.

2067
01:26:27,700 --> 01:26:28,000
Sean.

2068
01:26:28,000 --> 01:26:30,700
Barrett is for those of you who do not know him.

2069
01:26:30,700 --> 01:26:33,700
He is a pretty story and programmer.

2070
01:26:33,700 --> 01:26:36,600
Actually, in fact, the thing that you would probably most recognized

2071
01:26:36,700 --> 01:26:41,300
of his, he wrote the the renderer and again, this is in the days when

2072
01:26:41,300 --> 01:26:46,200
there was no 3D Hardware, so he wrote from scratch, the 3D renderer

2073
01:26:46,400 --> 01:26:50,300
for thief, the Dark Project, which is a very famous game, and of

2074
01:26:50,300 --> 01:26:51,800
course, is a lineage that still exist.

2075
01:26:51,800 --> 01:26:53,500
They still ship these games to this day.

2076
01:26:53,500 --> 01:26:55,500
Obviously, they use gpus and all kinds of crazy.

2077
01:26:55,600 --> 01:26:59,800
stuff now, but he is the fellow who wrote that renderer and a

2078
01:27:00,100 --> 01:27:00,900
Excellent programmer.

2079
01:27:00,900 --> 01:27:06,000
He wrote the stb libraries as well, which are things that everyone

2080
01:27:06,000 --> 01:27:06,900
should take a look at.

2081
01:27:07,300 --> 01:27:10,400
I again, I'm teaching something where I where I program everything

2082
01:27:10,400 --> 01:27:11,900
from scratch so I won't be using them.

2083
01:27:11,900 --> 01:27:15,500
But when you are looking around to see what libraries are available,

2084
01:27:15,500 --> 01:27:17,800
once, you are comfortable with stuff and can make good decisions about

2085
01:27:17,800 --> 01:27:18,500
what to use.

2086
01:27:18,700 --> 01:27:19,700
Those are some ones to look at.

2087
01:27:19,700 --> 01:27:22,700
They do a lot of great stuff in a very concise way, compact way that

2088
01:27:22,700 --> 01:27:26,100
doesn't create headaches for you, which is what a lot of libraries do.

2089
01:27:26,100 --> 01:27:27,400
So, yes.

2090
01:27:27,500 --> 01:27:28,000
Anyway.

2091
01:27:28,400 --> 01:27:29,800
Thank you very much for for

2092
01:27:30,000 --> 01:27:30,900
For watching Sean.

2093
01:27:30,900 --> 01:27:35,800
And basically, what I would say is I know almost nothing about pre

2094
01:27:35,800 --> 01:27:36,500
ANSI C.

2095
01:27:36,500 --> 01:27:40,600
And Sean is telling us that pre ANSI C didn't allow return struck.

2096
01:27:40,600 --> 01:27:44,000
So that thing that I showed would not have been allowed way way back

2097
01:27:44,000 --> 01:27:48,200
when like several decades ago before the ANSI standard standardized.

2098
01:27:48,300 --> 01:27:48,800
See.

2099
01:27:48,900 --> 01:27:54,200
And so maybe that explains why that didn't catch on initially because

2100
01:27:54,200 --> 01:27:57,100
people couldn't do it and then later when it became possible to do it,

2101
01:27:57,100 --> 01:27:59,900
maybe people didn't rethink how

2102
01:28:00,200 --> 01:28:03,700
They might do return values when they had multiple things because that

2103
01:28:03,700 --> 01:28:04,300
wasn't possible.

2104
01:28:04,300 --> 01:28:06,400
So that's a pretty interesting thing.

2105
01:28:06,500 --> 01:28:07,100
Obviously.

2106
01:28:07,100 --> 01:28:09,500
I think I've always programmed in things that supported ANSI C.

2107
01:28:09,500 --> 01:28:12,600
So I don't know that I've ever had to Wrangle with that but I don't

2108
01:28:12,600 --> 01:28:12,800
know.

2109
01:28:12,800 --> 01:28:17,000
It could be some time way back when I was doing it, but that's okay.

2110
01:28:17,000 --> 01:28:20,300
I've started doing relatively recently probably in the Wrath last 15

2111
01:28:20,300 --> 01:28:20,700
years or so.

2112
01:28:20,700 --> 01:28:21,100
Anyway,

2113
01:28:24,800 --> 01:28:25,900
Let's see.

2114
01:28:26,000 --> 01:28:29,200
Any reason you put the type in the line above the function name.

2115
01:28:29,200 --> 01:28:30,400
It is a force of habit.

2116
01:28:30,500 --> 01:28:33,800
Probably not a fantastic habit, but I just like to separate the two

2117
01:28:33,800 --> 01:28:35,700
out so I can see what the type is there.

2118
01:28:35,700 --> 01:28:36,900
I don't know why I do it.

2119
01:28:37,200 --> 01:28:41,200
I started doing it back when I used to be absolutely crazy.

2120
01:28:41,200 --> 01:28:45,300
C++, programmer, one of the funny things about doing stuff like this,

2121
01:28:45,500 --> 01:28:49,100
where I show kind of the old school dirty style of programming, where

2122
01:28:49,100 --> 01:28:54,000
you just get in and you do the code, is that I get

2123
01:28:54,300 --> 01:28:58,100
Sometimes male, obviously, from people who are livid at the fact that

2124
01:28:58,100 --> 01:29:00,000
I am not using all kinds of crazy.

2125
01:29:00,100 --> 01:29:05,500
C++ has Em's like like REI or like templates or the standard template

2126
01:29:05,500 --> 01:29:06,000
library.

2127
01:29:06,500 --> 01:29:09,200
And the hilarious thing about it is I think they think that I've never

2128
01:29:09,200 --> 01:29:11,100
used those things, but that is not the case.

2129
01:29:11,300 --> 01:29:16,300
I used to use all of those things and my code was a mess with them.

2130
01:29:16,300 --> 01:29:17,300
They were everywhere.

2131
01:29:17,400 --> 01:29:19,800
And I, you know, I actually like them at the time.

2132
01:29:19,800 --> 01:29:20,500
What can I say?

2133
01:29:20,900 --> 01:29:24,100
I've learned that I do not like the way that

2134
01:29:24,200 --> 01:29:26,900
Code comes out when you do those things, but I used to do use that

2135
01:29:26,900 --> 01:29:27,900
stuff a lot.

2136
01:29:27,900 --> 01:29:31,000
And one of the things that is true, when you have crazy templates and

2137
01:29:31,000 --> 01:29:35,000
all the sorts of other sorts of stuff, you end up with things where

2138
01:29:35,000 --> 01:29:38,700
you have, like, a template line with a ton of stuff and some return

2139
01:29:38,700 --> 01:29:43,000
values, and then all this stuff and my functions were getting out, to

2140
01:29:43,000 --> 01:29:45,800
be these huge things that were just absurd.

2141
01:29:45,800 --> 01:29:48,900
And the like, the way I have my stuff set up to highlight is the the,

2142
01:29:48,900 --> 01:29:51,500
you know, the parameter is kind of keep that keep that alignment

2143
01:29:51,500 --> 01:29:51,800
there.

2144
01:29:51,900 --> 01:29:54,100
I was, there was like no room for my stuff.

2145
01:29:54,200 --> 01:29:54,600
Tough.

2146
01:29:54,800 --> 01:29:57,400
And so I think that's basically when I started, I would break the

2147
01:29:57,400 --> 01:29:59,800
template line, plus the type on.

2148
01:30:00,000 --> 01:30:05,000
One line and the function name and parameters on to the next one like

2149
01:30:05,000 --> 01:30:05,500
that.

2150
01:30:05,600 --> 01:30:10,000
So alright with that are a stream is now over.

2151
01:30:10,000 --> 01:30:14,000
Ladies and gentlemen, I am truly sorry that we did not quite get, we

2152
01:30:14,000 --> 01:30:15,000
were so close.

2153
01:30:15,100 --> 01:30:23,600
If s Sylvan had had, I guess if I if SL and I had been friends and we

2154
01:30:23,600 --> 01:30:27,100
had talked about this quite some time ago and I had known that, I

2155
01:30:27,100 --> 01:30:28,000
don't have to do that.

2156
01:30:28,000 --> 01:30:29,900
Then I would not have been shy because I could have just a

2157
01:30:30,000 --> 01:30:31,700
Located here, and I wouldn't have been like, oh, I got to start

2158
01:30:31,700 --> 01:30:33,100
talking to you about what a create compatible.

2159
01:30:33,100 --> 01:30:33,700
DC is.

2160
01:30:34,000 --> 01:30:36,300
Now we can actually just get rid of that entirely potentially.

2161
01:30:36,400 --> 01:30:36,900
So thank you.

2162
01:30:36,900 --> 01:30:37,700
S sylvain.

2163
01:30:37,800 --> 01:30:38,900
You almost saved the day.

2164
01:30:38,900 --> 01:30:42,400
You certainly did add quite a bit to the stream, but unfortunately,

2165
01:30:42,400 --> 01:30:46,200
like I said, I don't check during the chat because I wanted you to see

2166
01:30:46,200 --> 01:30:49,700
me, make those mistakes, and see how how that goes.

2167
01:30:49,700 --> 01:30:50,200
Also.

2168
01:30:50,200 --> 01:30:52,800
I think it's good to see me make mistakes because that way people know

2169
01:30:53,400 --> 01:30:55,800
that, you know, programmers, who have been programming for a long

2170
01:30:55,800 --> 01:30:56,300
time.

2171
01:30:56,700 --> 01:30:59,900
Make a ton of mistakes because you will make a ton of mistakes.

2172
01:31:00,200 --> 01:31:02,800
You will feel like you are just stupid or something.

2173
01:31:03,000 --> 01:31:06,100
You are not or you are and we are all as well.

2174
01:31:06,100 --> 01:31:06,300
Either.

2175
01:31:06,300 --> 01:31:09,600
We're all stupid or nobody stupid one of the other, but the point is a

2176
01:31:09,600 --> 01:31:14,000
lot of mistakes are made and certainly a lot of them are made by me.

2177
01:31:14,000 --> 01:31:15,100
And so I want you to see those.

2178
01:31:15,100 --> 01:31:16,600
So I apologize for that fact.

2179
01:31:16,600 --> 01:31:18,400
I just think it's a good way to run the Stream.

2180
01:31:18,400 --> 01:31:20,500
So anyway SL van, thank you for that.

2181
01:31:20,600 --> 01:31:24,200
I'm sorry that I did not happen to check it before but that meant we

2182
01:31:24,200 --> 01:31:25,000
missed a little bit.

2183
01:31:25,000 --> 01:31:28,000
What we want to do, which is just draw a little something to the

2184
01:31:28,000 --> 01:31:29,800
bitmap so that we could see that it was worth.

2185
01:31:29,900 --> 01:31:30,300
Working.

2186
01:31:30,400 --> 01:31:33,600
But what we will do is we'll pick that up tomorrow and then we will

2187
01:31:33,600 --> 01:31:37,600
have an entire 60 minutes where we can do nothing but draw to our

2188
01:31:37,600 --> 01:31:39,600
bitmap and I think that will be pretty awesome.

2189
01:31:39,600 --> 01:31:42,700
Anyway, so it's a really good place to break even though I was hoping

2190
01:31:42,700 --> 01:31:43,800
we would get a little bit further.

2191
01:31:44,200 --> 01:31:45,600
Thank you so much for joining me.

2192
01:31:46,200 --> 01:31:47,900
It's an absolute pleasure, as it always is.

2193
01:31:47,900 --> 01:31:49,300
I'm sorry that I was sick.

2194
01:31:49,500 --> 01:31:53,400
I wish that I wasn't obviously and hopefully I will recover soon so

2195
01:31:53,400 --> 01:31:57,300
that I will not make weird Delirious mistakes when coding.

2196
01:31:57,800 --> 01:31:59,200
And also, if anyone

2197
01:32:00,000 --> 01:32:02,900
Any additional questions that they would like covered perhaps on the

2198
01:32:02,900 --> 01:32:03,600
next.

2199
01:32:04,900 --> 01:32:07,900
The next round tomorrow Night's Dream.

2200
01:32:07,900 --> 01:32:11,100
You can go to handmade hero dot-org and there is an email, a question

2201
01:32:11,100 --> 01:32:11,500
button.

2202
01:32:12,200 --> 01:32:16,300
Also, I would like to remind everyone that twitch is now also

2203
01:32:16,300 --> 01:32:18,400
temporarily archiving these streams.

2204
01:32:18,400 --> 01:32:22,300
So in addition to the archive button that you can push to get to the

2205
01:32:22,300 --> 01:32:25,500
YouTube ones, which I upload those take a little while for YouTube to

2206
01:32:25,500 --> 01:32:28,500
process, which means that sometimes you can't get to them right after

2207
01:32:28,500 --> 01:32:29,300
the stream ends.

2208
01:32:29,400 --> 01:32:29,800
So if you

2209
01:32:29,900 --> 01:32:30,100
Watching.

2210
01:32:30,100 --> 01:32:34,000
You can go to Twitch, and twitch will actually have on here.

2211
01:32:34,700 --> 01:32:35,800
No, don't start.

2212
01:32:35,800 --> 01:32:37,300
Don't start streaming me for reals.

2213
01:32:37,700 --> 01:32:41,100
It will actually have a little thing where you can go to past

2214
01:32:41,100 --> 01:32:41,600
broadcast.

2215
01:32:41,600 --> 01:32:45,200
I believe you just click on the handmade hero button there and you

2216
01:32:45,200 --> 01:32:49,500
click on past broadcasts and you can grab streams even before they've

2217
01:32:49,500 --> 01:32:52,000
ended, it looks like maybe I don't actually know how this works to be

2218
01:32:52,000 --> 01:32:53,200
honest with you, but point being.

2219
01:32:53,300 --> 01:32:56,000
If you want to start watching right away and not wait for YouTube.

2220
01:32:56,100 --> 01:32:57,300
That's actually not that you have.

2221
01:32:57,300 --> 01:32:57,500
Now.

2222
01:32:57,500 --> 01:32:59,500
These won't stay around forever twitch.

2223
01:32:59,500 --> 01:32:59,800
Clear.

2224
01:33:00,000 --> 01:33:03,000
Out after about a couple weeks I think so you need to use those

2225
01:33:03,000 --> 01:33:06,800
archives for getting the older episodes, but that will be another tool

2226
01:33:06,800 --> 01:33:07,500
you can use.

2227
01:33:07,600 --> 01:33:09,500
If you want to get things right away.

2228
01:33:10,100 --> 01:33:11,500
I think that's it for tonight.

2229
01:33:11,600 --> 01:33:14,000
Thank you so much for joining us and tomorrow.

2230
01:33:14,400 --> 01:33:15,300
It's going to be a new day.

2231
01:33:15,300 --> 01:33:17,500
Ladies and gentlemen, we're going to actually draw such a the screen.

2232
01:33:17,900 --> 01:33:18,800
I'll be honest with you.

2233
01:33:18,900 --> 01:33:20,000
I'm pretty excited about it.

2234
01:33:20,000 --> 01:33:22,400
So, please tune in tomorrow 8:00 p.m.

2235
01:33:22,900 --> 01:33:26,700
And we will do some some rendering finally.

2236
01:33:26,800 --> 01:33:27,500
I can't wait.

2237
01:33:27,600 --> 01:33:29,800
Thanks everyone for joining us and I will see you tomorrow.

2238
01:33:30,000 --> 01:33:30,100
Row.

